D G "__PCH__" 0 0 ""5.109""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""2-Apr-24""
D G "__TIME__" 0 0 ""15:07:47""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?""
D G "__DEBUG" 0 0 "1"
D G "__18F45Q43" 0 0 "1" "* File:   main.c"
C G "" 0 1 1 "*"
C G "" 0 1 1 "*"
c L "set_tris_a" 1 1 29 "FUNCTION"
F N "set_tris_a" 1 76 ""
V L "value" 1 76 "int8" `55 
F B "set_tris_a" 1 76 "void(int8 value)" `54 
F N "set_tris_b" 1 77 ""
V L "value" 1 77 "int8" `57 
F B "set_tris_b" 1 77 "void(int8 value)" `56 
F N "set_tris_c" 1 78 ""
V L "value" 1 78 "int8" `59 
F B "set_tris_c" 1 78 "void(int8 value)" `58 
F N "set_tris_d" 1 79 ""
V L "value" 1 79 "int8" `61 
F B "set_tris_d" 1 79 "void(int8 value)" `60 
F N "set_tris_e" 1 80 ""
V L "value" 1 80 "int8" `63 
F B "set_tris_e" 1 80 "void(int8 value)" `62 
F N "set_input_level_a" 1 81 ""
V L "value" 1 81 "int8" `65 
F B "set_input_level_a" 1 81 "void(int8 value)" `64 
F N "set_input_level_b" 1 82 ""
V L "value" 1 82 "int8" `67 
F B "set_input_level_b" 1 82 "void(int8 value)" `66 
F N "set_input_level_c" 1 83 ""
V L "value" 1 83 "int8" `69 
F B "set_input_level_c" 1 83 "void(int8 value)" `68 
F N "set_input_level_d" 1 84 ""
V L "value" 1 84 "int8" `71 
F B "set_input_level_d" 1 84 "void(int8 value)" `70 
F N "set_input_level_e" 1 85 ""
V L "value" 1 85 "int8" `73 
F B "set_input_level_e" 1 85 "void(int8 value)" `72 
F N "set_open_drain_a" 1 86 ""
V L "value" 1 86 "int8" `75 
F B "set_open_drain_a" 1 86 "void(int8 value)" `74 
F N "set_open_drain_b" 1 87 ""
V L "value" 1 87 "int8" `77 
F B "set_open_drain_b" 1 87 "void(int8 value)" `76 
F N "set_open_drain_c" 1 88 ""
V L "value" 1 88 "int8" `79 
F B "set_open_drain_c" 1 88 "void(int8 value)" `78 
F N "set_open_drain_d" 1 89 ""
V L "value" 1 89 "int8" `81 
F B "set_open_drain_d" 1 89 "void(int8 value)" `80 
F N "set_open_drain_e" 1 90 ""
V L "value" 1 90 "int8" `83 
F B "set_open_drain_e" 1 90 "void(int8 value)" `82 
F N "get_tris_a" 1 91 ""
F B "get_tris_a" 1 91 "int8()" `84 
F N "get_tris_b" 1 92 ""
F B "get_tris_b" 1 92 "int8()" `85 
F N "get_tris_c" 1 93 ""
F B "get_tris_c" 1 93 "int8()" `86 
F N "get_tris_d" 1 94 ""
F B "get_tris_d" 1 94 "int8()" `87 
F N "get_tris_e" 1 95 ""
F B "get_tris_e" 1 95 "int8()" `88 
F N "output_a" 1 96 ""
V L "value" 1 96 "int8" `90 
F B "output_a" 1 96 "void(int8 value)" `89 
F N "output_b" 1 97 ""
V L "value" 1 97 "int8" `92 
F B "output_b" 1 97 "void(int8 value)" `91 
F N "output_c" 1 98 ""
V L "value" 1 98 "int8" `94 
F B "output_c" 1 98 "void(int8 value)" `93 
F N "output_d" 1 99 ""
V L "value" 1 99 "int8" `96 
F B "output_d" 1 99 "void(int8 value)" `95 
F N "output_e" 1 100 ""
V L "value" 1 100 "int8" `98 
F B "output_e" 1 100 "void(int8 value)" `97 
F N "input_a" 1 101 ""
F B "input_a" 1 101 "int8()" `99 
F N "input_b" 1 102 ""
F B "input_b" 1 102 "int8()" `100 
F N "input_c" 1 103 ""
F B "input_c" 1 103 "int8()" `101 
F N "input_d" 1 104 ""
F B "input_d" 1 104 "int8()" `102 
F N "input_e" 1 105 ""
F B "input_e" 1 105 "int8()" `103 
F N "input_change_a" 1 106 ""
F B "input_change_a" 1 106 "int8()" `104 
F N "input_change_b" 1 107 ""
F B "input_change_b" 1 107 "int8()" `105 
F N "input_change_c" 1 108 ""
F B "input_change_c" 1 108 "int8()" `106 
F N "input_change_d" 1 109 ""
F B "input_change_d" 1 109 "int8()" `107 
F N "input_change_e" 1 110 ""
F B "input_change_e" 1 110 "int8()" `108 
F N "port_a_pullups" 1 111 ""
V L "upmask" 1 111 "int8" `110 
F B "port_a_pullups" 1 111 "void(int8 upmask)" `109 
F N "port_b_pullups" 1 112 ""
V L "upmask" 1 112 "int8" `112 
F B "port_b_pullups" 1 112 "void(int8 upmask)" `111 
F N "port_c_pullups" 1 113 ""
V L "upmask" 1 113 "int8" `114 
F B "port_c_pullups" 1 113 "void(int8 upmask)" `113 
F N "port_d_pullups" 1 114 ""
V L "upmask" 1 114 "int8" `116 
F B "port_d_pullups" 1 114 "void(int8 upmask)" `115 
F N "port_e_pullups" 1 115 ""
V L "upmask" 1 115 "int8" `118 
F B "port_e_pullups" 1 115 "void(int8 upmask)" `117 
F N "set_slow_slew_a" 1 116 ""
V L "value" 1 116 "int8" `120 
F B "set_slow_slew_a" 1 116 "void(int8 value)" `119 
F N "set_slow_slew_b" 1 117 ""
V L "value" 1 117 "int8" `122 
F B "set_slow_slew_b" 1 117 "void(int8 value)" `121 
F N "set_slow_slew_c" 1 118 ""
V L "value" 1 118 "int8" `124 
F B "set_slow_slew_c" 1 118 "void(int8 value)" `123 
F N "set_slow_slew_d" 1 119 ""
V L "value" 1 119 "int8" `126 
F B "set_slow_slew_d" 1 119 "void(int8 value)" `125 
F N "set_slow_slew_e" 1 120 ""
V L "value" 1 120 "int8" `128 
F B "set_slow_slew_e" 1 120 "void(int8 value)" `127 
F N "input" 1 121 ""
V L "pin" 1 121 "int32" `130 
F B "input" 1 121 "int8(int32 pin)" `129 
F N "input_state" 1 122 ""
V L "pin" 1 122 "int32" `132 
F B "input_state" 1 122 "int8(int32 pin)" `131 
F N "output_low" 1 123 ""
V L "pin" 1 123 "int32" `134 
F B "output_low" 1 123 "void(int32 pin)" `133 
F N "output_high" 1 124 ""
V L "pin" 1 124 "int32" `136 
F B "output_high" 1 124 "void(int32 pin)" `135 
F N "output_toggle" 1 125 ""
V L "pin" 1 125 "int32" `138 
F B "output_toggle" 1 125 "void(int32 pin)" `137 
F N "output_bit" 1 126 ""
V L "pin" 1 126 "int32" `140 
V L "level" 1 126 "int8" `141 
F B "output_bit" 1 126 "void(int32 pin,int8 level)" `139 
F N "output_float" 1 127 ""
V L "pin" 1 127 "int32" `143 
F B "output_float" 1 127 "void(int32 pin)" `142 
F N "output_drive" 1 128 ""
V L "pin" 1 128 "int32" `145 
F B "output_drive" 1 128 "void(int32 pin)" `144  "Constants used to identify pins in the above are:"
D G "PIN_A0" 1 132 "9840"
D G "PIN_A1" 1 133 "9841"
D G "PIN_A2" 1 134 "9842"
D G "PIN_A3" 1 135 "9843"
D G "PIN_A4" 1 136 "9844"
D G "PIN_A5" 1 137 "9845"
D G "PIN_A6" 1 138 "9846"
D G "PIN_A7" 1 139 "9847"
D G "PIN_B0" 1 141 "9848"
D G "PIN_B1" 1 142 "9849"
D G "PIN_B2" 1 143 "9850"
D G "PIN_B3" 1 144 "9851"
D G "PIN_B4" 1 145 "9852"
D G "PIN_B5" 1 146 "9853"
D G "PIN_B6" 1 147 "9854"
D G "PIN_B7" 1 148 "9855"
D G "PIN_C0" 1 150 "9856"
D G "PIN_C1" 1 151 "9857"
D G "PIN_C2" 1 152 "9858"
D G "PIN_C3" 1 153 "9859"
D G "PIN_C4" 1 154 "9860"
D G "PIN_C5" 1 155 "9861"
D G "PIN_C6" 1 156 "9862"
D G "PIN_C7" 1 157 "9863"
D G "PIN_D0" 1 159 "9864"
D G "PIN_D1" 1 160 "9865"
D G "PIN_D2" 1 161 "9866"
D G "PIN_D3" 1 162 "9867"
D G "PIN_D4" 1 163 "9868"
D G "PIN_D5" 1 164 "9869"
D G "PIN_D6" 1 165 "9870"
D G "PIN_D7" 1 166 "9871"
D G "PIN_E0" 1 168 "9872"
D G "PIN_E1" 1 169 "9873"
D G "PIN_E2" 1 170 "9874"
D G "PIN_E3" 1 171 "9875"
D G "FALSE" 1 174 "0"
D G "TRUE" 1 175 "1"
D G "BYTE" 1 177 "int8"
D G "BOOLEAN" 1 178 "int1"
D G "getc" 1 180 "getch"
D G "fgetc" 1 181 "getch"
D G "getchar" 1 182 "getch"
D G "putc" 1 183 "putchar"
D G "fputc" 1 184 "putchar"
D G "fgets" 1 185 "gets"
D G "fputs" 1 186 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
F N "restart_cause" 1 191 ""
F B "restart_cause" 1 191 "int16()" `146 
F N "reset_cpu" 1 192 ""
F B "reset_cpu" 1 192 "void()" `147 
F N "sleep" 1 193 ""
F B "sleep" 1 193 "void()" `148 
F N "sleep" 1 194 ""
V L "type" 1 194 "int8" `150 
F B "sleep" 1 194 "void(int8 type)" `149  "Constants returned from RESTART_CAUSE() are:"
D G "RESTART_NONE" 1 196 "0x1F3F" "No restart occurred, most common cause for returning this is restart_cause() was called multiple times."
D G "NORMAL_POWER_UP" 1 197 "0x1F3C"
D G "BROWNOUT_RESTART" 1 198 "0x1F3E"
D G "RESET_INSTRUCTION" 1 199 "0x1F3B"
D G "MCLR_FROM_RUN" 1 200 "0x1F37"
D G "WDT_TIMEOUT" 1 201 "0x1D2F"
D G "WDT_WINDOW_VIOLATION" 1 202 "0x1F1F"
D G "STACK_UNDERFLOW" 1 203 "0x1F7F"
D G "STACK_OVERFLOW" 1 204 "0x1FBF"
D G "CONFIG_CORRUPTION" 1 205 "0x1B3F"
D G "MCLR_FROM_SLEEP" 1 206 "0x1E37"
D G "WDT_FROM_SLEEP" 1 207 "0x1C3F"
D G "INTERRUPT_FROM_SLEEP" 1 208 "0x1E3F"
D G "MEMORY_VIOLATION" 1 209 "0x0F3F"
D G "REG_LOW_POWER_EXT_TEMP" 1 212 "8"
D G "REG_ULTRA_LOW_POWER" 1 213 "4"
D G "REG_LOW_POWER" 1 214 "2"
D G "REG_NORMAL" 1 215 "0" "default"
D G "SLEEP_FULL" 1 218 "0" "Default"
D G "SLEEP_IDLE" 1 219 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 6 "FUNCTION"
F N "setup_timer_0" 1 227 ""
V L "mode" 1 227 "int16" `152 
F B "setup_timer_0" 1 227 "void(int16 mode)" `151 
F N "setup_timer_0" 1 228 ""
V L "mode" 1 228 "int16" `154 
V L "postscale" 1 228 "int8" `155 
F B "setup_timer_0" 1 228 "void(int16 mode,int8 postscale)" `153 
F N "setup_timer_0" 1 229 ""
V L "mode" 1 229 "int16" `157 
V L "period" 1 229 "int8" `158 
V L "postscale" 1 229 "int8" `159 
F B "setup_timer_0" 1 229 "void(int16 mode,int8 period,int8 postscale)" `156  "8-bit mode only"
F N "set_timer0" 1 230 ""
V L "value" 1 230 "int8" `161 
F B "set_timer0" 1 230 "void(int8 value)" `160 
F N "set_timer0" 1 231 ""
V L "value" 1 231 "int16" `163 
F B "set_timer0" 1 231 "void(int16 value)" `162 
F N "get_timer0" 1 232 ""
F B "get_timer0" 1 232 "int8()" `164 
F N "get_timer0" 1 233 ""
f G "get_timer0" 1 233 "int16()" `165 
F N "setup_counters" 1 234 ""
V L "mode" 1 234 "int8" `166 
V L "prescaler" 1 234 "int8" `167 
F B "setup_counters" 1 234 "void(int8 mode,int8 prescaler)" `165 
F N "set_rtcc" 1 235 ""
V L "value" 1 235 "int8" `169 
F B "set_rtcc" 1 235 "void(int8 value)" `168 
F N "set_rtcc" 1 236 ""
V L "value" 1 236 "int16" `171 
F B "set_rtcc" 1 236 "void(int16 value)" `170 
F N "get_rtcc" 1 237 ""
F B "get_rtcc" 1 237 "int8()" `172 
F N "get_rtcc" 1 238 ""
f G "get_rtcc" 1 238 "int16()" `173  "Constants used for SETUP_TIMER_0() first parameter are:"
D G "T0_INTERNAL" 1 240 "0x8040"
D G "T0_HFINTOSC" 1 241 "0x8060"
D G "T0_LFINTOSC" 1 242 "0x8080"
D G "T0_MFINTOSC" 1 243 "0x80A0" "500 kHz"
D G "T0_SOSC" 1 244 "0x80C0"
D G "T0_CLC1" 1 245 "0x80E0"
D G "T0_EXT_L_TO_H" 1 246 "0x8000"
D G "T0_EXT_H_TO_L" 1 247 "0x8020"
D G "T0_OFF" 1 248 "0"
D G "T0_INPUT_SYNCRONIZED" 1 250 "0x0000"
D G "T0_INPUT_NOT_SYNCRONIZED" 1 251 "0x0010"
D G "T0_DIV_1" 1 253 "0x0000"
D G "T0_DIV_2" 1 254 "0x0001"
D G "T0_DIV_4" 1 255 "0x0002"
D G "T0_DIV_8" 1 256 "0x0003"
D G "T0_DIV_16" 1 257 "0x0004"
D G "T0_DIV_32" 1 258 "0x0005"
D G "T0_DIV_64" 1 259 "0x0006"
D G "T0_DIV_128" 1 260 "0x0007"
D G "T0_DIV_256" 1 261 "0x0008"
D G "T0_DIV_512" 1 262 "0x0009"
D G "T0_DIV_1024" 1 263 "0x000A"
D G "T0_DIV_2048" 1 264 "0x000B"
D G "T0_DIV_4096" 1 265 "0x000C"
D G "T0_DIV_8192" 1 266 "0x000D"
D G "T0_DIV_16384" 1 267 "0x000E"
D G "T0_DIV_32768" 1 268 "0x000F"
D G "T0_8_BIT" 1 270 "0x1000"
D G "T0_16_BIT" 1 271 "0x0000"
D G "RTCC_INTERNAL" 1 276 "0x8040"
D G "RTCC_EXT_L_TO_H" 1 277 "0x8000"
D G "RTCC_EXT_H_TO_L" 1 278 "0x8020"
D G "RTCC_OFF" 1 279 "0x0000"
D G "RTCC_8_BIT" 1 280 "0x1000"
D G "RTCC_DIV_1" 1 282 "0x0000"
D G "RTCC_DIV_2" 1 283 "0x0001"
D G "RTCC_DIV_4" 1 284 "0x0002"
D G "RTCC_DIV_8" 1 285 "0x0003"
D G "RTCC_DIV_16" 1 286 "0x0004"
D G "RTCC_DIV_32" 1 287 "0x0005"
D G "RTCC_DIV_64" 1 288 "0x0006"
D G "RTCC_DIV_128" 1 289 "0x0007"
D G "RTCC_DIV_256" 1 290 "0x0008"
c L "get_rtcc" 1 1 6 "FUNCTION"
F N "setup_wdt" 1 298 ""
V L "mode" 1 298 "int16" `174 
F B "setup_wdt" 1 298 "void(int16 mode)" `173 
F N "restart_wdt" 1 299 ""
F B "restart_wdt" 1 299 "void()" `175 
F N "get_wdt" 1 300 ""
F B "get_wdt" 1 300 "int8()" `176  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 1 303 "0x8000"
D G "WDT_OFF" 1 304 "0x0000"
D G "WDT_1MS" 1 307 "0x0001"
D G "WDT_2MS" 1 308 "0x0003"
D G "WDT_4MS" 1 309 "0x0005"
D G "WDT_8MS" 1 310 "0x0007"
D G "WDT_16MS" 1 311 "0x0009"
D G "WDT_32MS" 1 312 "0x000B"
D G "WDT_64MS" 1 313 "0x000D"
D G "WDT_128MS" 1 314 "0x000F"
D G "WDT_256MS" 1 315 "0x0011"
D G "WDT_512MS" 1 316 "0x0013"
D G "WDT_1S" 1 317 "0x0015"
D G "WDT_2S" 1 318 "0x0017"
D G "WDT_4S" 1 319 "0x0019"
D G "WDT_8S" 1 320 "0x001B"
D G "WDT_16S" 1 321 "0x001D"
D G "WDT_32S" 1 322 "0x001F"
D G "WDT_64S" 1 323 "0x0021"
D G "WDT_128S" 1 324 "0x0023"
D G "WDT_256S" 1 325 "0x0025"
D G "WDT_WINDOW_12_PERCENT" 1 328 "0x0800"
D G "WDT_WINDOW_25_PERCENT" 1 329 "0x0100"
D G "WDT_WINDOW_37_PERCENT" 1 330 "0x0200"
D G "WDT_WINDOW_50_PERCENT" 1 331 "0x0300"
D G "WDT_WINDOW_62_PERCENT" 1 332 "0x0400"
D G "WDT_WINDOW_75_PERCENT" 1 333 "0x0500"
D G "WDT_WINDOW_87_PERCENT" 1 334 "0x0600"
D G "WDT_WINDOW_100_PERCENT" 1 335 "0x0700"
D G "WDT_CLK_31000" 1 338 "0x0000"
D G "WDT_CLK_31250" 1 339 "0x1000"
c L "get_wdt" 1 1 3 "FUNCTION"
F N "setup_timer_1" 1 346 ""
V L "mode" 1 346 "int32" `179 
F B "setup_timer_1" 1 346 "void(int32 mode)" `178 
F N "get_timer1" 1 347 ""
F B "get_timer1" 1 347 "int16()" `180 
F N "set_timer1" 1 348 ""
V L "value" 1 348 "int16" `182 
F B "set_timer1" 1 348 "void(int16 value)" `181  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 1 351 "0"
D G "T1_EXTERNAL" 1 352 "0x0003"
D G "T1_INTERNAL" 1 353 "0x0103"
D G "T1_FOSC" 1 354 "0x0203"
D G "T1_HFINTRC" 1 355 "0x0303"
D G "T1_LFINTRC" 1 356 "0x0403"
D G "T1_MFINTRC" 1 357 "0x0503"
D G "T1_MFINTRC_32KHZ" 1 358 "0x0603"
D G "T1_SOSC" 1 359 "0x0703"
D G "T1_EXTOSC" 1 360 "0x0803"
D G "T1_CLKREF" 1 361 "0x0903"
D G "T1_TIMER0" 1 362 "0x0A03"
D G "T1_TIMER3" 1 363 "0x0C03"
D G "T1_TIMER5" 1 364 "0x0D03"
D G "T1_CLC1" 1 365 "0x0E03"
D G "T1_CLC2" 1 366 "0x0F03"
D G "T1_CLC3" 1 367 "0x1003"
D G "T1_CLC4" 1 368 "0x1103"
D G "T1_CLC5" 1 369 "0x1203"
D G "T1_CLC6" 1 370 "0x1303"
D G "T1_CLC7" 1 371 "0x1403"
D G "T1_CLC8" 1 372 "0x1503"
D G "T1_SYNC" 1 374 "0x04"
D G "T1_DIV_BY_1" 1 376 "0"
D G "T1_DIV_BY_2" 1 377 "0x10"
D G "T1_DIV_BY_4" 1 378 "0x20"
D G "T1_DIV_BY_8" 1 379 "0x30"
D G "T1_GATE" 1 381 "0x8000"
D G "T1_GATE_INVERTED" 1 382 "0xC000"
D G "T1_GATE_TOGGLE" 1 383 "0xA000"
D G "T1_GATE_SINGLE" 1 384 "0x9000"
D G "T1_GATE_TIMER0" 1 385 "0x018000"
D G "T1_GATE_TIMER2" 1 386 "0x038000"
D G "T1_GATE_TIMER3" 1 387 "0x048000"
D G "T1_GATE_TIMER4" 1 388 "0x058000"
D G "T1_GATE_TIMER5" 1 389 "0x068000"
D G "T1_GATE_TIMER6" 1 390 "0x078000"
D G "T1_GATE_SMT1" 1 391 "0x088000"
D G "T1_GATE_CCP1" 1 392 "0x098000"
D G "T1_GATE_CCP2" 1 393 "0x0A8000"
D G "T1_GATE_CCP3" 1 394 "0x0B8000"
D G "T1_GATE_PWM1S1P1" 1 395 "0x0C8000"
D G "T1_GATE_PWM1S1P2" 1 396 "0x0D8000"
D G "T1_GATE_PWM2S1P1" 1 397 "0x0E8000"
D G "T1_GATE_PWM2S1P2" 1 398 "0x0F8000"
D G "T1_GATE_PWM3S1P1" 1 399 "0x108000"
D G "T1_GATE_PWM3S1P2" 1 400 "0x118000"
D G "T1_GATE_NCO1" 1 401 "0x148000"
D G "T1_GATE_NCO2" 1 402 "0x158000"
D G "T1_GATE_NCO3" 1 403 "0x168000"
D G "T1_GATE_COMP1" 1 404 "0x178000"
D G "T1_GATE_COMP2" 1 405 "0x188000"
D G "T1_GATE_ZCD" 1 406 "0x198000"
D G "T1_GATE_CLC1" 1 407 "0x1A8000"
D G "T1_GATE_CLC2" 1 408 "0x1B8000"
D G "T1_GATE_CLC3" 1 409 "0x1C8000"
D G "T1_GATE_CLC4" 1 410 "0x1D8000"
D G "T1_GATE_CLC5" 1 411 "0x1E8000"
D G "T1_GATE_CLC6" 1 412 "0x1F8000"
D G "T1_GATE_CLC7" 1 413 "0x208000"
D G "T1_GATE_CLC8" 1 414 "0x218000"
c L "set_timer1" 1 1 3 "FUNCTION"
F N "setup_timer_2" 1 419 ""
V L "mode" 1 419 "int32" `184 
V L "period" 1 419 "int8" `185 
V L "postscaler" 1 419 "int8" `186 
F B "setup_timer_2" 1 419 "void(int32 mode,int8 period,int8 postscaler)" `183 
F N "get_timer2" 1 420 ""
F B "get_timer2" 1 420 "int8()" `187 
F N "set_timer2" 1 421 ""
V L "value" 1 421 "int8" `189 
F B "set_timer2" 1 421 "void(int8 value)" `188  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 1 423 "0"
D G "T2_DIV_BY_1" 1 424 "0x80"
D G "T2_DIV_BY_2" 1 425 "0x90"
D G "T2_DIV_BY_4" 1 426 "0xA0"
D G "T2_DIV_BY_8" 1 427 "0xB0"
D G "T2_DIV_BY_16" 1 428 "0xC0"
D G "T2_DIV_BY_32" 1 429 "0xD0"
D G "T2_DIV_BY_64" 1 430 "0xE0"
D G "T2_DIV_BY_128" 1 431 "0xF0"
D G "T2_CLK_T2IN" 1 433 "0"
D G "T2_CLK_INTERNAL" 1 434 "0x0100" "FOSC/4"
D G "T2_CLK_FOSC" 1 435 "0x0200"
D G "T2_CLK_HFINTRC" 1 436 "0x0300"
D G "T2_CLK_LFINTRC" 1 437 "0x0400"
D G "T2_CLK_MFINTRC_500KHZ" 1 438 "0x0500"
D G "T2_CLK_MFINTRC_32KHZ" 1 439 "0x0600"
D G "T2_CLK_SOSC" 1 440 "0x0700"
D G "T2_CLK_EXTOSC" 1 441 "0x0800"
D G "T2_CLK_CLKR" 1 442 "0x0900"
D G "T2_CLK_NCO1" 1 443 "0x0A00"
D G "T2_CLK_NCO2" 1 444 "0x0B00"
D G "T2_CLK_NCO3" 1 445 "0x0C00"
D G "T2_CLK_ZCD" 1 446 "0x0D00"
D G "T2_CLK_CLC1" 1 447 "0x0E00"
D G "T2_CLK_CLC2" 1 448 "0x0F00"
D G "T2_CLK_CLC3" 1 449 "0x1000"
D G "T2_CLK_CLC4" 1 450 "0x1100"
D G "T2_CLK_CLC5" 1 451 "0x1200"
D G "T2_CLK_CLC6" 1 452 "0x1300"
D G "T2_CLK_CLC7" 1 453 "0x1400"
D G "T2_CLK_CLC8" 1 454 "0x1500"
D G "T2_START_IMMEDIATELY" 1 457 "0"
D G "T2_START_WHEN_HIGH" 1 458 "0x010000"
D G "T2_START_WHEN_LOW" 1 459 "0x020000"
D G "T2_RESET_ON_BOTH_EDGES" 1 460 "0x030000"
D G "T2_RESET_ON_RE" 1 461 "0x040000"
D G "T2_RESET_ON_FE" 1 462 "0x050000"
D G "T2_RESET_WHEN_LOW" 1 463 "0x060000"
D G "T2_RESET_WHEN_HIGH" 1 464 "0x070000"
D G "T2_ONE_SHOT_START_IMMEDIATELY" 1 465 "0x080000"
D G "T2_ONE_SHOT_START_ON_RE" 1 466 "0x090000"
D G "T2_ONE_SHOT_START_ON_FE" 1 467 "0x0A0000"
D G "T2_ONE_SHOT_START_ON_BOTH_EDGES" 1 468 "0x0B0000"
D G "T2_ONE_SHOT_START_ON_RE_RESET_ON_RE" 1 469 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
D G "T2_ONE_SHOT_START_ON_FE_RESET_ON_FE" 1 470 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
D G "T2_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 1 471 "0x0E0000"
D G "T2_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 1 472 "0x0F0000"
D G "T2_MONO_STABLE_START_ON_RE" 1 473 "0x110000"
D G "T2_MONO_STABLE_START_ON_FE" 1 474 "0x120000"
D G "T2_MONO_STABLE_START_ON_EE" 1 475 "0x130000"
D G "T2_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 1 476 "0x160000"
D G "T2_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 1 477 "0x170000"
D G "T2_SYNC_ON_WITH_T2CLK" 1 479 "0x200000"
D G "T2_INVERTED" 1 480 "0x400000"
D G "T2_SYNC_PRESCALER_WITH_CLK" 1 481 "0x800000"
D G "T2_RESET_FROM_T2IN" 1 484 "0"
D G "T2_RESET_FROM_TMR4" 1 485 "0x02000000"
D G "T2_RESET_FROM_TMR6" 1 486 "0x03000000"
D G "T2_RESET_FROM_CCP1" 1 487 "0x04000000"
D G "T2_RESET_FROM_CCP2" 1 488 "0x05000000"
D G "T2_RESET_FROM_CCP3" 1 489 "0x06000000"
D G "T2_RESET_FROM_PWM1S1P1" 1 490 "0x07000000"
D G "T2_RESET_FROM_PWM1S1P2" 1 491 "0x08000000"
D G "T2_RESET_FROM_PWM2S1P1" 1 492 "0x09000000"
D G "T2_RESET_FROM_PWM2S1P2" 1 493 "0x0A000000"
D G "T2_RESET_FROM_PWM3S1P1" 1 494 "0x0B000000"
D G "T2_RESET_FROM_PWM3S1P2" 1 495 "0x0C000000"
D G "T2_RESET_FROM_C1OUT" 1 496 "0x0F000000"
D G "T2_RESET_FROM_C2OUT" 1 497 "0x10000000"
D G "T2_RESET_FROM_ZCD" 1 498 "0x11000000"
D G "T2_RESET_FROM_CLC1" 1 499 "0x12000000"
D G "T2_RESET_FROM_CLC2" 1 500 "0x13000000"
D G "T2_RESET_FROM_CLC3" 1 501 "0x14000000"
D G "T2_RESET_FROM_CLC4" 1 502 "0x15000000"
D G "T2_RESET_FROM_CLC5" 1 503 "0x16000000"
D G "T2_RESET_FROM_CLC6" 1 504 "0x17000000"
D G "T2_RESET_FROM_CLC7" 1 505 "0x18000000"
D G "T2_RESET_FROM_CLC8" 1 506 "0x19000000"
D G "T2_RESET_FROM_U1RX" 1 507 "0x1A000000"
D G "T2_RESET_FROM_U1TX" 1 508 "0x1B000000"
D G "T2_RESET_FROM_U2RX" 1 509 "0x1C000000"
D G "T2_RESET_FROM_U2TX" 1 510 "0x1D000000"
D G "T2_RESET_FROM_U3RX" 1 511 "0x1E000000"
D G "T2_RESET_FROM_U3TX" 1 512 "0x1F000000"
D G "T2_RESET_FROM_U4RX" 1 513 "0x20000000"
D G "T2_RESET_FROM_U4TX" 1 514 "0x21000000"
D G "T2_RESET_FROM_U5RX" 1 515 "0x22000000"
D G "T2_RESET_FROM_U5TX" 1 516 "0x23000000"
c L "set_timer2" 1 1 3 "FUNCTION"
F N "setup_timer_3" 1 521 ""
V L "mode" 1 521 "int32" `191 
F B "setup_timer_3" 1 521 "void(int32 mode)" `190 
F N "get_timer3" 1 522 ""
F B "get_timer3" 1 522 "int16()" `192 
F N "set_timer3" 1 523 ""
V L "value" 1 523 "int16" `194 
F B "set_timer3" 1 523 "void(int16 value)" `193  "Constants used for SETUP_TIMER_3() are:"
D G "T3_DISABLED" 1 526 "0"
D G "T3_EXTERNAL" 1 527 "0x0003"
D G "T3_INTERNAL" 1 528 "0x0103"
D G "T3_FOSC" 1 529 "0x0203"
D G "T3_HFINTRC" 1 530 "0x0303"
D G "T3_LFINTRC" 1 531 "0x0403"
D G "T3_MFINTRC" 1 532 "0x0503"
D G "T3_MFINTRC_32KHZ" 1 533 "0x0603"
D G "T3_SOSC" 1 534 "0x0703"
D G "T3_EXTOSC" 1 535 "0x0803"
D G "T3_CLKREF" 1 536 "0x0903"
D G "T3_TIMER0" 1 537 "0x0A03"
D G "T3_TIMER1" 1 538 "0x0B03"
D G "T3_TIMER5" 1 539 "0x0D03"
D G "T3_CLC1" 1 540 "0x0E03"
D G "T3_CLC2" 1 541 "0x0F03"
D G "T3_CLC3" 1 542 "0x1003"
D G "T3_CLC4" 1 543 "0x1103"
D G "T3_CLC5" 1 544 "0x1203"
D G "T3_CLC6" 1 545 "0x1303"
D G "T3_CLC7" 1 546 "0x1403"
D G "T3_CLC8" 1 547 "0x1503"
D G "T3_SYNC" 1 549 "0x04"
D G "T3_DIV_BY_1" 1 551 "0"
D G "T3_DIV_BY_2" 1 552 "0x10"
D G "T3_DIV_BY_4" 1 553 "0x20"
D G "T3_DIV_BY_8" 1 554 "0x30"
D G "T3_GATE" 1 556 "0x8000"
D G "T3_GATE_INVERTED" 1 557 "0xC000"
D G "T3_GATE_TOGGLE" 1 558 "0xA000"
D G "T3_GATE_SINGLE" 1 559 "0x9000"
D G "T3_GATE_TIMER0" 1 560 "0x018000"
D G "T3_GATE_TIMER1" 1 561 "0x028000"
D G "T3_GATE_TIMER2" 1 562 "0x038000"
D G "T3_GATE_TIMER4" 1 563 "0x058000"
D G "T3_GATE_TIMER5" 1 564 "0x068000"
D G "T3_GATE_TIMER6" 1 565 "0x078000"
D G "T3_GATE_SMT1" 1 566 "0x088000"
D G "T3_GATE_CCP1" 1 567 "0x098000"
D G "T3_GATE_CCP2" 1 568 "0x0A8000"
D G "T3_GATE_CCP3" 1 569 "0x0B8000"
D G "T3_GATE_PWM1S1P1" 1 570 "0x0C8000"
D G "T3_GATE_PWM1S1P2" 1 571 "0x0D8000"
D G "T3_GATE_PWM2S1P1" 1 572 "0x0E8000"
D G "T3_GATE_PWM2S1P2" 1 573 "0x0F8000"
D G "T3_GATE_PWM3S1P1" 1 574 "0x108000"
D G "T3_GATE_PWM3S1P2" 1 575 "0x118000"
D G "T3_GATE_NCO1" 1 576 "0x148000"
D G "T3_GATE_NCO2" 1 577 "0x158000"
D G "T3_GATE_NCO3" 1 578 "0x168000"
D G "T3_GATE_COMP1" 1 579 "0x178000"
D G "T3_GATE_COMP2" 1 580 "0x188000"
D G "T3_GATE_ZCD" 1 581 "0x198000"
D G "T3_GATE_CLC1" 1 582 "0x1A8000"
D G "T3_GATE_CLC2" 1 583 "0x1B8000"
D G "T3_GATE_CLC3" 1 584 "0x1C8000"
D G "T3_GATE_CLC4" 1 585 "0x1D8000"
D G "T3_GATE_CLC5" 1 586 "0x1E8000"
D G "T3_GATE_CLC6" 1 587 "0x1F8000"
D G "T3_GATE_CLC7" 1 588 "0x208000"
D G "T3_GATE_CLC8" 1 589 "0x218000"
c L "set_timer3" 1 1 3 "FUNCTION"
F N "setup_timer_4" 1 594 ""
V L "mode" 1 594 "int32" `196 
V L "period" 1 594 "int8" `197 
V L "postscaler" 1 594 "int8" `198 
F B "setup_timer_4" 1 594 "void(int32 mode,int8 period,int8 postscaler)" `195 
F N "get_timer4" 1 595 ""
F B "get_timer4" 1 595 "int8()" `199 
F N "set_timer4" 1 596 ""
V L "value" 1 596 "int8" `201 
F B "set_timer4" 1 596 "void(int8 value)" `200  "Constants used for SETUP_TIMER_4() are:"
D G "T4_DISABLED" 1 598 "0"
D G "T4_DIV_BY_1" 1 599 "0x80"
D G "T4_DIV_BY_2" 1 600 "0x90"
D G "T4_DIV_BY_4" 1 601 "0xA0"
D G "T4_DIV_BY_8" 1 602 "0xB0"
D G "T4_DIV_BY_16" 1 603 "0xC0"
D G "T4_DIV_BY_32" 1 604 "0xD0"
D G "T4_DIV_BY_64" 1 605 "0xE0"
D G "T4_DIV_BY_128" 1 606 "0xF0"
D G "T4_CLK_T4IN" 1 608 "0"
D G "T4_CLK_INTERNAL" 1 609 "0x0100"
D G "T4_CLK_FOSC" 1 610 "0x0200"
D G "T4_CLK_HFINTRC" 1 611 "0x0300"
D G "T4_CLK_LFINTRC" 1 612 "0x0400"
D G "T4_CLK_MFINTRC_500KHZ" 1 613 "0x0500"
D G "T4_CLK_MFINTRC_32KHZ" 1 614 "0x0600"
D G "T4_CLK_SOSC" 1 615 "0x0700"
D G "T4_CLK_EXTOSC" 1 616 "0x0800"
D G "T4_CLK_CLKR" 1 617 "0x0900"
D G "T4_CLK_NCO1" 1 618 "0x0A00"
D G "T4_CLK_NCO2" 1 619 "0x0B00"
D G "T4_CLK_NCO3" 1 620 "0x0C00"
D G "T4_CLK_ZCD" 1 621 "0x0D00"
D G "T4_CLK_CLC1" 1 622 "0x0E00"
D G "T4_CLK_CLC2" 1 623 "0x0F00"
D G "T4_CLK_CLC3" 1 624 "0x1000"
D G "T4_CLK_CLC4" 1 625 "0x1100"
D G "T4_CLK_CLC5" 1 626 "0x1200"
D G "T4_CLK_CLC6" 1 627 "0x1300"
D G "T4_CLK_CLC7" 1 628 "0x1400"
D G "T4_CLK_CLC8" 1 629 "0x1500"
D G "T4_START_IMMEDIATELY" 1 632 "0"
D G "T4_START_WHEN_HIGH" 1 633 "0x010000"
D G "T4_START_WHEN_LOW" 1 634 "0x020000"
D G "T4_RESET_ON_BOTH_EDGES" 1 635 "0x030000"
D G "T4_RESET_ON_RE" 1 636 "0x040000"
D G "T4_RESET_ON_FE" 1 637 "0x050000"
D G "T4_RESET_WHEN_LOW" 1 638 "0x060000"
D G "T4_RESET_WHEN_HIGH" 1 639 "0x070000"
D G "T4_ONE_SHOT_START_IMMEDIATELY" 1 640 "0x080000"
D G "T4_ONE_SHOT_START_ON_RE" 1 641 "0x090000"
D G "T4_ONE_SHOT_START_ON_FE" 1 642 "0x0A0000"
D G "T4_ONE_SHOT_START_ON_BOTH_EDGES" 1 643 "0x0B0000"
D G "T4_ONE_SHOT_START_ON_RE_RESET_ON_RE" 1 644 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
D G "T4_ONE_SHOT_START_ON_FE_RESET_ON_FE" 1 645 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
D G "T4_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 1 646 "0x0E0000"
D G "T4_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 1 647 "0x0F0000"
D G "T4_MONO_STABLE_START_ON_RE" 1 648 "0x110000"
D G "T4_MONO_STABLE_START_ON_FE" 1 649 "0x120000"
D G "T4_MONO_STABLE_START_ON_EE" 1 650 "0x130000"
D G "T4_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 1 651 "0x160000"
D G "T4_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 1 652 "0x170000"
D G "T4_SYNC_ON_WITH_T2CLK" 1 655 "0x200000"
D G "T4_INVERTED" 1 656 "0x400000"
D G "T4_SYNC_PRESCALER_WITH_CLK" 1 657 "0x800000"
D G "T4_RESET_FROM_T4IN" 1 660 "0"
D G "T4_RESET_FROM_TMR4" 1 661 "0x02000000"
D G "T4_RESET_FROM_TMR6" 1 662 "0x03000000"
D G "T4_RESET_FROM_CCP1" 1 663 "0x04000000"
D G "T4_RESET_FROM_CCP2" 1 664 "0x05000000"
D G "T4_RESET_FROM_CCP3" 1 665 "0x06000000"
D G "T4_RESET_FROM_PWM1S1P1" 1 666 "0x07000000"
D G "T4_RESET_FROM_PWM1S1P2" 1 667 "0x08000000"
D G "T4_RESET_FROM_PWM2S1P1" 1 668 "0x09000000"
D G "T4_RESET_FROM_PWM2S1P2" 1 669 "0x0A000000"
D G "T4_RESET_FROM_PWM3S1P1" 1 670 "0x0B000000"
D G "T4_RESET_FROM_PWM3S1P2" 1 671 "0x0C000000"
D G "T4_RESET_FROM_C1OUT" 1 672 "0x0F000000"
D G "T4_RESET_FROM_C2OUT" 1 673 "0x10000000"
D G "T4_RESET_FROM_ZCD" 1 674 "0x11000000"
D G "T4_RESET_FROM_CLC1" 1 675 "0x12000000"
D G "T4_RESET_FROM_CLC2" 1 676 "0x13000000"
D G "T4_RESET_FROM_CLC3" 1 677 "0x14000000"
D G "T4_RESET_FROM_CLC4" 1 678 "0x15000000"
D G "T4_RESET_FROM_CLC5" 1 679 "0x16000000"
D G "T4_RESET_FROM_CLC6" 1 680 "0x17000000"
D G "T4_RESET_FROM_CLC7" 1 681 "0x18000000"
D G "T4_RESET_FROM_CLC8" 1 682 "0x19000000"
D G "T4_RESET_FROM_U1RX" 1 683 "0x1A000000"
D G "T4_RESET_FROM_U1TX" 1 684 "0x1B000000"
D G "T4_RESET_FROM_U2RX" 1 685 "0x1C000000"
D G "T4_RESET_FROM_U2TX" 1 686 "0x1D000000"
D G "T4_RESET_FROM_U3RX" 1 687 "0x1E000000"
D G "T4_RESET_FROM_U3TX" 1 688 "0x1F000000"
D G "T4_RESET_FROM_U4RX" 1 689 "0x20000000"
D G "T4_RESET_FROM_U4TX" 1 690 "0x21000000"
D G "T4_RESET_FROM_U5RX" 1 691 "0x22000000"
D G "T4_RESET_FROM_U5TX" 1 692 "0x23000000"
c L "set_timer4" 1 1 3 "FUNCTION"
F N "setup_timer_5" 1 697 ""
V L "mode" 1 697 "int32" `203 
F B "setup_timer_5" 1 697 "void(int32 mode)" `202 
F N "get_timer5" 1 698 ""
F B "get_timer5" 1 698 "int16()" `204 
F N "set_timer5" 1 699 ""
V L "value" 1 699 "int16" `206 
F B "set_timer5" 1 699 "void(int16 value)" `205  "Constants used for SETUP_TIMER_5() are:"
D G "T5_DISABLED" 1 702 "0"
D G "T5_EXTERNAL" 1 703 "0x0003"
D G "T5_INTERNAL" 1 704 "0x0103"
D G "T5_FOSC" 1 705 "0x0203"
D G "T5_HFINTRC" 1 706 "0x0303"
D G "T5_LFINTRC" 1 707 "0x0403"
D G "T5_MFINTRC" 1 708 "0x0503"
D G "T5_MFINTRC_32KHZ" 1 709 "0x0603"
D G "T5_SOSC" 1 710 "0x0703"
D G "T5_EXTOSC" 1 711 "0x0803"
D G "T5_CLKREF" 1 712 "0x0903"
D G "T5_TIMER0" 1 713 "0x0A03"
D G "T5_TIMER1" 1 714 "0x0B03"
D G "T5_TIMER5" 1 715 "0x0D03"
D G "T5_CLC1" 1 716 "0x0E03"
D G "T5_CLC2" 1 717 "0x0F03"
D G "T5_CLC3" 1 718 "0x1003"
D G "T5_CLC4" 1 719 "0x1103"
D G "T5_CLC5" 1 720 "0x1203"
D G "T5_CLC6" 1 721 "0x1303"
D G "T5_CLC7" 1 722 "0x1403"
D G "T5_CLC8" 1 723 "0x1503"
D G "T5_SYNC" 1 725 "0x04"
D G "T5_DIV_BY_1" 1 727 "0"
D G "T5_DIV_BY_2" 1 728 "0x10"
D G "T5_DIV_BY_4" 1 729 "0x20"
D G "T5_DIV_BY_8" 1 730 "0x30"
D G "T5_GATE" 1 732 "0x8000"
D G "T5_GATE_INVERTED" 1 733 "0xC000"
D G "T5_GATE_TOGGLE" 1 734 "0xA000"
D G "T5_GATE_SINGLE" 1 735 "0x9000"
D G "T5_GATE_TIMER0" 1 736 "0x018000"
D G "T5_GATE_TIMER1" 1 737 "0x028000"
D G "T5_GATE_TIMER2" 1 738 "0x038000"
D G "T5_GATE_TIMER3" 1 739 "0x048000"
D G "T5_GATE_TIMER4" 1 740 "0x058000"
D G "T5_GATE_TIMER6" 1 741 "0x078000"
D G "T5_GATE_SMT1" 1 742 "0x088000"
D G "T5_GATE_CCP1" 1 743 "0x098000"
D G "T5_GATE_CCP2" 1 744 "0x0A8000"
D G "T5_GATE_CCP3" 1 745 "0x0B8000"
D G "T5_GATE_PWM1S1P1" 1 746 "0x0C8000"
D G "T5_GATE_PWM1S1P2" 1 747 "0x0D8000"
D G "T5_GATE_PWM2S1P1" 1 748 "0x0E8000"
D G "T5_GATE_PWM2S1P2" 1 749 "0x0F8000"
D G "T5_GATE_PWM3S1P1" 1 750 "0x108000"
D G "T5_GATE_PWM3S1P2" 1 751 "0x118000"
D G "T5_GATE_NCO1" 1 752 "0x148000"
D G "T5_GATE_NCO2" 1 753 "0x158000"
D G "T5_GATE_NCO3" 1 754 "0x168000"
D G "T5_GATE_COMP1" 1 755 "0x178000"
D G "T5_GATE_COMP2" 1 756 "0x188000"
D G "T5_GATE_ZCD" 1 757 "0x198000"
D G "T5_GATE_CLC1" 1 758 "0x1A8000"
D G "T5_GATE_CLC2" 1 759 "0x1B8000"
D G "T5_GATE_CLC3" 1 760 "0x1C8000"
D G "T5_GATE_CLC4" 1 761 "0x1D8000"
D G "T5_GATE_CLC5" 1 762 "0x1E8000"
D G "T5_GATE_CLC6" 1 763 "0x1F8000"
D G "T5_GATE_CLC7" 1 764 "0x208000"
D G "T5_GATE_CLC8" 1 765 "0x218000"
c L "set_timer5" 1 1 3 "FUNCTION"
F N "setup_timer_6" 1 770 ""
V L "mode" 1 770 "int32" `208 
V L "period" 1 770 "int8" `209 
V L "postscaler" 1 770 "int8" `210 
F B "setup_timer_6" 1 770 "void(int32 mode,int8 period,int8 postscaler)" `207 
F N "get_timer6" 1 771 ""
F B "get_timer6" 1 771 "int8()" `211 
F N "set_timer6" 1 772 ""
V L "value" 1 772 "int8" `213 
F B "set_timer6" 1 772 "void(int8 value)" `212  "Constants used for SETUP_TIMER_6() are:"
D G "T6_DISABLED" 1 774 "0"
D G "T6_DIV_BY_1" 1 775 "0x80"
D G "T6_DIV_BY_2" 1 776 "0x90"
D G "T6_DIV_BY_4" 1 777 "0xA0"
D G "T6_DIV_BY_8" 1 778 "0xB0"
D G "T6_DIV_BY_16" 1 779 "0xC0"
D G "T6_DIV_BY_32" 1 780 "0xD0"
D G "T6_DIV_BY_64" 1 781 "0xE0"
D G "T6_DIV_BY_128" 1 782 "0xF0"
D G "T6_CLK_T6IN" 1 784 "0"
D G "T6_CLK_INTERNAL" 1 785 "0x0100" "FOSC/4"
D G "T6_CLK_FOSC" 1 786 "0x0200"
D G "T6_CLK_HFINTRC" 1 787 "0x0300"
D G "T6_CLK_LFINTRC" 1 788 "0x0400"
D G "T6_CLK_MFINTRC_500KHZ" 1 789 "0x0500"
D G "T6_CLK_MFINTRC_32KHZ" 1 790 "0x0600"
D G "T6_CLK_SOSC" 1 791 "0x0700"
D G "T6_CLK_EXTOSC" 1 792 "0x0800"
D G "T6_CLK_CLKR" 1 793 "0x0900"
D G "T6_CLK_NCO1" 1 794 "0x0A00"
D G "T6_CLK_NCO2" 1 795 "0x0B00"
D G "T6_CLK_NCO3" 1 796 "0x0C00"
D G "T6_CLK_ZCD" 1 797 "0x0D00"
D G "T6_CLK_CLC1" 1 798 "0x0E00"
D G "T6_CLK_CLC2" 1 799 "0x0F00"
D G "T6_CLK_CLC3" 1 800 "0x1000"
D G "T6_CLK_CLC4" 1 801 "0x1100"
D G "T6_CLK_CLC5" 1 802 "0x1200"
D G "T6_CLK_CLC6" 1 803 "0x1300"
D G "T6_CLK_CLC7" 1 804 "0x1400"
D G "T6_CLK_CLC8" 1 805 "0x1500"
D G "T6_START_IMMEDIATELY" 1 808 "0"
D G "T6_START_WHEN_HIGH" 1 809 "0x010000"
D G "T6_START_WHEN_LOW" 1 810 "0x020000"
D G "T6_RESET_ON_BOTH_EDGES" 1 811 "0x030000"
D G "T6_RESET_ON_RE" 1 812 "0x040000"
D G "T6_RESET_ON_FE" 1 813 "0x050000"
D G "T6_RESET_WHEN_LOW" 1 814 "0x060000"
D G "T6_RESET_WHEN_HIGH" 1 815 "0x070000"
D G "T6_ONE_SHOT_START_IMMEDIATELY" 1 816 "0x080000"
D G "T6_ONE_SHOT_START_ON_RE" 1 817 "0x090000"
D G "T6_ONE_SHOT_START_ON_FE" 1 818 "0x0A0000"
D G "T6_ONE_SHOT_START_ON_BOTH_EDGES" 1 819 "0x0B0000"
D G "T6_ONE_SHOT_START_ON_RE_RESET_ON_RE" 1 820 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
D G "T6_ONE_SHOT_START_ON_FE_RESET_ON_FE" 1 821 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
D G "T6_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 1 822 "0x0E0000"
D G "T6_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 1 823 "0x0F0000"
D G "T6_MONO_STABLE_START_ON_RE" 1 824 "0x110000"
D G "T6_MONO_STABLE_START_ON_FE" 1 825 "0x120000"
D G "T6_MONO_STABLE_START_ON_EE" 1 826 "0x130000"
D G "T6_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 1 827 "0x160000"
D G "T6_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 1 828 "0x170000"
D G "T6_SYNC_ON_WITH_T2CLK" 1 830 "0x200000"
D G "T6_INVERTED" 1 831 "0x400000"
D G "T6_SYNC_PRESCALER_WITH_CLK" 1 832 "0x800000"
D G "T6_RESET_FROM_T6IN" 1 835 "0"
D G "T6_RESET_FROM_TMR4" 1 836 "0x02000000"
D G "T6_RESET_FROM_TMR6" 1 837 "0x03000000"
D G "T6_RESET_FROM_CCP1" 1 838 "0x04000000"
D G "T6_RESET_FROM_CCP2" 1 839 "0x05000000"
D G "T6_RESET_FROM_CCP3" 1 840 "0x06000000"
D G "T6_RESET_FROM_PWM1S1P1" 1 841 "0x07000000"
D G "T6_RESET_FROM_PWM1S1P2" 1 842 "0x08000000"
D G "T6_RESET_FROM_PWM2S1P1" 1 843 "0x09000000"
D G "T6_RESET_FROM_PWM2S1P2" 1 844 "0x0A000000"
D G "T6_RESET_FROM_PWM3S1P1" 1 845 "0x0B000000"
D G "T6_RESET_FROM_PWM3S1P2" 1 846 "0x0C000000"
D G "T6_RESET_FROM_C1OUT" 1 847 "0x0F000000"
D G "T6_RESET_FROM_C2OUT" 1 848 "0x10000000"
D G "T6_RESET_FROM_ZCD" 1 849 "0x11000000"
D G "T6_RESET_FROM_CLC1" 1 850 "0x12000000"
D G "T6_RESET_FROM_CLC2" 1 851 "0x13000000"
D G "T6_RESET_FROM_CLC3" 1 852 "0x14000000"
D G "T6_RESET_FROM_CLC4" 1 853 "0x15000000"
D G "T6_RESET_FROM_CLC5" 1 854 "0x16000000"
D G "T6_RESET_FROM_CLC6" 1 855 "0x17000000"
D G "T6_RESET_FROM_CLC7" 1 856 "0x18000000"
D G "T6_RESET_FROM_CLC8" 1 857 "0x19000000"
D G "T6_RESET_FROM_U1RX" 1 858 "0x1A000000"
D G "T6_RESET_FROM_U1TX" 1 859 "0x1B000000"
D G "T6_RESET_FROM_U2RX" 1 860 "0x1C000000"
D G "T6_RESET_FROM_U2TX" 1 861 "0x1D000000"
D G "T6_RESET_FROM_U3RX" 1 862 "0x1E000000"
D G "T6_RESET_FROM_U3TX" 1 863 "0x1F000000"
D G "T6_RESET_FROM_U4RX" 1 864 "0x20000000"
D G "T6_RESET_FROM_U4TX" 1 865 "0x21000000"
D G "T6_RESET_FROM_U5RX" 1 866 "0x22000000"
D G "T6_RESET_FROM_U5TX" 1 867 "0x23000000"
c L "set_timer6" 1 1 4 "FUNCTION"
F N "setup_ccp1" 1 873 ""
V L "mode" 1 873 "int32" `215 
F B "setup_ccp1" 1 873 "void(int32 mode)" `214 
F N "setup_ccp1" 1 874 ""
V L "mode" 1 874 "int32" `217 
V L "pwm" 1 874 "int8" `218 
F B "setup_ccp1" 1 874 "void(int32 mode,int8 pwm)" `216 
F N "set_pwm1_duty" 1 875 ""
V L "value" 1 875 "int8" `220 
F B "set_pwm1_duty" 1 875 "void(int8 value)" `219 
F N "set_pwm1_duty" 1 876 ""
V L "value" 1 876 "int16" `222 
F B "set_pwm1_duty" 1 876 "void(int16 value)" `221  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 1 878 "0"
D G "CCP_CAPTURE_EE" 1 879 "0x03"
D G "CCP_CAPTURE_FE" 1 880 "0x04"
D G "CCP_CAPTURE_RE" 1 881 "0x05"
D G "CCP_CAPTURE_DIV_4" 1 882 "0x06"
D G "CCP_CAPTURE_DIV_16" 1 883 "0x07"
D G "CCP_COMPARE_TOGGLE_RESET_TIMER" 1 884 "0x01"
D G "CCP_COMPARE_TOGGLE" 1 885 "0x02"
D G "CCP_COMPARE_SET_ON_MATCH" 1 886 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 1 887 "0x09"
D G "CCP_COMPARE_PULSE" 1 888 "0x0A"
D G "CCP_COMPARE_PULSE_RESET_TIMER" 1 889 "0x0B"
D G "CCP_PWM" 1 890 "0x0C"
D G "CCP_CAPTURE_INPUT_CCP_PIN" 1 892 "0"
D G "CCP_CAPTURE_INPUT_C1OUT" 1 893 "0x010000"
D G "CCP_CAPTURE_INPUT_C2OUT" 1 894 "0x020000"
D G "CCP_CAPTURE_INPUT_IOC_INTERRUPT" 1 895 "0x030000"
D G "CCP_CAPTURE_INPUT_CLC1" 1 896 "0x080000"
D G "CCP_CAPTURE_INPUT_CLC2" 1 897 "0x090000"
D G "CCP_CAPTURE_INPUT_CLC3" 1 898 "0x0A0000"
D G "CCP_CAPTURE_INPUT_CLC4" 1 899 "0x0B0000"
D G "CCP_CAPTURE_INPUT_CLC5" 1 900 "0x0C0000"
D G "CCP_CAPTURE_INPUT_CLC6" 1 901 "0x0D0000"
D G "CCP_CAPTURE_INPUT_CLC7" 1 902 "0x0E0000"
D G "CCP_CAPTURE_INPUT_CLC8" 1 903 "0x0F0000"
D G "CCP_PWM_LEFT_JUSTIFIED_DUTY" 1 905 "0x10"
D G "CCP_USE_TIMER1_AND_TIMER2" 1 914 "0x0000"
D G "CCP_USE_TIMER3_AND_TIMER4" 1 915 "0x0100"
D G "CCP_USE_TIMER5_AND_TIMER6" 1 916 "0x0200"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
F N "setup_ccp2" 1 919 ""
V L "mode" 1 919 "int32" `227 
F B "setup_ccp2" 1 919 "void(int32 mode)" `226 
F N "setup_ccp2" 1 920 ""
V L "mode" 1 920 "int32" `229 
V L "pwm" 1 920 "int8" `230 
F B "setup_ccp2" 1 920 "void(int32 mode,int8 pwm)" `228 
F N "set_pwm2_duty" 1 921 ""
V L "value" 1 921 "int8" `232 
F B "set_pwm2_duty" 1 921 "void(int8 value)" `231 
F N "set_pwm2_duty" 1 922 ""
V L "value" 1 922 "int16" `234 
F B "set_pwm2_duty" 1 922 "void(int16 value)" `233 
c L "set_pwm2_duty" 1 1 1 "FUNCTION"
F N "setup_ccp3" 1 928 ""
V L "mode" 1 928 "int32" `239 
F B "setup_ccp3" 1 928 "void(int32 mode)" `238 
F N "setup_ccp3" 1 929 ""
V L "mode" 1 929 "int32" `241 
V L "pwm" 1 929 "int8" `242 
F B "setup_ccp3" 1 929 "void(int32 mode,int8 pwm)" `240 
F N "set_pwm3_duty" 1 930 ""
V L "value" 1 930 "int8" `244 
F B "set_pwm3_duty" 1 930 "void(int8 value)" `243 
F N "set_pwm3_duty" 1 931 ""
V L "value" 1 931 "int16" `246 
F B "set_pwm3_duty" 1 931 "void(int16 value)" `245 
c L "set_pwm3_duty" 1 1 6 "FUNCTION"
F N "setup_pwm1" 1 942 ""
V L "mode" 1 942 "int32" `251 
F B "setup_pwm1" 1 942 "void(int32 mode)" `250 
F N "setup_pwm1" 1 943 ""
V L "mode" 1 943 "int32" `253 
V L "period" 1 943 "int16" `254 
F B "setup_pwm1" 1 943 "void(int32 mode,int16 period)" `252 
F N "setup_pwm1" 1 944 ""
V L "mode" 1 944 "int32" `256 
V L "period" 1 944 "int16" `257 
V L "postscale" 1 944 "int8" `258 
F B "setup_pwm1" 1 944 "void(int32 mode,int16 period,int8 postscale)" `255 
F N "setup_pwm2" 1 945 ""
V L "mode" 1 945 "int32" `260 
F B "setup_pwm2" 1 945 "void(int32 mode)" `259 
F N "setup_pwm2" 1 946 ""
V L "mode" 1 946 "int32" `262 
V L "period" 1 946 "int16" `263 
F B "setup_pwm2" 1 946 "void(int32 mode,int16 period)" `261 
F N "setup_pwm2" 1 947 ""
V L "mode" 1 947 "int32" `265 
V L "period" 1 947 "int16" `266 
V L "postscale" 1 947 "int8" `267 
F B "setup_pwm2" 1 947 "void(int32 mode,int16 period,int8 postscale)" `264 
F N "setup_pwm3" 1 948 ""
V L "mode" 1 948 "int32" `269 
F B "setup_pwm3" 1 948 "void(int32 mode)" `268 
F N "setup_pwm3" 1 949 ""
V L "mode" 1 949 "int32" `271 
V L "period" 1 949 "int16" `272 
F B "setup_pwm3" 1 949 "void(int32 mode,int16 period)" `270 
F N "setup_pwm3" 1 950 ""
V L "mode" 1 950 "int32" `274 
V L "period" 1 950 "int16" `275 
V L "postscale" 1 950 "int8" `276 
F B "setup_pwm3" 1 950 "void(int32 mode,int16 period,int8 postscale)" `273 
F N "setup_pwm1_slice" 1 951 ""
V L "slice" 1 951 "int8" `278 
V L "mode" 1 951 "int8" `279 
F B "setup_pwm1_slice" 1 951 "void(int8 slice,int8 mode)" `277 
F N "setup_pwm2_slice" 1 952 ""
V L "slice" 1 952 "int8" `281 
V L "mode" 1 952 "int8" `282 
F B "setup_pwm2_slice" 1 952 "void(int8 slice,int8 mode)" `280 
F N "setup_pwm3_slice" 1 953 ""
V L "slice" 1 953 "int8" `284 
V L "mode" 1 953 "int8" `285 
F B "setup_pwm3_slice" 1 953 "void(int8 slice,int8 mode)" `283 
F N "set_pwm1_period" 1 954 ""
V L "period" 1 954 "int16" `287 
F B "set_pwm1_period" 1 954 "void(int16 period)" `286 
F N "set_pwm1_period" 1 955 ""
V L "period" 1 955 "int16" `289 
V L "load" 1 955 "int8" `290 
F B "set_pwm1_period" 1 955 "void(int16 period,int8 load)" `288 
F N "set_pwm2_period" 1 956 ""
V L "period" 1 956 "int16" `292 
F B "set_pwm2_period" 1 956 "void(int16 period)" `291 
F N "set_pwm2_period" 1 957 ""
V L "period" 1 957 "int16" `294 
V L "load" 1 957 "int8" `295 
F B "set_pwm2_period" 1 957 "void(int16 period,int8 load)" `293 
F N "set_pwm3_period" 1 958 ""
V L "period" 1 958 "int16" `297 
F B "set_pwm3_period" 1 958 "void(int16 period)" `296 
F N "set_pwm3_period" 1 959 ""
V L "period" 1 959 "int16" `299 
V L "load" 1 959 "int8" `300 
F B "set_pwm3_period" 1 959 "void(int16 period,int8 load)" `298 
F N "set_pwm1_duty" 1 960 ""
V L "slice" 1 960 "int8" `302 
V L "p1" 1 960 "int16" `303 
V L "p2" 1 960 "int16" `304 
F B "set_pwm1_duty" 1 960 "void(int8 slice,int16 p1,int16 p2)" `301 
F N "set_pwm1_duty" 1 961 ""
V L "slice" 1 961 "int8" `306 
V L "p1" 1 961 "int16" `307 
V L "p2" 1 961 "int16" `308 
V L "load" 1 961 "int8" `309 
F B "set_pwm1_duty" 1 961 "void(int8 slice,int16 p1,int16 p2,int8 load)" `305 
F N "set_pwm2_duty" 1 962 ""
V L "slice" 1 962 "int8" `311 
V L "p1" 1 962 "int16" `312 
V L "p2" 1 962 "int16" `313 
F B "set_pwm2_duty" 1 962 "void(int8 slice,int16 p1,int16 p2)" `310 
F N "set_pwm2_duty" 1 963 ""
V L "slice" 1 963 "int8" `315 
V L "p1" 1 963 "int16" `316 
V L "p2" 1 963 "int16" `317 
V L "load" 1 963 "int8" `318 
F B "set_pwm2_duty" 1 963 "void(int8 slice,int16 p1,int16 p2,int8 load)" `314 
F N "set_pwm3_duty" 1 964 ""
V L "slice" 1 964 "int8" `320 
V L "p1" 1 964 "int16" `321 
V L "p2" 1 964 "int16" `322 
F B "set_pwm3_duty" 1 964 "void(int8 slice,int16 p1,int16 p2)" `319 
F N "set_pwm3_duty" 1 965 ""
V L "slice" 1 965 "int8" `324 
V L "p1" 1 965 "int16" `325 
V L "p2" 1 965 "int16" `326 
V L "load" 1 965 "int8" `327 
F B "set_pwm3_duty" 1 965 "void(int8 slice,int16 p1,int16 p2,int8 load)" `323 
F N "enable_pwm1_interrupt" 1 966 ""
V L "interrupt" 1 966 "int8" `329 
F B "enable_pwm1_interrupt" 1 966 "void(int8 interrupt)" `328 
F N "enable_pwm2_interrupt" 1 967 ""
V L "interrupt" 1 967 "int8" `331 
F B "enable_pwm2_interrupt" 1 967 "void(int8 interrupt)" `330 
F N "enable_pwm3_interrupt" 1 968 ""
V L "interrupt" 1 968 "int8" `333 
F B "enable_pwm3_interrupt" 1 968 "void(int8 interrupt)" `332 
F N "disable_pwm1_interrupt" 1 969 ""
V L "interrupt" 1 969 "int8" `335 
F B "disable_pwm1_interrupt" 1 969 "void(int8 interrupt)" `334 
F N "disable_pwm2_interrupt" 1 970 ""
V L "interrupt" 1 970 "int8" `337 
F B "disable_pwm2_interrupt" 1 970 "void(int8 interrupt)" `336 
F N "disable_pwm3_interrupt" 1 971 ""
V L "interrupt" 1 971 "int8" `339 
F B "disable_pwm3_interrupt" 1 971 "void(int8 interrupt)" `338 
F N "clear_pwm1_interrupt" 1 972 ""
V L "interrupt" 1 972 "int8" `341 
F B "clear_pwm1_interrupt" 1 972 "void(int8 interrupt)" `340 
F N "clear_pwm2_interrupt" 1 973 ""
V L "interrupt" 1 973 "int8" `343 
F B "clear_pwm2_interrupt" 1 973 "void(int8 interrupt)" `342 
F N "clear_pwm3_interrupt" 1 974 ""
V L "interrupt" 1 974 "int8" `345 
F B "clear_pwm3_interrupt" 1 974 "void(int8 interrupt)" `344 
F N "pwm1_interrupt_active" 1 975 ""
V L "interrupt" 1 975 "int8" `347 
F B "pwm1_interrupt_active" 1 975 "int8(int8 interrupt)" `346 
F N "pwm2_interrupt_active" 1 976 ""
V L "interrupt" 1 976 "int8" `349 
F B "pwm2_interrupt_active" 1 976 "int8(int8 interrupt)" `348 
F N "pwm3_interrupt_active" 1 977 ""
V L "interrupt" 1 977 "int8" `351 
F B "pwm3_interrupt_active" 1 977 "int8(int8 interrupt)" `350  "Constants used for SETUP_PWMx() first parameter are:"
D G "PWM_DISABLE" 1 981 "0"
D G "PWM_ENABLE" 1 982 "1"
D G "PWM_ENABLED" 1 986 "0x80"
D G "PWM_DISABLED" 1 987 "0"
D G "PWM_CLK_PWMIN0" 1 989 "0"
D G "PWM_CLK_PWMIN1" 1 990 "0x0100"
D G "PWM_CLK_FOSC" 1 991 "0x0200"
D G "PWM_CLK_HFINTOSC" 1 992 "0x0300"
D G "PWM_CLK_LFINTOSC" 1 993 "0x0400"
D G "PWM_CLK_MFINTOSC" 1 994 "0x0500"
D G "PWM_CLK_MFINTOSC_32KHZ" 1 995 "0x0600"
D G "PWM_CLK_SOSC" 1 996 "0x0700"
D G "PWM_CLK_EXTOSC" 1 997 "0x0800"
D G "PWM_CLK_CLKR" 1 998 "0x0900"
D G "PWM_CLK_NCO1" 1 999 "0x0A00"
D G "PWM_CLK_NCO2" 1 1000 "0x0B00"
D G "PWM_CLK_NCO3" 1 1001 "0x0C00"
D G "PWM_CLK_CLC1" 1 1002 "0x0D00"
D G "PWM_CLK_CLC2" 1 1003 "0x0E00"
D G "PWM_CLK_CLC3" 1 1004 "0x0F00"
D G "PWM_CLK_CLC4" 1 1005 "0x1000"
D G "PWM_CLK_CLC5" 1 1006 "0x1100"
D G "PWM_CLK_CLC6" 1 1007 "0x1200"
D G "PWM_CLK_CLC7" 1 1008 "0x1300"
D G "PWM_CLK_CLC8" 1 1009 "0x1400"
D G "PWM_AUTO_LOAD_TRIGGER_NONE" 1 1011 "0"
D G "PWM_AUTO_LOAD_TRIGGER_PWMIN0" 1 1012 "0x002000"
D G "PWM_AUTO_LOAD_TRIGGER_PWMIN1" 1 1013 "0x004000"
D G "PWM_AUTO_LOAD_TRIGGER_CLC1" 1 1014 "0x006000"
D G "PWM_AUTO_LOAD_TRIGGER_CLC2" 1 1015 "0x008000"
D G "PWM_AUTO_LOAD_TRIGGER_CLC3" 1 1016 "0x00A000"
D G "PWM_AUTO_LOAD_TRIGGER_CLC4" 1 1017 "0x00C000"
D G "PWM_AUTO_LOAD_TRIGGER_CLC5" 1 1018 "0x00E000"
D G "PWM_AUTO_LOAD_TRIGGER_CLC6" 1 1019 "0x010000"
D G "PWM_AUTO_LOAD_TRIGGER_CLC7" 1 1020 "0x012000"
D G "PWM_AUTO_LOAD_TRIGGER_CLC8" 1 1021 "0x014000"
D G "PWM_AUTO_LOAD_TRIGGER_DMA1DCNT" 1 1022 "0x016000"
D G "PWM_AUTO_LOAD_TRIGGER_DMA2DCNT" 1 1023 "0x018000"
D G "PWM_AUTO_LOAD_TRIGGER_DMA3DCNT" 1 1024 "0x00A000"
D G "PWM_AUTO_LOAD_TRIGGER_DMA4DCNT" 1 1025 "0x01C000"
D G "PWM_AUTO_LOAD_TRIGGER_DMA5DCNT" 1 1026 "0x01E000"
D G "PWM_AUTO_LOAD_TRIGGER_DMA6DCNT" 1 1027 "0x020000"
D G "PWM_EXT_RESET_SRC_NONE" 1 1029 "0"
D G "PWM_EXT_RESET_SRC_PWMxERS" 1 1030 "0x040000" "PWM1ERS for PWM1, PWM2ERS for PWM2, PWM3ERS for PWM3"
D G "PWM_EXT_RESET_SRC_PWM1S1P1" 1 1031 "0x080000" "PWM2 and PWM3 only"
D G "PWM_EXT_RESET_SRC_PWM1S1P2" 1 1032 "0x0C0000" "PWM2 and PWM3 only"
D G "PWM_EXT_RESET_SRC_PWM2S1P1" 1 1033 "0x100000" "PWM1 and PWM3 only"
D G "PWM_EXT_RESET_SRC_PWM2S1P2" 1 1034 "0x140000" "PWM1 and PWM3 only"
D G "PWM_EXT_RESET_SRC_PWM3S1P1" 1 1035 "0x180000" "PWM1 and PWM2 only"
D G "PWM_EXT_RESET_SRC_PWM3S1P2" 1 1036 "0x1C0000" "PWM1 and PWM2 only"
D G "PWM_EXT_RESET_SRC_CLC1" 1 1037 "0x280000"
D G "PWM_EXT_RESET_SRC_CLC2" 1 1038 "0x2C0000"
D G "PWM_EXT_RESET_SRC_CLC3" 1 1039 "0x300000"
D G "PWM_EXT_RESET_SRC_CLC4" 1 1040 "0x340000"
D G "PWM_EXT_RESET_SRC_CLC5" 1 1041 "0x380000"
D G "PWM_EXT_RESET_SRC_CLC6" 1 1042 "0x3C0000"
D G "PWM_EXT_RESET_SRC_CLC7" 1 1043 "0x400000"
D G "PWM_EXT_RESET_SRC_CLC8" 1 1044 "0x440000"
D G "PWM_CLK_DIV_BY_1" 1 1051 "0"
D G "PWM_CLK_DIV_BY_2" 1 1052 "0x01000000"
D G "PWM_CLK_DIV_BY_4" 1 1053 "0x03000000"
D G "PWM_CLK_DIV_BY_8" 1 1054 "0x07000000"
D G "PWM_CLK_DIV_BY_16" 1 1055 "0x0F000000"
D G "PWM_CLK_DIV_BY_32" 1 1056 "0x1F000000"
D G "PWM_CLK_DIV_BY_64" 1 1057 "0x3F000000"
D G "PWM_CLK_DIV_BY_128" 1 1058 "0x7F000000"
D G "PWM_CLK_DIV_BY_256" 1 1059 "0xFF000000"
D G "PWM_EXT_RESET_ACTIVE_HIGH" 1 1061 "0"
D G "PWM_EXT_RESET_ACTIVE_LOW" 1 1062 "0x02"
D G "PWM_STANDARD" 1 1065 "0" "Left Aligned mode"
D G "PWM_RIGHT_ALIGNED" 1 1066 "0x01"
D G "PWM_CENTER_ALIGNED" 1 1067 "0x02"
D G "PWM_VARIABLE_ALIGNED" 1 1068 "0x03"
D G "PWM_COMPARE_SET" 1 1069 "0x04"
D G "PWM_COMPARE_TOGGLE" 1 1070 "0x05"
D G "PWM_PUSH_PULL" 1 1071 "0x08"
D G "PWM_PUSH_PULL_RIGHT_ALIGNED" 1 1072 "0x09"
D G "PWM_SLICE_P1_OUTPUT_ACTIVE_HIGH" 1 1074 "0"
D G "PWM_SLICE_P1_OUTPUT_ACTIVE_LOW" 1 1075 "0x40"
D G "PWM_SLICE_P2_OUTPUT_ACTIVE_HIGH" 1 1077 "0"
D G "PWM_SLICE_P2_OUTPUT_ACTIVE_LOW" 1 1078 "0x80"
D G "PWM_S1P1_INTERRUPT" 1 1081 "0x01"
D G "PWM_S1P2_INTERRUPT" 1 1082 "0x02"
c L "pwm3_interrupt_active" 1 1 6 "FUNCTION"
F N "setup_spi" 1 1099 ""
V L "mode" 1 1099 "int32" `361 
F B "setup_spi" 1 1099 "void(int32 mode)" `360 
F N "setup_spi" 1 1100 ""
V L "mode" 1 1100 "int32" `363 
V L "baud" 1 1100 "int32" `364 
F B "setup_spi" 1 1100 "void(int32 mode,int32 baud)" `362 
F N "setup_spi" 1 1101 ""
V L "mode" 1 1101 "int32" `366 
V L "baud" 1 1101 "int32" `367 
V L "clock" 1 1101 "int32" `368 
F B "setup_spi" 1 1101 "void(int32 mode,int32 baud,int32 clock)" `365 
F N "spi_write" 1 1102 ""
V L "value" 1 1102 "int8" `370 
F B "spi_write" 1 1102 "void(int8 value)" `369 
F N "spi_write" 1 1103 ""
V L "wait" 1 1103 "int8" `372 
V L "value" 1 1103 "int8" `373 
F B "spi_write" 1 1103 "void(int8 wait,int8 value)" `371 
F N "spi_read" 1 1104 ""
F B "spi_read" 1 1104 "int8()" `374 
F N "spi_read" 1 1105 ""
V L "value" 1 1105 "int8" `376 
F B "spi_read" 1 1105 "int8(int8 value)" `375 
F N "spi_data_is_in" 1 1106 ""
F B "spi_data_is_in" 1 1106 "int8()" `377 
F N "spi_set_txcnt" 1 1107 ""
V L "count" 1 1107 "int16" `379 
F B "spi_set_txcnt" 1 1107 "void(int16 count)" `378 
F N "spi_enable_interrupts" 1 1108 ""
V L "interrupts" 1 1108 "int8" `381 
F B "spi_enable_interrupts" 1 1108 "void(int8 interrupts)" `380 
F N "spi_disable_interrupts" 1 1109 ""
V L "interrupts" 1 1109 "int8" `383 
F B "spi_disable_interrupts" 1 1109 "void(int8 interrupts)" `382 
F N "spi_clear_interrupts" 1 1110 ""
V L "interrupts" 1 1110 "int8" `385 
F B "spi_clear_interrupts" 1 1110 "void(int8 interrupts)" `384 
F N "spi_interrupt_enabled" 1 1111 ""
V L "interrupt" 1 1111 "int8" `387 
F B "spi_interrupt_enabled" 1 1111 "int8(int8 interrupt)" `386 
F N "spi_interrupt_active" 1 1112 ""
V L "interrupt" 1 1112 "int8" `389 
F B "spi_interrupt_active" 1 1112 "int8(int8 interrupt)" `388 
F N "spi_interrupt_active" 1 1113 ""
F B "spi_interrupt_active" 1 1113 "int8()" `390 
F N "setup_spi2" 1 1114 ""
V L "mode" 1 1114 "int32" `392 
F B "setup_spi2" 1 1114 "void(int32 mode)" `391 
F N "setup_spi2" 1 1115 ""
V L "mode" 1 1115 "int32" `394 
V L "baud" 1 1115 "int32" `395 
F B "setup_spi2" 1 1115 "void(int32 mode,int32 baud)" `393 
F N "setup_spi2" 1 1116 ""
V L "mode" 1 1116 "int32" `397 
V L "baud" 1 1116 "int32" `398 
V L "clock" 1 1116 "int32" `399 
F B "setup_spi2" 1 1116 "void(int32 mode,int32 baud,int32 clock)" `396 
F N "spi_write2" 1 1117 ""
V L "value" 1 1117 "int8" `401 
F B "spi_write2" 1 1117 "void(int8 value)" `400 
F N "spi_read2" 1 1118 ""
F B "spi_read2" 1 1118 "int8()" `402 
F N "spi_read2" 1 1119 ""
V L "value" 1 1119 "int8" `404 
F B "spi_read2" 1 1119 "int8(int8 value)" `403 
F N "spi_data_is_in2" 1 1120 ""
F B "spi_data_is_in2" 1 1120 "int8()" `405 
F N "spi_set_txcnt2" 1 1121 ""
V L "count" 1 1121 "int16" `407 
F B "spi_set_txcnt2" 1 1121 "void(int16 count)" `406 
F N "spi_enable_interrupts2" 1 1122 ""
V L "interrupts" 1 1122 "int8" `409 
F B "spi_enable_interrupts2" 1 1122 "void(int8 interrupts)" `408 
F N "spi_disable_interrupts2" 1 1123 ""
V L "interrupts" 1 1123 "int8" `411 
F B "spi_disable_interrupts2" 1 1123 "void(int8 interrupts)" `410 
F N "spi_clear_interrupts2" 1 1124 ""
V L "interrupts" 1 1124 "int8" `413 
F B "spi_clear_interrupts2" 1 1124 "void(int8 interrupts)" `412 
F N "spi_interrupt_enabled2" 1 1125 ""
V L "interrupt" 1 1125 "int8" `415 
F B "spi_interrupt_enabled2" 1 1125 "int8(int8 interrupt)" `414 
F N "spi_interrupt_active2" 1 1126 ""
V L "interrupt" 1 1126 "int8" `417 
F B "spi_interrupt_active2" 1 1126 "int8(int8 interrupt)" `416 
F N "spi_interrupt_active2" 1 1127 ""
F B "spi_interrupt_active2" 1 1127 "int8()" `418  "Constants used for first param to SETUP_SPI() are:"
D G "SPI_DISABLED" 1 1130 "0"
D G "SPI_MASTER" 1 1131 "0x83"
D G "SPI_SLAVE" 1 1132 "0x81"
D G "SPI_SCK_IDLE_LOW" 1 1134 "0"
D G "SPI_SCK_IDLE_HIGH" 1 1135 "0x2000"
D G "SPI_CLK_FOSC" 1 1137 "0"
D G "SPI_CLK_HFINTRC" 1 1138 "0x010000"
D G "SPI_CLK_MFINTRC" 1 1139 "0x020000"
D G "SPI_CLK_EXTOSC" 1 1140 "0x030000"
D G "SPI_CLK_CLKR" 1 1141 "0x040000"
D G "SPI_CLK_TIMER0" 1 1142 "0x050000"
D G "SPI_CLK_TIMER2" 1 1143 "0x060000"
D G "SPI_CLK_TIMER4" 1 1144 "0x070000"
D G "SPI_CLK_TIMER6" 1 1145 "0x080000"
D G "SPI_CLK_SMT1" 1 1146 "0x0E0000"
D G "SPI_CLK_CLC1" 1 1147 "0x0F0000"
D G "SPI_CLK_CLC2" 1 1148 "0x100000"
D G "SPI_CLK_CLC3" 1 1149 "0x110000"
D G "SPI_CLK_CLC4" 1 1150 "0x120000"
D G "SPI_CLK_CLC5" 1 1151 "0x130000"
D G "SPI_CLK_CLC6" 1 1152 "0x140000"
D G "SPI_CLK_CLC7" 1 1153 "0x150000"
D G "SPI_CLK_CLC8" 1 1154 "0x160000"
D G "SPI_DWIDTH_8" 1 1156 "0"
D G "SPI_DWIDTH_7" 1 1157 "0xE00000"
D G "SPI_DWIDTH_6" 1 1158 "0xC00000"
D G "SPI_DWIDTH_5" 1 1159 "0xA00000"
D G "SPI_DWIDTH_4" 1 1160 "0x800000"
D G "SPI_DWIDTH_3" 1 1161 "0x600000"
D G "SPI_DWIDTH_2" 1 1162 "0x400000"
D G "SPI_DWIDTH_1" 1 1163 "0x200000"
D G "SPI_RX_AND_TX_MODE" 1 1165 "0"
D G "SPI_RX_ONLY_MODE" 1 1166 "0x2000000"
D G "SPI_TX_ONLY_MODE" 1 1167 "0x1000000"
D G "SPI_LSB_FIRST" 1 1169 "0x0004"
D G "SPI_SDO_ACTIVE_LOW" 1 1170 "0x0100"
D G "SPI_SDI_ACTIVE_LOW" 1 1171 "0x0200"
D G "SPI_SS_ACTIVE_HIGH" 1 1172 "0x0040"
D G "SPI_XMIT_L_TO_H" 1 1175 "0x4000"
D G "SPI_XMIT_H_TO_L" 1 1176 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 1 1179 "0x0000"
D G "SPI_SAMPLE_AT_END" 1 1180 "0x8000"
D G "SPI_L_TO_H" 1 1183 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 1 1184 "SPI_SCK_IDLE_HIGH"
D G "SPI_INT_TX_UNDERFLOW" 1 1191 "0x02"
D G "SPI_INT_RX_OVERFLOW" 1 1192 "0x04"
D G "SPI_INT_END_OF_SS" 1 1193 "0x10"
D G "SPI_INT_START_OF_SS" 1 1194 "0x20"
D G "SPI_INT_TX_CNT_IS_ZERO" 1 1195 "0x40"
D G "SPI_INT_SHIFT_REG_EMPTY" 1 1196 "0x80"
c L "spi_interrupt_active2" 1 1 2 "FUNCTION"
F N "setup_uart" 1 1200 ""
V L "baud" 1 1200 "int32" `420 
F B "setup_uart" 1 1200 "void(int32 baud)" `419 
F N "setup_uart" 1 1201 ""
V L "baud" 1 1201 "int32" `422 
V L "stream" 1 1201 "int8" `423 
F B "setup_uart" 1 1201 "void(int32 baud,int8 stream)" `421 
F N "setup_uart" 1 1202 ""
V L "baud" 1 1202 "int32" `425 
V L "stream" 1 1202 "int8" `426 
V L "clock" 1 1202 "int32" `427 
F B "setup_uart" 1 1202 "void(int32 baud,int8 stream,int32 clock)" `424 
F N "set_uart_speed" 1 1203 ""
V L "baud" 1 1203 "int32" `429 
F B "set_uart_speed" 1 1203 "void(int32 baud)" `428 
F N "set_uart_speed" 1 1204 ""
V L "baud" 1 1204 "int32" `431 
V L "stream" 1 1204 "int8" `432 
F B "set_uart_speed" 1 1204 "void(int32 baud,int8 stream)" `430 
F N "set_uart_speed" 1 1205 ""
V L "baud" 1 1205 "int32" `434 
V L "stream" 1 1205 "int8" `435 
V L "clock" 1 1205 "int32" `436 
F B "set_uart_speed" 1 1205 "void(int32 baud,int8 stream,int32 clock)" `433  "Constants used in setup_uart() are:"
D G "UART_AUTODETECT" 1 1209 "8"
D G "UART_AUTODETECT_NOWAIT" 1 1210 "9"
D G "UART_WAKEUP_ON_RDA" 1 1211 "10"
D G "UART_SEND_BREAK" 1 1212 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
F N "setup_comparator" 1 1217 ""
V L "mode" 1 1217 "int32" `438 
F B "setup_comparator" 1 1217 "void(int32 mode)" `437  "Constants used in setup_comparator() are:"
D G "NC_NC_NC_NC" 1 1220 "0x003F003F"
D G "CP1_A0_A2" 1 1223 "0x8000"
D G "CP1_A1_A2" 1 1224 "0x8001"
D G "CP1_B3_A2" 1 1225 "0x8002"
D G "CP1_B1_A2" 1 1226 "0x8003"
D G "CP1_FVR_A2" 1 1227 "0x8006"
D G "CP1_VSS_A2" 1 1228 "0x8007"
D G "CP1_A0_A3" 1 1229 "0x8008"
D G "CP1_A1_A3" 1 1230 "0x8009"
D G "CP1_B3_A3" 1 1231 "0x800A"
D G "CP1_B1_A3" 1 1232 "0x800B"
D G "CP1_FVR_A3" 1 1233 "0x800E"
D G "CP1_VSS_A3" 1 1234 "0x800F"
D G "CP1_A0_DAC" 1 1235 "0x8028"
D G "CP1_A1_DAC" 1 1236 "0x8029"
D G "CP1_B3_DAC" 1 1237 "0x802A"
D G "CP1_B1_DAC" 1 1238 "0x802B"
D G "CP1_FVR_DAC" 1 1239 "0x802E"
D G "CP1_VSS_DAC" 1 1240 "0x802F"
D G "CP1_A0_FVR" 1 1241 "0x8030"
D G "CP1_A1_FVR" 1 1242 "0x8031"
D G "CP1_B3_FVR" 1 1243 "0x8032"
D G "CP1_B1_FVR" 1 1244 "0x8033"
D G "CP1_FVR_FVR" 1 1245 "0x8036"
D G "CP1_VSS_FVR" 1 1246 "0x8037"
D G "CP1_A0_VSS" 1 1247 "0x8038"
D G "CP1_A1_VSS" 1 1248 "0x8039"
D G "CP1_B3_VSS" 1 1249 "0x803A"
D G "CP1_B1_VSS" 1 1250 "0x803B"
D G "CP1_FVR_VSS" 1 1251 "0x803E"
D G "CP1_VSS_VSS" 1 1252 "0x803F"
D G "CP1_INT_L2H" 1 1254 "0x0080"
D G "CP1_INT_H2L" 1 1255 "0x0040"
D G "CP1_INVERT" 1 1256 "0x1000"
D G "CP1_HYST" 1 1257 "0x0200"
D G "CP1_SYNC" 1 1258 "0x0100"
D G "CP2_A0_A2" 1 1261 "0x80000000"
D G "CP2_A1_A2" 1 1262 "0x80010000"
D G "CP2_B3_A2" 1 1263 "0x80020000"
D G "CP2_B1_A2" 1 1264 "0x80030000"
D G "CP2_FVR_A2" 1 1265 "0x80060000"
D G "CP2_VSS_A2" 1 1266 "0x80070000"
D G "CP2_A0_B0" 1 1267 "0x80080000"
D G "CP2_A1_B0" 1 1268 "0x80090000"
D G "CP2_B3_B0" 1 1269 "0x800A0000"
D G "CP2_B1_B0" 1 1270 "0x800B0000"
D G "CP2_FVR_B0" 1 1271 "0x800E0000"
D G "CP2_VSS_B0" 1 1272 "0x800F0000"
D G "CP2_A0_DAC" 1 1273 "0x80280000"
D G "CP2_A1_DAC" 1 1274 "0x80290000"
D G "CP2_B3_DAC" 1 1275 "0x802A0000"
D G "CP2_B1_DAC" 1 1276 "0x802B0000"
D G "CP2_FVR_DAC" 1 1277 "0x802E0000"
D G "CP2_VSS_DAC" 1 1278 "0x802F0000"
D G "CP2_A0_FVR" 1 1279 "0x80300000"
D G "CP2_A1_FVR" 1 1280 "0x80310000"
D G "CP2_B3_FVR" 1 1281 "0x80320000"
D G "CP2_B1_FVR" 1 1282 "0x80330000"
D G "CP2_FVR_FVR" 1 1283 "0x80360000"
D G "CP2_VSS_FVR" 1 1284 "0x80370000"
D G "CP2_A0_VSS" 1 1285 "0x80380000"
D G "CP2_A1_VSS" 1 1286 "0x80390000"
D G "CP2_B3_VSS" 1 1287 "0x803A0000"
D G "CP2_B1_VSS" 1 1288 "0x803B0000"
D G "CP2_FVR_VSS" 1 1289 "0x803E0000"
D G "CP2_VSS_VSS" 1 1290 "0x803F0000"
D G "CP2_INT_L2H" 1 1292 "0x00800000"
D G "CP2_INT_H2L" 1 1293 "0x00400000"
D G "CP2_INVERT" 1 1294 "0x10000000"
D G "CP2_HYST" 1 1295 "0x02000000"
D G "CP2_SYNC" 1 1296 "0x01000000"
c L "setup_comparator" 1 1 2 "FUNCTION"
F N "setup_vref" 1 1303 ""
V L "mode" 1 1303 "int8" `442 
F B "setup_vref" 1 1303 "void(int8 mode)" `441  "Constants used in setup_vref() are:"
D G "VREF_OFF" 1 1305 "0"
D G "VREF_ON" 1 1306 "0x80"
D G "VREF_ADC_OFF" 1 1308 "0"
D G "VREF_ADC_1v024" 1 1309 "0x81"
D G "VREF_ADC_2v048" 1 1310 "0x82"
D G "VREF_ADC_4v096" 1 1311 "0x83"
D G "VREF_COMP_DAC_OFF" 1 1313 "0"
D G "VREF_COMP_DAC_1v024" 1 1314 "0x84"
D G "VREF_COMP_DAC_2v048" 1 1315 "0x88"
D G "VREF_COMP_DAC_4v096" 1 1316 "0x8C"
D G "TEMPERATURE_INDICATOR_DISABLED" 1 1318 "0"
D G "TEMPERATURE_INDICATOR_ENABLED" 1 1319 "0x20"
D G "TEMPERATURE_RANGE_LOW" 1 1320 "0"
D G "TEMPERATURE_RANGE_HIGH" 1 1321 "0x10"
c L "setup_vref" 1 1 2 "FUNCTION"
F N "setup_low_volt_detect" 1 1325 ""
V L "mode" 1 1325 "int8" `444 
F B "setup_low_volt_detect" 1 1325 "void(int8 mode)" `443  "Constants used in setup_low_volt_detect() are:"
D G "LVD_46" 1 1327 "0x8E"
D G "LVD_43" 1 1328 "0x8D"
D G "LVD_41" 1 1329 "0x8C"
D G "LVD_39" 1 1330 "0x8B"
D G "LVD_37" 1 1331 "0x8A"
D G "LVD_36" 1 1332 "0x89"
D G "LVD_34" 1 1333 "0x88"
D G "LVD_30" 1 1334 "0x87"
D G "LVD_28" 1 1335 "0x86"
D G "LVD_27" 1 1336 "0x85"
D G "LVD_25" 1 1337 "0x84"
D G "LVD_24" 1 1338 "0x83"
D G "LVD_22" 1 1339 "0x82"
D G "LVD_20" 1 1340 "0x81"
D G "LVD_18" 1 1341 "0x80"
D G "LVD_INT_WHEN_BELOW" 1 1343 "0x10"
D G "LVD_INT_WHEN_ABOVE" 1 1344 "0x20"
c L "setup_low_volt_detect" 1 1 3 "FUNCTION"
F N "setup_dac" 1 1352 ""
V L "mode" 1 1352 "int8" `448 
F B "setup_dac" 1 1352 "void(int8 mode)" `447 
F N "dac_write" 1 1353 ""
V L "value" 1 1353 "int8" `450 
F B "dac_write" 1 1353 "void(int8 value)" `449  "Constants used in SETUP_DAC() are:"
D G "DAC_OFF" 1 1355 "0"
D G "DAC_VSS_VDD" 1 1356 "0x80"
D G "DAC_VREF_VDD" 1 1357 "0x81"
D G "DAC_VSS_VREF" 1 1358 "0x84"
D G "DAC_VREF_VREF" 1 1359 "0x85"
D G "DAC_VSS_FVR" 1 1360 "0x88"
D G "DAC_VREF_FVR" 1 1361 "0x89"
D G "DAC_OUTPUT_NONE" 1 1363 "0"
D G "DAC_OUTPUT_B7" 1 1364 "0x10"
D G "DAC_OUTPUT_A2" 1 1365 "0x20" "Only DAC1 can output to pin"
c L "dac_write" 1 1 3 "FUNCTION"
F N "setup_cwg" 1 1370 ""
V L "mode" 1 1370 "int32" `452 
V L "shutdown" 1 1370 "int16" `453 
V L "dt_rising" 1 1370 "int8" `454 
V L "dt_falling" 1 1370 "int8" `455 
F B "setup_cwg" 1 1370 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `451 
F N "setup_cwg2" 1 1371 ""
V L "mode" 1 1371 "int32" `457 
V L "shutdown" 1 1371 "int16" `458 
V L "dt_rising" 1 1371 "int8" `459 
V L "dt_falling" 1 1371 "int8" `460 
F B "setup_cwg2" 1 1371 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `456 
F N "setup_cwg3" 1 1372 ""
V L "mdoe" 1 1372 "int32" `462 
V L "shutdown" 1 1372 "int16" `463 
V L "dt_rising" 1 1372 "int8" `464 
V L "dt_falling" 1 1372 "int8" `465 
F B "setup_cwg3" 1 1372 "void(int32 mdoe,int16 shutdown,int8 dt_rising,int8 dt_falling)" `461 
F N "cwg_restart" 1 1373 ""
F B "cwg_restart" 1 1373 "void()" `466 
F N "cwg2_restart" 1 1374 ""
F B "cwg2_restart" 1 1374 "void()" `467 
F N "cwg3_restart" 1 1375 ""
F B "cwg3_restart" 1 1375 "void()" `468 
F N "cwg_status" 1 1376 ""
F B "cwg_status" 1 1376 "int8()" `469 
F N "cwg2_status" 1 1377 ""
F B "cwg2_status" 1 1377 "void()" `470 
F N "cwg3_status" 1 1378 ""
F B "cwg3_status" 1 1378 "void()" `471  "Constants used in SETUP_CWG(), SETUP_CWG2() and SETUP_CWG3() first parameter are:"
D G "CWG_ENABLED" 1 1380 "0x80"
D G "CWG_DISABLED" 1 1381 "0x00"
D G "CWG_MODE_STEERING" 1 1383 "0x00"
D G "CWG_MODE_SYNCRONOUS_STEERING" 1 1384 "0x01"
D G "CWG_MODE_FULL_BRIDGE" 1 1385 "0x02"
D G "CWG_MODE_FULL_BRIDGE_REV" 1 1386 "0x03"
D G "CWG_MODE_HALF_BRIDGE" 1 1387 "0x04"
D G "CWG_MODE_PUSH_PULL" 1 1388 "0x05"
D G "CWG_CLOCK_HFINTOSC" 1 1390 "0x0100"
D G "CWG_CLOCK_FOSC" 1 1391 "0x0000"
D G "CWG_INPUT_CWGxIN" 1 1393 "0x0000"
D G "CWG_INPUT_CCP1" 1 1394 "0x0800"
D G "CWG_INPUT_CCP2" 1 1395 "0x1000"
D G "CWG_INPUT_CCP3" 1 1396 "0x1800"
D G "CWG_INPUT_PWM1S1P2" 1 1397 "0x2000"
D G "CWG_INPUT_PWM1S1P1" 1 1398 "0x2800"
D G "CWG_INPUT_PWM2S1P2" 1 1399 "0x3000"
D G "CWG_INPUT_PWM2S1P1" 1 1400 "0x3800"
D G "CWG_INPUT_PWM3S1P2" 1 1401 "0x4000"
D G "CWG_INPUT_PWM3S1P1" 1 1402 "0x4800"
D G "CWG_INPUT_NCO1" 1 1403 "0x6000"
D G "CWG_INPUT_NCO2" 1 1404 "0x6800"
D G "CWG_INPUT_NCO3" 1 1405 "0x7000"
D G "CWG_INPUT_COMP1" 1 1406 "0x7800"
D G "CWG_INPUT_COMP2" 1 1407 "0x8000"
D G "CWG_INPUT_DSM" 1 1408 "0x8800"
D G "CWG_INPUT_CLC1" 1 1409 "0x9000"
D G "CWG_INPUT_CLC2" 1 1410 "0x9800"
D G "CWG_INPUT_CLC3" 1 1411 "0xA000"
D G "CWG_INPUT_CLC4" 1 1412 "0xA800"
D G "CWG_INPUT_CLC5" 1 1413 "0xB000"
D G "CWG_INPUT_CLC6" 1 1414 "0xB800"
D G "CWG_INPUT_CLC7" 1 1415 "0xC000"
D G "CWG_INPUT_CLC8" 1 1416 "0xC800"
D G "CWG_A_INVERTED" 1 1418 "0x010000"
D G "CWG_B_INVERTED" 1 1419 "0x020000"
D G "CWG_C_INVERTED" 1 1420 "0x040000"
D G "CWG_D_INVERTED" 1 1421 "0x080000"
D G "CWG_A_FORCE_HIGH" 1 1423 "0x10000000" "Only available in Steering modes"
D G "CWG_A_FORCE_LOW" 1 1424 "0x00000000" "Only available in Steering modes"
D G "CWG_A_OUTPUT_PWM" 1 1425 "0x01000000" "Only available in Steering modes"
D G "CWG_B_FORCE_HIGH" 1 1427 "0x20000000" "Only available in Steering modes"
D G "CWG_B_FORCE_LOW" 1 1428 "0x00000000" "Only available in Steering modes"
D G "CWG_B_OUTPUT_PWM" 1 1429 "0x02000000" "Only available in Steering modes"
D G "CWG_C_FORCE_HIGH" 1 1431 "0x40000000" "Only available in Steering modes"
D G "CWG_C_FORCE_LOW" 1 1432 "0x00000000" "Only available in Steering modes"
D G "CWG_C_OUTPUT_PWM" 1 1433 "0x04000000" "Only available in Steering modes"
D G "CWG_D_FORCE_HIGH" 1 1435 "0x80000000" "Only available in Steering modes"
D G "CWG_D_FORCE_LOW" 1 1436 "0x00000000" "Only available in Steering modes"
D G "CWG_D_OUTPUT_PWM" 1 1437 "0x08000000" "Only available in Steering modes"
D G "CWG_NO_AUTO_SHUTDOWN" 1 1441 "0x0000"
D G "CWG_SHUTDOWN_ON_CWGxIN" 1 1442 "0x0001"
D G "CWG_SHUTDOWN_ON_TMR2" 1 1443 "0x0002"
D G "CWG_SHUTDOWN_ON_TMR4" 1 1444 "0x0004"
D G "CWG_SHUTDOWN_ON_TMR6" 1 1445 "0x0008"
D G "CWG_SHUTDOWN_ON_COMP1" 1 1446 "0x0010"
D G "CWG_SHUTDOWN_ON_COMP2" 1 1447 "0x0020"
D G "CWG_SHUTDOWN_ON_CLCx" 1 1448 "0x0040" "CLC2 - CWG1, CLC3 - CWG2, CLC4 - CWG3"
D G "CWG_SHUTDOWN_ON_CLC6" 1 1449 "0x0080"
D G "CWG_AUTO_RESTART" 1 1450 "0x4000"
D G "CWG_SHUTDOWN_AC_INACTIVE_STATE" 1 1452 "0x0000"
D G "CWG_SHUTDOWN_AC_TRISTATE" 1 1453 "0x0400"
D G "CWG_SHUTDOWN_AC_LOW" 1 1454 "0x0800"
D G "CWG_SHUTDOWN_AC_HIGH" 1 1455 "0x0C00"
D G "CWG_SHUTDOWN_BD_INACTIVE_STATE" 1 1457 "0"
D G "CWG_SHUTDOWN_BD_TRISTATE" 1 1458 "0x1000"
D G "CWG_SHUTDOWN_BD_LOW" 1 1459 "0x2000"
D G "CWG_SHUTDOWN_BD_HIGH" 1 1460 "0x3000"
D G "CWG_AUTO_SHUTDOWN" 1 1463 "0x80"
c L "cwg3_status" 1 1 5 "FUNCTION"
F N "setup_nco" 1 1470 ""
V L "mode" 1 1470 "int32" `473 
V L "inc_value" 1 1470 "int32" `474 
F B "setup_nco" 1 1470 "void(int32 mode,int32 inc_value)" `472 
F N "setup_nco2" 1 1471 ""
V L "mode" 1 1471 "int32" `476 
V L "inc_value" 1 1471 "int32" `477 
F B "setup_nco2" 1 1471 "void(int32 mode,int32 inc_value)" `475 
F N "setup_nco3" 1 1472 ""
V L "mode" 1 1472 "int32" `479 
V L "inc_value" 1 1472 "int32" `480 
F B "setup_nco3" 1 1472 "void(int32 mode,int32 inc_value)" `478 
F N "set_nco_inc_value" 1 1473 ""
V L "value" 1 1473 "int32" `482 
F B "set_nco_inc_value" 1 1473 "void(int32 value)" `481 
F N "set_nco2_inc_value" 1 1474 ""
V L "value" 1 1474 "int32" `484 
F B "set_nco2_inc_value" 1 1474 "void(int32 value)" `483 
F N "set_nco3_inc_value" 1 1475 ""
V L "value" 1 1475 "int32" `486 
F B "set_nco3_inc_value" 1 1475 "void(int32 value)" `485 
F N "set_nco_accumulator" 1 1476 ""
V L "value" 1 1476 "int32" `488 
F B "set_nco_accumulator" 1 1476 "void(int32 value)" `487 
F N "set_nco2_accumulator" 1 1477 ""
V L "value" 1 1477 "int32" `490 
F B "set_nco2_accumulator" 1 1477 "void(int32 value)" `489 
F N "set_nco3_accumulator" 1 1478 ""
V L "value" 1 1478 "int32" `492 
F B "set_nco3_accumulator" 1 1478 "void(int32 value)" `491 
F N "get_nco_accumulator" 1 1479 ""
F B "get_nco_accumulator" 1 1479 "int32()" `493 
F N "get_nco2_accumulator" 1 1480 ""
F B "get_nco2_accumulator" 1 1480 "int32()" `494 
F N "get_nco3_accumulator" 1 1481 ""
F B "get_nco3_accumulator" 1 1481 "int32()" `495 
F N "get_nco_inc_value" 1 1482 ""
F B "get_nco_inc_value" 1 1482 "int32()" `496 
F N "get_nco2_inc_value" 1 1483 ""
F B "get_nco2_inc_value" 1 1483 "int32()" `497 
F N "get_nco3_inc_value" 1 1484 ""
F B "get_nco3_inc_value" 1 1484 "int32()" `498  "Constants used in SETUP_NCO(), SETUP_NCO2() and SETUP_NCO3() first parameter are:"
D G "NCO_ENABLED" 1 1486 "0x0080"
D G "NCO_DISABLED" 1 1487 "0"
D G "NCO_ACTIVE_HIGH" 1 1489 "0x0010"
D G "NCO_ACTIVE_LOW" 1 1490 "0"
D G "NCO_PULSE_FREQ_MODE" 1 1492 "0x0001"
D G "NCO_FIXED_DUTY_MODE" 1 1493 "0"
D G "NCO_CLOCK_FOSC" 1 1495 "0"
D G "NCO_CLOCK_HFINTOSC" 1 1496 "0x0100"
D G "NCO_CLOCK_LFINTOSC" 1 1497 "0x0200"
D G "NCO_CLOCK_MFINTOSC_500KHZ" 1 1498 "0x0300"
D G "NCO_CLOCK_MFINTOSC" 1 1499 "0x0400"
D G "NCO_CLOCK_SOSC" 1 1500 "0x0500"
D G "NCO_CLOCK_EXTOSC" 1 1501 "0x0600"
D G "NCO_CLOCK_CLKR" 1 1502 "0x0700"
D G "NCO_CLOCK_TMR2" 1 1503 "0x0800"
D G "NCO_CLOCK_TMR4" 1 1504 "0x0900"
D G "NCO_CLOCK_TMR5" 1 1505 "0x0A00"
D G "NCO_CLOCK_NCO1" 1 1506 "0x1000" "NCO2 and NCO3 only"
D G "NCO_CLOCK_NCO2" 1 1507 "0x1100" "NCO1 and NCO3 only"
D G "NCO_CLOCK_NCO3" 1 1508 "0x1200" "NCO1 and NCO2 only"
D G "NCO_CLOCK_CLC1" 1 1509 "0x1300"
D G "NCO_CLOCK_CLC2" 1 1510 "0x1400"
D G "NCO_CLOCK_CLC3" 1 1511 "0x1500"
D G "NCO_CLOCK_CLC4" 1 1512 "0x1600"
D G "NCO_CLOCK_CLC5" 1 1513 "0x1700"
D G "NCO_CLOCK_CLC6" 1 1514 "0x1800"
D G "NCO_CLOCK_CLC7" 1 1515 "0x1900"
D G "NCO_CLOCK_CLC8" 1 1516 "0x1A00"
D G "NCO_PULSE_WIDTH_1" 1 1519 "0"
D G "NCO_PULSE_WIDTH_2" 1 1520 "0x2000"
D G "NCO_PULSE_WIDTH_4" 1 1521 "0x4000"
D G "NCO_PULSE_WIDTH_8" 1 1522 "0x6000"
D G "NCO_PULSE_WIDTH_16" 1 1523 "0x8000"
D G "NCO_PULSE_WIDTH_32" 1 1524 "0xA000"
D G "NCO_PULSE_WIDTH_64" 1 1525 "0xC000"
D G "NCO_PULSE_WIDTH_128" 1 1526 "0xE000"
c L "get_nco3_inc_value" 1 1 4 "FUNCTION"
F N "setup_clc1" 1 1537 ""
V L "mode" 1 1537 "int32" `503 
F B "setup_clc1" 1 1537 "void(int32 mode)" `502 
F N "setup_clc2" 1 1538 ""
V L "mode" 1 1538 "int32" `505 
F B "setup_clc2" 1 1538 "void(int32 mode)" `504 
F N "setup_clc3" 1 1539 ""
V L "mode" 1 1539 "int32" `507 
F B "setup_clc3" 1 1539 "void(int32 mode)" `506 
F N "setup_clc4" 1 1540 ""
V L "mode" 1 1540 "int32" `509 
F B "setup_clc4" 1 1540 "void(int32 mode)" `508 
F N "setup_clc5" 1 1541 ""
V L "mode" 1 1541 "int32" `511 
F B "setup_clc5" 1 1541 "void(int32 mode)" `510 
F N "setup_clc6" 1 1542 ""
V L "mode" 1 1542 "int32" `513 
F B "setup_clc6" 1 1542 "void(int32 mode)" `512 
F N "setup_clc7" 1 1543 ""
V L "mode" 1 1543 "int32" `515 
F B "setup_clc7" 1 1543 "void(int32 mode)" `514 
F N "setup_clc8" 1 1544 ""
V L "mode" 1 1544 "int32" `517 
F B "setup_clc8" 1 1544 "void(int32 mode)" `516 
F N "clc1_setup_input" 1 1545 ""
V L "input" 1 1545 "int8" `519 
V L "selection" 1 1545 "int8" `520 
F B "clc1_setup_input" 1 1545 "void(int8 input,int8 selection)" `518 
F N "clc2_setup_input" 1 1546 ""
V L "input" 1 1546 "int8" `522 
V L "selection" 1 1546 "int8" `523 
F B "clc2_setup_input" 1 1546 "void(int8 input,int8 selection)" `521 
F N "clc3_setup_input" 1 1547 ""
V L "input" 1 1547 "int8" `525 
V L "selection" 1 1547 "int8" `526 
F B "clc3_setup_input" 1 1547 "void(int8 input,int8 selection)" `524 
F N "clc4_setup_input" 1 1548 ""
V L "input" 1 1548 "int8" `528 
V L "selection" 1 1548 "int8" `529 
F B "clc4_setup_input" 1 1548 "void(int8 input,int8 selection)" `527 
F N "clc5_setup_input" 1 1549 ""
V L "input" 1 1549 "int8" `531 
V L "selection" 1 1549 "int8" `532 
F B "clc5_setup_input" 1 1549 "void(int8 input,int8 selection)" `530 
F N "clc6_setup_input" 1 1550 ""
V L "input" 1 1550 "int8" `534 
V L "selection" 1 1550 "int8" `535 
F B "clc6_setup_input" 1 1550 "void(int8 input,int8 selection)" `533 
F N "clc7_setup_input" 1 1551 ""
V L "input" 1 1551 "int8" `537 
V L "selection" 1 1551 "int8" `538 
F B "clc7_setup_input" 1 1551 "void(int8 input,int8 selection)" `536 
F N "clc8_setup_input" 1 1552 ""
V L "input" 1 1552 "int8" `540 
V L "selection" 1 1552 "int8" `541 
F B "clc8_setup_input" 1 1552 "void(int8 input,int8 selection)" `539 
F N "clc1_setup_gate" 1 1553 ""
V L "gate" 1 1553 "int8" `543 
V L "mode" 1 1553 "int16" `544 
F B "clc1_setup_gate" 1 1553 "void(int8 gate,int16 mode)" `542 
F N "clc2_setup_gate" 1 1554 ""
V L "gate" 1 1554 "int8" `546 
V L "mode" 1 1554 "int16" `547 
F B "clc2_setup_gate" 1 1554 "void(int8 gate,int16 mode)" `545 
F N "clc3_setup_gate" 1 1555 ""
V L "gate" 1 1555 "int8" `549 
V L "mode" 1 1555 "int16" `550 
F B "clc3_setup_gate" 1 1555 "void(int8 gate,int16 mode)" `548 
F N "clc4_setup_gate" 1 1556 ""
V L "gate" 1 1556 "int8" `552 
V L "mode" 1 1556 "int16" `553 
F B "clc4_setup_gate" 1 1556 "void(int8 gate,int16 mode)" `551 
F N "clc5_setup_gate" 1 1557 ""
V L "gate" 1 1557 "int8" `555 
V L "mode" 1 1557 "int16" `556 
F B "clc5_setup_gate" 1 1557 "void(int8 gate,int16 mode)" `554 
F N "clc6_setup_gate" 1 1558 ""
V L "gate" 1 1558 "int8" `558 
V L "mode" 1 1558 "int16" `559 
F B "clc6_setup_gate" 1 1558 "void(int8 gate,int16 mode)" `557 
F N "clc7_setup_gate" 1 1559 ""
V L "gate" 1 1559 "int8" `561 
V L "mode" 1 1559 "int16" `562 
F B "clc7_setup_gate" 1 1559 "void(int8 gate,int16 mode)" `560 
F N "clc8_setup_gate" 1 1560 ""
V L "gate" 1 1560 "int8" `564 
V L "mode" 1 1560 "int16" `565 
F B "clc8_setup_gate" 1 1560 "void(int8 gate,int16 mode)" `563  "Constants used in SETUP_CLCx() are:"
D G "CLC_ENABLED" 1 1562 "0x080"
D G "CLC_DISABLED" 1 1563 "0"
D G "CLC_INT_L_TO_H" 1 1565 "0x010"
D G "CLC_INT_H_TO_L" 1 1566 "0x008"
D G "CLC_OUTPUT_INVERTED" 1 1567 "0x100"
D G "CLC_MODE_AND_OR" 1 1569 "0x000"
D G "CLC_MODE_OR_XOR" 1 1570 "0x001"
D G "CLC_MODE_AND" 1 1571 "0x002"
D G "CLC_MODE_SR_LATCH" 1 1572 "0x003"
D G "CLC_MODE_1_INPUT_D_FLIP_FLOP" 1 1573 "0x004"
D G "CLC_MODE_2_INPUT_D_FLIP_FLOP" 1 1574 "0x005"
D G "CLC_MODE_JK_FLIP_FLOP" 1 1575 "0x006"
D G "CLC_MODE_1_INPUT_TRANSPARENT_LATCH" 1 1576 "0x007"
D G "CLC_INPUT_CLCIN0" 1 1579 "0"
D G "CLC_INPUT_CLCIN1" 1 1580 "0x01"
D G "CLC_INPUT_CLCIN2" 1 1581 "0x02"
D G "CLC_INPUT_CLCIN3" 1 1582 "0x03"
D G "CLC_INPUT_CLCIN4" 1 1583 "0x04"
D G "CLC_INPUT_CLCIN5" 1 1584 "0x05"
D G "CLC_INPUT_CLCIN6" 1 1585 "0x06"
D G "CLC_INPUT_CLCIN7" 1 1586 "0x07"
D G "CLC_INPUT_FOSC" 1 1587 "0x08"
D G "CLC_INPUT_HFINTOSC" 1 1588 "0x09"
D G "CLC_INPUT_LFINTOSC" 1 1589 "0x0A"
D G "CLC_INPUT_MFINTOSC_500KHZ" 1 1590 "0x0B"
D G "CLC_INPUT_MFINTOSC" 1 1591 "0x0C"
D G "CLC_INPUT_SFINTOSC" 1 1592 "0x0D"
D G "CLC_INPUT_SOSC" 1 1593 "0x0E"
D G "CLC_INPUT_EXTOSC" 1 1594 "0x0F"
D G "CLC_INPUT_ADCRC" 1 1595 "0x10"
D G "CLC_INPUT_CLKR" 1 1596 "0x11"
D G "CLC_INPUT_TIMER0" 1 1597 "0x12"
D G "CLC_INPUT_TIMER1" 1 1598 "0x13"
D G "CLC_INPUT_TIMER2" 1 1599 "0x14"
D G "CLC_INPUT_TIMER3" 1 1600 "0x15"
D G "CLC_INPUT_TIMER4" 1 1601 "0x16"
D G "CLC_INPUT_TIMER5" 1 1602 "0x17"
D G "CLC_INPUT_TIMER6" 1 1603 "0x18"
D G "CLC_INPUT_SMT1" 1 1604 "0x1E"
D G "CLC_INPUT_CCP1" 1 1605 "0x1F"
D G "CLC_INPUT_CCP2" 1 1606 "0x20"
D G "CLC_INPUT_CCP3" 1 1607 "0x21"
D G "CLC_INPUT_PWM1S1P1" 1 1608 "0x22"
D G "CLC_INPUT_PWM1S1P2" 1 1609 "0x23"
D G "CLC_INPUT_PWM2S1P1" 1 1610 "0x24"
D G "CLC_INPUT_PWM2S1P2" 1 1611 "0x25"
D G "CLC_INPUT_PWM3S1P1" 1 1612 "0x26"
D G "CLC_INPUT_PWM3S1P2" 1 1613 "0x27"
D G "CLC_INPUT_NCO1" 1 1614 "0x2A"
D G "CLC_INPUT_NCO2" 1 1615 "0x2B"
D G "CLC_INPUT_NCO3" 1 1616 "0x2C"
D G "CLC_INPUT_C1OUT" 1 1617 "0x2D"
D G "CLC_INPUT_C2OUT" 1 1618 "0x2E"
D G "CLC_INPUT_ZCD" 1 1619 "0x2F"
D G "CLC_INPUT_IOCIF" 1 1620 "0x30"
D G "CLC_INPUT_DSM" 1 1621 "0x31"
D G "CLC_INPUT_HLVD" 1 1622 "0x32"
D G "CLC_INPUT_CLC1" 1 1623 "0x33"
D G "CLC_INPUT_CLC2" 1 1624 "0x34"
D G "CLC_INPUT_CLC3" 1 1625 "0x35"
D G "CLC_INPUT_CLC4" 1 1626 "0x36"
D G "CLC_INPUT_CLC5" 1 1627 "0x37"
D G "CLC_INPUT_CLC6" 1 1628 "0x38"
D G "CLC_INPUT_CLC7" 1 1629 "0x39"
D G "CLC_INPUT_CLC8" 1 1630 "0x3A"
D G "CLC_INPUT_U1TX" 1 1631 "0x3B"
D G "CLC_INPUT_U2TX" 1 1632 "0x3C"
D G "CLC_INPUT_U3TX" 1 1633 "0x3D"
D G "CLC_INPUT_U4TX" 1 1634 "0x3E"
D G "CLC_INPUT_U5TX" 1 1635 "0x3F"
D G "CLC_INPUT_SDO1" 1 1636 "0x40"
D G "CLC_INPUT_SCK1" 1 1637 "0x41"
D G "CLC_INPUT_SS1" 1 1638 "0x42"
D G "CLC_INPUT_SDO2" 1 1639 "0x43"
D G "CLC_INPUT_SCK2" 1 1640 "0x44"
D G "CLC_INPUT_SS2" 1 1641 "0x45"
D G "CLC_INPUT_SCL1" 1 1642 "0x46"
D G "CLC_INPUT_SDA1" 1 1643 "0x47"
D G "CLC_INPUT_CWG1A" 1 1644 "0x48"
D G "CLC_INPUT_CWG1B" 1 1645 "0x49"
D G "CLC_INPUT_CWG2A" 1 1646 "0x4A"
D G "CLC_INPUT_CWG2B" 1 1647 "0x4B"
D G "CLC_INPUT_CWG3A" 1 1648 "0x4C"
D G "CLC_INPUT_CWG3B" 1 1649 "0x4D"
D G "CLC_GATE_AND" 1 1654 "0x155"
D G "CLC_GATE_NAND" 1 1655 "0x055"
D G "CLC_GATE_NOR" 1 1656 "0x1AA"
D G "CLC_GATE_OR" 1 1657 "0x0AA"
D G "CLC_GATE_CLEAR" 1 1658 "0"
D G "CLC_GATE_SET" 1 1659 "0x100"
D G "CLC_GATE_INVERTED_INPUT_1" 1 1663 "0x001"
D G "CLC_GATE_NON_INVERTED_INPUT_1" 1 1664 "0x002"
D G "CLC_GATE_INVERTED_INPUT_2" 1 1665 "0x004"
D G "CLC_GATE_NON_INVERTED_INPUT_2" 1 1666 "0x008"
D G "CLC_GATE_INVERTED_INPUT_3" 1 1667 "0x010"
D G "CLC_GATE_NON_INVERTED_INPUT_3" 1 1668 "0x020"
D G "CLC_GATE_INVERTED_INPUT_4" 1 1669 "0x040"
D G "CLC_GATE_NON_INVERTED_INPUT_4" 1 1670 "0x080"
D G "CLC_GATE_OUTPUT_INVERTED" 1 1671 "0x100"
c L "clc8_setup_gate" 1 1 4 "FUNCTION"
F N "setup_dma" 1 1686 ""
V L "channel" 1 1686 "int8" `575 
V L "start_trigger" 1 1686 "int8" `576 
V L "abort_trigger" 1 1686 "int8" `577 
F B "setup_dma" 1 1686 "void(int8 channel,int8 start_trigger,int8 abort_trigger)" `574 
F N "dma_start" 1 1687 ""
V L "channel" 1 1687 "int8" `579 
V L "mode" 1 1687 "int8" `580 
V L "destAddr" 1 1687 "int16" `581 
V L "sourceAddr" 1 1687 "int32" `582 
V L "destCount" 1 1687 "int16" `583 
V L "sourceCount" 1 1687 "int16" `584 
F B "dma_start" 1 1687 "void(int8 channel,int8 mode,int16 destAddr,int32 sourceAddr,int16 destCount,int16 sourceCount)" `578 
F N "dma_status" 1 1688 ""
V L "channel" 1 1688 "int8" `586 
F B "dma_status" 1 1688 "int16(int8 channel)" `585 
F N "dma_go" 1 1689 ""
V L "channel" 1 1689 "int8" `588 
F B "dma_go" 1 1689 "void(int8 channel)" `587 
F N "dma_stop" 1 1690 ""
V L "channel" 1 1690 "int8" `590 
F B "dma_stop" 1 1690 "void(int8 channel)" `589  "Constants used in setup_dma() second and third parameters are:"
D G "DMA_TRIGGER_NONE" 1 1692 "0"
D G "DMA_TRIGGER_HLVD" 1 1693 "0x01"
D G "DMA_TRIGGER_OSF" 1 1694 "0x02"
D G "DMA_TRIGGER_CSW" 1 1695 "0x03"
D G "DMA_TRIGGER_CLC1" 1 1696 "0x05"
D G "DMA_TRIGGER_IOC" 1 1697 "0x07"
D G "DMA_TRIGGER_EXT" 1 1698 "0x08"
D G "DMA_TRIGGER_ZCD" 1 1699 "0x09"
D G "DMA_TRIGGER_ADC" 1 1700 "0x0A"
D G "DMA_TRIGGER_ACT" 1 1701 "0x0B"
D G "DMA_TRIGGER_COMP1" 1 1702 "0x0C"
D G "DMA_TRIGGER_SMT1" 1 1703 "0x0D"
D G "DMA_TRIGGER_SMT1PRA" 1 1704 "0x0E"
D G "DMA_TRIGGER_SMT1PWA" 1 1705 "0x0F"
D G "DMA_TRIGGER_ADT" 1 1706 "0x10"
D G "DMA_TRIGGER_DMA1SCNT" 1 1707 "0x14"
D G "DMA_TRIGGER_DMA1DCNT" 1 1708 "0x15"
D G "DMA_TRIGGER_DMA1OR" 1 1709 "0x16"
D G "DMA_TRIGGER_DMA1A" 1 1710 "0x17"
D G "DMA_TRIGGER_SPI1RX" 1 1711 "0x18"
D G "DMA_TRIGGER_SPI1TX" 1 1712 "0x19"
D G "DMA_TRIGGER_SPI1" 1 1713 "0x1A"
D G "DMA_TRIGGER_TIMER2" 1 1714 "0x1B"
D G "DMA_TRIGGER_TIMER1" 1 1715 "0x1C"
D G "DMA_TRIGGER_TIMER1G" 1 1716 "0x1D"
D G "DMA_TRIGGER_CCP1" 1 1717 "0x1E"
D G "DMA_TRIGGER_TIMER0" 1 1718 "0x1F"
D G "DMA_TRIGGER_RDA" 1 1719 "0x20"
D G "DMA_TRIGGER_TBE" 1 1720 "0x21"
D G "DMA_TRIGGER_U1E" 1 1721 "0x22"
D G "DMA_TRIGGER_U1" 1 1722 "0x23"
D G "DMA_TRIGGER_PWM1RINT" 1 1723 "0x26"
D G "DMA_TRIGGER_PWM1GINT" 1 1724 "0x27"
D G "DMA_TRIGGER_SPI2RX" 1 1725 "0x28"
D G "DMA_TRIGGER_SPI2TX" 1 1726 "0x29"
D G "DMA_TRIGGER_SPI2" 1 1727 "0x2A"
D G "DMA_TRIGGER_TIMER3" 1 1728 "0x2C"
D G "DMA_TRIGGER_TIMER3G" 1 1729 "0x2D"
D G "DMA_TRIGGER_PWM2RINT" 1 1730 "0x2E"
D G "DMA_TRIGGER_PWM2GINT" 1 1731 "0x2F"
D G "DMA_TRIGGER_EXT1" 1 1732 "0x30"
D G "DMA_TRIGGER_CLC2" 1 1733 "0x31"
D G "DMA_TRIGGER_CWG1" 1 1734 "0x32"
D G "DMA_TRIGGER_NCO1" 1 1735 "0x33"
D G "DMA_TRIGGER_DMA2SCNT" 1 1736 "0x34"
D G "DMA_TRIGGER_DMA2DCNT" 1 1737 "0x35"
D G "DMA_TRIGGER_DMA2OR" 1 1738 "0x36"
D G "DMA_TRIGGER_DMA2A" 1 1739 "0x37"
D G "DMA_TRIGGER_I2C1RX" 1 1740 "0x38"
D G "DMA_TRIGGER_I2C1TX" 1 1741 "0x39"
D G "DMA_TRIGGER_I2C1" 1 1742 "0x3A"
D G "DMA_TRIGGER_I2C1E" 1 1743 "0x3B"
D G "DMA_TRIGGER_CLC3" 1 1744 "0x3D"
D G "DMA_TRIGGER_PWM3RINT" 1 1745 "0x3E"
D G "DMA_TRIGGER_PWM3GINT" 1 1746 "0x3F"
D G "DMA_TRIGGER_RDA2" 1 1747 "0x40"
D G "DMA_TRIGGER_TBE2" 1 1748 "0x41"
D G "DMA_TRIGGER_U2E" 1 1749 "0x42"
D G "DMA_TRIGGER_U2" 1 1750 "0x43"
D G "DMA_TRIGGER_TIMER5" 1 1751 "0x44"
D G "DMA_TRIGGER_TIMER5G" 1 1752 "0x45"
D G "DMA_TRIGGER_CCP2" 1 1753 "0x46"
D G "DMA_TRIGGER_SCAN" 1 1754 "0x47"
D G "DMA_TRIGGER_RDA3" 1 1755 "0x48"
D G "DMA_TRIGGER_TBE3" 1 1756 "0x49"
D G "DMA_TRIGGER_U3E" 1 1757 "0x4A"
D G "DMA_TRIGGER_U3" 1 1758 "0x4B"
D G "DMA_TRIGGER_CLC4" 1 1759 "0x4D"
D G "DMA_TRIGGER_EXT2" 1 1760 "0x50"
D G "DMA_TRIGGER_CLC5" 1 1761 "0x51"
D G "DMA_TRIGGER_CWG2" 1 1762 "0x52"
D G "DMA_TRIGGER_NCO2" 1 1763 "0x53"
D G "DMA_TRIGGER_DMA3SCNT" 1 1764 "0x54"
D G "DMA_TRIGGER_DMA3DCNT" 1 1765 "0x55"
D G "DMA_TRIGGER_DMA3OR" 1 1766 "0x56"
D G "DMA_TRIGGER_DMA3A" 1 1767 "0x57"
D G "DMA_TRIGGER_CCP3" 1 1768 "0x58"
D G "DMA_TRIGGER_CLC6" 1 1769 "0x59"
D G "DMA_TRIGGER_CWG3" 1 1770 "0x5A"
D G "DMA_TRIGGER_TIMER4" 1 1771 "0x5B"
D G "DMA_TRIGGER_DMA4SCNT" 1 1772 "0x5C"
D G "DMA_TRIGGER_DMA4DCNT" 1 1773 "0x5D"
D G "DMA_TRIGGER_DMA4OR" 1 1774 "0x5E"
D G "DMA_TRIGGER_DMA4A" 1 1775 "0x5F"
D G "DMA_TRIGGER_RDA4" 1 1776 "0x60"
D G "DMA_TRIGGER_TBE4" 1 1777 "0x61"
D G "DMA_TRIGGER_U4E" 1 1778 "0x62"
D G "DMA_TRIGGER_U4" 1 1779 "0x63"
D G "DMA_TRIGGER_DMA5SCNT" 1 1780 "0x64"
D G "DMA_TRIGGER_DMA5DCNT" 1 1781 "0x65"
D G "DMA_TRIGGER_DMA5OR" 1 1782 "0x66"
D G "DMA_TRIGGER_DMA5A" 1 1783 "0x67"
D G "DMA_TRIGGER_RDA5" 1 1784 "0x68"
D G "DMA_TRIGGER_TBE5" 1 1785 "0x69"
D G "DMA_TRIGGER_U5E" 1 1786 "0x6A"
D G "DMA_TRIGGER_U5" 1 1787 "0x6B"
D G "DMA_TRIGGER_DMA6SCNT" 1 1788 "0x6C"
D G "DMA_TRIGGER_DMA6DCNT" 1 1789 "0x6D"
D G "DMA_TRIGGER_DMA6OR" 1 1790 "0x6E"
D G "DMA_TRIGGER_DMA6A" 1 1791 "0x6F"
D G "DMA_TRIGGER_CLC7" 1 1792 "0x71"
D G "DMA_TRIGGER_COMP2" 1 1793 "0x72"
D G "DMA_TRIGGER_NCO3" 1 1794 "0x73"
D G "DMA_TRIGGER_NVM" 1 1795 "0x78"
D G "DMA_TRIGGER_CLC8" 1 1796 "0x79"
D G "DMA_TRIGGER_CRC" 1 1797 "0x7A"
D G "DMA_TRIGGER_TIMER6" 1 1798 "0x7B"
D G "DMA_TRIGGER_PWM1S1P1" 1 1799 "0x90"
D G "DMA_TRIGGER_PWM1S1P2" 1 1800 "0x91"
D G "DMA_TRIGGER_PWM1S2P1" 1 1801 "0x92"
D G "DMA_TRIGGER_PWM1S2P2" 1 1802 "0x93"
D G "DMA_TRIGGER_PWM1S3P1" 1 1803 "0x94"
D G "DMA_TRIGGER_PWM1S3P2" 1 1804 "0x95"
D G "DMA_SOURCE_ADDR_IS_EEPROM" 1 1807 "0x10"
D G "DMA_SOURCE_ADDR_IS_PFM" 1 1808 "0x08"
D G "DMA_SOURCE_ADDR_IS_SFR_GPR" 1 1809 "0"
D G "DMA_DEC_SOURCE_ADDR" 1 1811 "0x04"
D G "DMA_INC_SOURCE_ADDR" 1 1812 "0x02"
D G "DMA_SOURCE_ADDR_UNCHANGED" 1 1813 "0"
D G "DMA_DEC_DEST_ADDR" 1 1815 "0x80"
D G "DMA_INC_DEST_ADDR" 1 1816 "0x40"
D G "DMA_DEST_ADDR_UNCHANGED" 1 1817 "0"
D G "DMA_HW_TRIGGER_STARTS_XFER" 1 1819 "0x4000"
D G "DMA_SW_TRIGGER_STARTS_XFER" 1 1820 "0"
D G "DMA_HW_TRIGGER_ABORTS_XFER" 1 1822 "0x0400"
D G "DMA_CONTINUOUS" 1 1824 "0" "Only applicable when HW trigger starts transfer"
D G "DMA_ONE_SHOT_FROM_SOURCE_COUNT" 1 1825 "0x01" "Only applicable when HW trigger starts transfer, stops when source count equals zero"
D G "DMA_ONE_SHOT_FROM_DEST_COUNT" 1 1826 "0x20" "Only applicable when HW trigger starts transfer, stops when destination count equal zero"
D G "DMA_ONE_SHOT" 1 1827 "0x21" "Only applicable when HW trigger starts transfer, stops when either source or destination count equal zero"
D G "DMA_START_NOW" 1 1829 "0x2000" "Only applicable when SW trigger starts transfer"
D G "DMA_DONE" 1 1832 "0x01"
c L "dma_stop" 1 1 4 "FUNCTION"
F N "setup_crc" 1 1838 ""
V L "poly_terms" 1 1838 "int8" `592 
F B "setup_crc" 1 1838 "void(int8 poly_terms,*int8 _VA_LIST)" `591 
F N "crc_init" 1 1839 ""
V L "value" 1 1839 "int16" `595 
F B "crc_init" 1 1839 "void(int16 value)" `594 
F N "crc_calc16" 1 1840 ""
V L "data" 1 1840 "int16" `597 
F B "crc_calc16" 1 1840 "int16(int16 data)" `596 
F N "crc_calc16" 1 1841 ""
V L "data" 1 1841 "int16" `599 
V L "data_width" 1 1841 "int8" `600 
F B "crc_calc16" 1 1841 "int16(int16 data,int8 data_width)" `598 
F N "crc_calc16" 1 1842 ""
V L "data" 1 1842 "int8" `602 
V L "data_width" 1 1842 "int8" `603 
F B "crc_calc16" 1 1842 "int16(int8 data,int8 data_width)" `601 
F N "crc_calc16" 1 1843 ""
V L "ptr" 1 1843 "*int16" `605 
V L "count" 1 1843 "int16" `606 
F B "crc_calc16" 1 1843 "int16(*int16 ptr,int16 count)" `604 
F N "crc_calc16" 1 1844 ""
V L "ptr" 1 1844 "*int16" `608 
V L "count" 1 1844 "int16" `609 
V L "data_width" 1 1844 "int8" `610 
F B "crc_calc16" 1 1844 "int16(*int16 ptr,int16 count,int8 data_width)" `607 
F N "crc_calc16" 1 1845 ""
V L "ptr" 1 1845 "*int8" `612 
V L "count" 1 1845 "int16" `613 
V L "data_width" 1 1845 "int8" `614 
F B "crc_calc16" 1 1845 "int16(*int8 ptr,int16 count,int8 data_width)" `611 
F N "crc_calc8" 1 1846 ""
V L "data" 1 1846 "int8" `616 
F B "crc_calc8" 1 1846 "int8(int8 data)" `615 
F N "crc_calc8" 1 1847 ""
V L "data" 1 1847 "int8" `618 
V L "data_width" 1 1847 "int8" `619 
F B "crc_calc8" 1 1847 "int8(int8 data,int8 data_width)" `617 
F N "crc_calc8" 1 1848 ""
V L "ptr" 1 1848 "*int8" `621 
V L "count" 1 1848 "int16" `622 
F B "crc_calc8" 1 1848 "int8(*int8 ptr,int16 count)" `620 
F N "crc_calc8" 1 1849 ""
V L "ptr" 1 1849 "*int8" `624 
V L "count" 1 1849 "int16" `625 
V L "data_width" 1 1849 "int8" `626 
F B "crc_calc8" 1 1849 "int8(*int8 ptr,int16 count,int8 data_width)" `623 
F N "crc_calc" 1 1850 ""
V L "data" 1 1850 "int16" `628 
F B "crc_calc" 1 1850 "int16(int16 data)" `627 
F N "crc_calc" 1 1851 ""
V L "data" 1 1851 "int16" `630 
V L "data_width" 1 1851 "int8" `631 
F B "crc_calc" 1 1851 "int16(int16 data,int8 data_width)" `629 
F N "crc_calc" 1 1852 ""
V L "data" 1 1852 "int8" `633 
V L "data_width" 1 1852 "int8" `634 
F B "crc_calc" 1 1852 "int16(int8 data,int8 data_width)" `632 
F N "crc_calc" 1 1853 ""
V L "ptr" 1 1853 "*int16" `636 
V L "count" 1 1853 "int16" `637 
F B "crc_calc" 1 1853 "int16(*int16 ptr,int16 count)" `635 
F N "crc_calc" 1 1854 ""
V L "ptr" 1 1854 "*int16" `639 
V L "count" 1 1854 "int16" `640 
V L "data_width" 1 1854 "int8" `641 
F B "crc_calc" 1 1854 "int16(*int16 ptr,int16 count,int8 data_width)" `638 
F N "crc_calc" 1 1855 ""
V L "ptr" 1 1855 "*int8" `643 
V L "count" 1 1855 "int16" `644 
V L "data_width" 1 1855 "int8" `645 
F B "crc_calc" 1 1855 "int16(*int8 ptr,int16 count,int8 data_width)" `642 
F N "crc_write" 1 1856 ""
V L "data" 1 1856 "int16" `647 
F B "crc_write" 1 1856 "void(int16 data)" `646 
F N "crc_write" 1 1857 ""
V L "data" 1 1857 "int16" `649 
V L "data_width" 1 1857 "int8" `650 
F B "crc_write" 1 1857 "void(int16 data,int8 data_width)" `648 
F N "crc_write" 1 1858 ""
V L "data" 1 1858 "int8" `652 
V L "data_width" 1 1858 "int8" `653 
F B "crc_write" 1 1858 "void(int8 data,int8 data_width)" `651 
F N "crc_read" 1 1859 ""
F B "crc_read" 1 1859 "int16()" `654  "Constants used in setup_crc() are:"
D G "CRC_LITTLE_ENDIAN" 1 1861 "128"
c L "crc_read" 1 1 5 "FUNCTION"
F N "setup_smt1" 1 1868 ""
V L "mode" 1 1868 "int32" `656 
F B "setup_smt1" 1 1868 "void(int32 mode)" `655 
F N "setup_smt1" 1 1869 ""
V L "mode" 1 1869 "int32" `658 
V L "period" 1 1869 "int32" `659 
F B "setup_smt1" 1 1869 "void(int32 mode,int32 period)" `657 
F N "smt1_status" 1 1870 ""
F B "smt1_status" 1 1870 "int8()" `660 
F N "smt1_start" 1 1871 ""
F B "smt1_start" 1 1871 "void()" `661 
F N "smt1_stop" 1 1872 ""
F B "smt1_stop" 1 1872 "void()" `662 
F N "smt1_update" 1 1873 ""
V L "which" 1 1873 "int8" `664 
F B "smt1_update" 1 1873 "void(int8 which)" `663 
F N "smt1_reset_timer" 1 1874 ""
F B "smt1_reset_timer" 1 1874 "void()" `665 
F N "smt1_read" 1 1875 ""
V L "which" 1 1875 "int8" `667 
F B "smt1_read" 1 1875 "int32(int8 which)" `666 
F N "smt1_write" 1 1876 ""
V L "which" 1 1876 "int8" `669 
V L "value" 1 1876 "int32" `670 
F B "smt1_write" 1 1876 "void(int8 which,int32 value)" `668  "Constants used in SETUP_SMTx() are:"
D G "SMT_ENABLED" 1 1878 "0x80"
D G "SMT_DISABLED" 1 1879 "0"
D G "SMT_TMR_NO_ROLLOVER" 1 1881 "0x20"
D G "SMT_TMR_ROLLSOVER" 1 1882 "0"
D G "SMT_WIN_ACTIVE_LOW" 1 1884 "0x10"
D G "SMT_WIN_ACTIVE_HIGH" 1 1885 "0"
D G "SMT_SIG_ACTIVE_LOW" 1 1887 "0x08"
D G "SMT_SIG_ACTIVE_HIGH" 1 1888 "0"
D G "SMT_TMR_INCREMENTS_ON_FE" 1 1890 "0x04"
D G "SMT_TMR_INCREMENTS_ON_RE" 1 1891 "0"
D G "SMT_DIV_BY_8" 1 1893 "0x03"
D G "SMT_DIV_BY_4" 1 1894 "0x02"
D G "SMT_DIV_BY_2" 1 1895 "0x01"
D G "SMT_DIV_BY_1" 1 1896 "0"
D G "SMT_REPEAT_DATA_ACQ_MODE" 1 1898 "0x4000"
D G "SMT_SINGLE_DATA_ACQ_MODE" 1 1899 "0"
D G "SMT_MODE_WINDOWED_COUNTER" 1 1901 "0x0A00"
D G "SMT_MODE_GATED_COUNTER" 1 1902 "0x0900"
D G "SMT_MODE_COUNTER" 1 1903 "0x0800"
D G "SMT_MODE_CAPTURE" 1 1904 "0x0700"
D G "SMT_MODE_TIME_OF_FLIGHT" 1 1905 "0x0600"
D G "SMT_MODE_GATED_WINDOWED_MEASURE" 1 1906 "0x0500"
D G "SMT_MODE_WINDOWED_MEASURE" 1 1907 "0x0400"
D G "SMT_MODE_HIGH_LOW_TIME_MEASUREMENT" 1 1908 "0x0300"
D G "SMT_MODE_PERIOD_DUTY_CYCLE_ACQ" 1 1909 "0x0200"
D G "SMT_MODE_GATED_TIMER" 1 1910 "0x0100"
D G "SMT_MODE_TIMER" 1 1911 "0"
D G "SMT_CLK_CLKR" 1 1913 "0x080000"
D G "SMT_CLK_EXTOSC" 1 1914 "0x070000"
D G "SMT_CLK_SOSC" 1 1915 "0x060000"
D G "SMT_CLK_31250" 1 1916 "0x050000" "MFINTOSC/16"
D G "SMT_CLK_500000" 1 1917 "0x040000" "MFINTOSC"
D G "SMT_CLK_31000" 1 1918 "0x030000" "LFINTOSC"
D G "SMT_CLK_HFINTOSC" 1 1919 "0x020000"
D G "SMT_CLK_FOSC" 1 1920 "0x010000"
D G "SMT_CLK_FOSC_DIV_4" 1 1921 "0"
D G "SMT_WIN_INPUT_CLC8" 1 1923 "0x07800000"
D G "SMT_WIN_INPUT_CLC7" 1 1924 "0x06800000"
D G "SMT_WIN_INPUT_CLC6" 1 1925 "0x05800000"
D G "SMT_WIN_INPUT_CLC5" 1 1926 "0x04800000"
D G "SMT_WIN_INPUT_CLC4" 1 1927 "0x03800000"
D G "SMT_WIN_INPUT_CLC3" 1 1928 "0x02800000"
D G "SMT_WIN_INPUT_CLC2" 1 1929 "0x01800000"
D G "SMT_WIN_INPUT_CLC1" 1 1930 "0x00800000"
D G "SMT_WIN_INPUT_ZCD" 1 1931 "0x8F000000"
D G "SMT_WIN_INPUT_COMP2" 1 1932 "0x8E000000"
D G "SMT_WIN_INPUT_COMP1" 1 1933 "0x8D000000"
D G "SMT_WIN_INPUT_NCO3" 1 1934 "0x8C000000"
D G "SMT_WIN_INPUT_NCO2" 1 1935 "0x8B000000"
D G "SMT_WIN_INPUT_NCO1" 1 1936 "0x8A000000"
D G "SMT_WIN_INPUT_PWM3S1P2" 1 1937 "0x87000000"
D G "SMT_WIN_INPUT_PWM3S1P1" 1 1938 "0x86000000"
D G "SMT_WIN_INPUT_PWM2S1P2" 1 1939 "0x85000000"
D G "SMT_WIN_INPUT_PWM2S1P1" 1 1940 "0x84000000"
D G "SMT_WIN_INPUT_PWM1S1P2" 1 1941 "0x83000000"
D G "SMT_WIN_INPUT_PWM1S1P1" 1 1942 "0x82000000"
D G "SMT_WIN_INPUT_CCP3" 1 1943 "0x81000000"
D G "SMT_WIN_INPUT_CCP2" 1 1944 "0x80000000"
D G "SMT_WIN_INPUT_CCP1" 1 1945 "0x0F000000"
D G "SMT_WIN_INPUT_TMR6" 1 1946 "0x09000000"
D G "SMT_WIN_INPUT_TMR4" 1 1947 "0x08000000"
D G "SMT_WIN_INPUT_TMR2" 1 1948 "0x07000000"
D G "SMT_WIN_INPUT_TMR0" 1 1949 "0x06000000"
D G "SMT_WIN_INPUT_CLKR" 1 1950 "0x05000000"
D G "SMT_WIN_INPUT_EXTOSC" 1 1951 "0x04000000"
D G "SMT_WIN_INPUT_SOSC" 1 1952 "0x03000000"
D G "SMT_WIN_INPUT_MFINTOSC_DIV_16" 1 1953 "0x02000000"
D G "SMT_WIN_INPUT_LFINTOSC" 1 1954 "0x01000000"
D G "SMT_WIN_INPUT_SMTWINx" 1 1955 "0"
D G "SMT_SIG_INPUT_CLC8" 1 1957 "0x50400000"
D G "SMT_SIG_INPUT_CLC7" 1 1958 "0x40400000"
D G "SMT_SIG_INPUT_CLC6" 1 1959 "0x30400000"
D G "SMT_SIG_INPUT_CLC5" 1 1960 "0x20400000"
D G "SMT_SIG_INPUT_CLC4" 1 1961 "0x10400000"
D G "SMT_SIG_INPUT_CLC3" 1 1962 "0x00400000"
D G "SMT_SIG_INPUT_CLC2" 1 1963 "0x70300000"
D G "SMT_SIG_INPUT_CLC1" 1 1964 "0x60300000"
D G "SMT_SIG_INPUT_ZCD" 1 1965 "0x50300000"
D G "SMT_SIG_INPUT_COMP2" 1 1966 "0x40300000"
D G "SMT_SIG_INPUT_COMP1" 1 1967 "0x30300000"
D G "SMT_SIG_INPUT_NCO3" 1 1968 "0x20300000"
D G "SMT_SIG_INPUT_NCO2" 1 1969 "0x10300000"
D G "SMT_SIG_INPUT_NCO1" 1 1970 "0x00300000"
D G "SMT_SIG_INPUT_PWM3S1P2" 1 1971 "0x50200000"
D G "SMT_SIG_INPUT_PWM3S1P1" 1 1972 "0x40200000"
D G "SMT_SIG_INPUT_PWM2S1P2" 1 1973 "0x30200000"
D G "SMT_SIG_INPUT_PWM2S1P1" 1 1974 "0x20200000"
D G "SMT_SIG_INPUT_PWM1S1P2" 1 1975 "0x10200000"
D G "SMT_SIG_INPUT_PWM1S1P1" 1 1976 "0x00200000"
D G "SMT_SIG_INPUT_CCP3" 1 1977 "0x70100000"
D G "SMT_SIG_INPUT_CCP2" 1 1978 "0x60100000"
D G "SMT_SIG_INPUT_CCP1" 1 1979 "0x50100000"
D G "SMT_SIG_INPUT_TMR6" 1 1980 "0x70000000"
D G "SMT_SIG_INPUT_TMR5" 1 1981 "0x60000000"
D G "SMT_SIG_INPUT_TMR4" 1 1982 "0x50000000"
D G "SMT_SIG_INPUT_TMR3" 1 1983 "0x40000000"
D G "SMT_SIG_INPUT_TMR2" 1 1984 "0x30000000"
D G "SMT_SIG_INPUT_TMR1" 1 1985 "0x20000000"
D G "SMT_SIG_INPUT_TMR0" 1 1986 "0x10000000"
D G "SMT_SIG_INPUT_SMTSIGx" 1 1987 "0"
D G "SMT_START_NOW" 1 1989 "0x8000"
D G "SMT_CAPTURED_PERIOD_REG" 1 1992 "0"
D G "SMT_CAPTURED_PULSE_WIDTH_REG" 1 1993 "1"
D G "SMT_TMR_REG" 1 1995 "2"
D G "SMT_PERIOD_REG" 1 1996 "3"
D G "SMT_TIMER_IS_RUNNING" 1 1999 "0x04"
D G "SMT_WINDOW_IS_OPEN" 1 2000 "0x02"
D G "SMT_ACQ_IN_PROGRESS" 1 2001 "0x01"
c L "smt1_write" 1 1 3 "FUNCTION"
F N "setup_zcd" 1 2006 ""
V L "mode" 1 2006 "int8" `672 
F B "setup_zcd" 1 2006 "void(int8 mode)" `671 
F N "zcd_status" 1 2007 ""
F B "zcd_status" 1 2007 "int8()" `673  "Constants used in SETUP_ZCD() are:"
D G "ZCD_ENABLE" 1 2009 "0x80"
D G "ZCD_DISABLE" 1 2010 "0"
D G "ZCD_INVERTED" 1 2012 "0x10"
D G "ZCD_INT_L_TO_H" 1 2013 "0x02"
D G "ZCD_INT_H_TO_L" 1 2014 "0x01"
D G "ZCD_IS_SINKING" 1 2017 "0x20" "If ZCD_INVERTED is used the return"
D G "ZCD_IS_SOURCING" 1 2018 "0" "value will be reversed."
c L "zcd_status" 1 1 3 "FUNCTION"
F N "setup_dsm" 1 2023 ""
V L "enable" 1 2023 "int8" `675 
F B "setup_dsm" 1 2023 "void(int8 enable)" `674 
F N "setup_dsm" 1 2024 ""
V L "mode" 1 2024 "int16" `677 
V L "source" 1 2024 "int8" `678 
F B "setup_dsm" 1 2024 "void(int16 mode,int8 source)" `676 
F N "setup_dsm" 1 2025 ""
V L "mode" 1 2025 "int16" `680 
V L "source" 1 2025 "int8" `681 
V L "carrier" 1 2025 "int16" `682 
F B "setup_dsm" 1 2025 "void(int16 mode,int8 source,int16 carrier)" `679  "Constants used in SETUP_DSM() first parameter are:"
D G "DSM_ENABLED" 1 2027 "0x80"
D G "DSM_DISABLED" 1 2028 "0x00"
D G "DSM_OUTPUT_INVERTED" 1 2030 "0x10"
D G "DSM_SYNC_CARRIER_LOW" 1 2031 "0x0100"
D G "DSM_INVERT_CARRIER_LOW" 1 2032 "0x0200"
D G "DSM_SYNC_CARRIER_HIGH" 1 2033 "0x1000"
D G "DSM_INVERT_CARRIER_HIGH" 1 2034 "0x2000"
D G "DSM_SOURCE_MDSCR" 1 2036 "0x00"
D G "DSM_SOURCE_MANUAL" 1 2037 "0x01"
D G "DSM_SOURCE_CCP1" 1 2038 "0x02"
D G "DSM_SOURCE_CCP2" 1 2039 "0x03"
D G "DSM_SOURCE_CCP3" 1 2040 "0x04"
D G "DSM_SOURCE_PWM1S1P1" 1 2041 "0x05"
D G "DSM_SOURCE_PWM1S1P2" 1 2042 "0x06"
D G "DSM_SOURCE_PWM2S1P1" 1 2043 "0x07"
D G "DSM_SOURCE_PWM2S1P2" 1 2044 "0x08"
D G "DSM_SOURCE_PWM3S1P1" 1 2045 "0x09"
D G "DSM_SOURCE_PWM3S1P2" 1 2046 "0x0A"
D G "DSM_SOURCE_NCO1" 1 2047 "0x0D"
D G "DSM_SOURCE_NCO2" 1 2048 "0x0E"
D G "DSM_SOURCE_NCO3" 1 2049 "0x0F"
D G "DSM_SOURCE_C1OUT" 1 2050 "0x10"
D G "DSM_SOURCE_C2OUT" 1 2051 "0x11"
D G "DSM_SOURCE_CLC1" 1 2052 "0x12"
D G "DSM_SOURCE_CLC2" 1 2053 "0x13"
D G "DSM_SOURCE_CLC3" 1 2054 "0x14"
D G "DSM_SOURCE_CLC4" 1 2055 "0x15"
D G "DSM_SOURCE_CLC5" 1 2056 "0x16"
D G "DSM_SOURCE_CLC6" 1 2057 "0x17"
D G "DSM_SOURCE_CLC7" 1 2058 "0x18"
D G "DSM_SOURCE_CLC8" 1 2059 "0x19"
D G "DSM_SOURCE_U1TX" 1 2060 "0x1A"
D G "DSM_SOURCE_U2TX" 1 2061 "0x1B"
D G "DSM_SOURCE_U3TX" 1 2062 "0x1C"
D G "DSM_SOURCE_U4TX" 1 2063 "0x1D"
D G "DSM_SOURCE_U5TX" 1 2064 "0x1E"
D G "DSM_SOURCE_SDO1" 1 2065 "0x1F"
D G "DSM_SOURCE_SDO2" 1 2066 "0x20"
D G "DSM_CARRIER_LOW_MDCARL" 1 2068 "0x0000"
D G "DSM_CARRIER_LOW_SYSTEM_CLOCK" 1 2069 "0x0001"
D G "DSM_CARRIER_LOW_HFINTOSC" 1 2070 "0x0002"
D G "DSM_CARRIER_LOW_EXTOSC" 1 2071 "0x0003"
D G "DSM_CARRIER_LOW_CLKR" 1 2072 "0x0004"
D G "DSM_CARRIER_LOW_CCP1" 1 2073 "0x0005"
D G "DSM_CARRIER_LOW_CCP2" 1 2074 "0x0006"
D G "DSM_CARRIER_LOW_CCP3" 1 2075 "0x0007"
D G "DSM_CARRIER_LOW_PWM1S1P2" 1 2076 "0x0008"
D G "DSM_CARRIER_LOW_PWM2S1P2" 1 2077 "0x0009"
D G "DSM_CARRIER_LOW_PWM3S1P2" 1 2078 "0x000A"
D G "DSM_CARRIER_LOW_NCO1" 1 2079 "0x000C"
D G "DSM_CARRIER_LOW_NCO2" 1 2080 "0x000D"
D G "DSM_CARRIER_LOW_NCO3" 1 2081 "0x000E"
D G "DSM_CARRIER_LOW_CLC1" 1 2082 "0x000F"
D G "DSM_CARRIER_LOW_CLC2" 1 2083 "0x0010"
D G "DSM_CARRIER_LOW_CLC3" 1 2084 "0x0011"
D G "DSM_CARRIER_LOW_CLC4" 1 2085 "0x0012"
D G "DSM_CARRIER_LOW_CLC5" 1 2086 "0x0013"
D G "DSM_CARRIER_LOW_CLC6" 1 2087 "0x0014"
D G "DSM_CARRIER_LOW_CLC7" 1 2088 "0x0015"
D G "DSM_CARRIER_LOW_CLC8" 1 2089 "0x0016"
D G "DSM_CARRIER_HIGH_MDCARH" 1 2090 "0x0000"
D G "DSM_CARRIER_HIGH_SYSTEM_CLOCK" 1 2091 "0x0100"
D G "DSM_CARRIER_HIGH_HFINTOSC" 1 2092 "0x0200"
D G "DSM_CARRIER_HIGH_EXTOSC" 1 2093 "0x0300"
D G "DSM_CARRIER_HIGH_CLKR" 1 2094 "0x0400"
D G "DSM_CARRIER_HIGH_CCP1" 1 2095 "0x0500"
D G "DSM_CARRIER_HIGH_CCP2" 1 2096 "0x0600"
D G "DSM_CARRIER_HIGH_CCP3" 1 2097 "0x0700"
D G "DSM_CARRIER_HIGH_PWM1S1P1" 1 2098 "0x0800"
D G "DSM_CARRIER_HIGH_PWM2S1P1" 1 2099 "0x0900"
D G "DSM_CARRIER_HIGH_PWM3S1P1" 1 2100 "0x0A00"
D G "DSM_CARRIER_HIGH_NCO1" 1 2101 "0x0C00"
D G "DSM_CARRIER_HIGH_NCO2" 1 2102 "0x0D00"
D G "DSM_CARRIER_HIGH_NCO3" 1 2103 "0x0E00"
D G "DSM_CARRIER_HIGH_CLC1" 1 2104 "0x0F00"
D G "DSM_CARRIER_HIGH_CLC2" 1 2105 "0x1000"
D G "DSM_CARRIER_HIGH_CLC3" 1 2106 "0x1100"
D G "DSM_CARRIER_HIGH_CLC4" 1 2107 "0x1200"
D G "DSM_CARRIER_HIGH_CLC5" 1 2108 "0x1300"
D G "DSM_CARRIER_HIGH_CLC6" 1 2109 "0x1400"
D G "DSM_CARRIER_HIGH_CLC7" 1 2110 "0x1500"
D G "DSM_CARRIER_HIGH_CLC8" 1 2111 "0x1600"
c L "setup_dsm" 1 1 2 "FUNCTION"
F N "setup_oscillator" 1 2119 ""
V L "mode" 1 2119 "int32" `686 
F B "setup_oscillator" 1 2119 "int16(int32 mode)" `685 
F N "setup_oscillator" 1 2120 ""
V L "mode" 1 2120 "int32" `688 
V L "tune" 1 2120 "sint8" `689 
F B "setup_oscillator" 1 2120 "int16(int32 mode,sint8 tune)" `687 
F N "setup_act" 1 2121 ""
V L "mode" 1 2121 "int8" `691 
F B "setup_act" 1 2121 "void(int8 mode)" `690 
F N "act_status" 1 2122 ""
F B "act_status" 1 2122 "int8()" `692  "Constants used in setup_oscillator() are:"
D G "OSC_HFINTRC_1MHZ" 1 2125 "0x00000060"
D G "OSC_HFINTRC_2MHZ" 1 2126 "0x00000160"
D G "OSC_HFINTRC_4MHZ" 1 2127 "0x00000260"
D G "OSC_HFINTRC_8MHZ" 1 2128 "0x00000360"
D G "OSC_HFINTRC_12MHZ" 1 2129 "0x00000460"
D G "OSC_HFINTRC_16MHZ" 1 2130 "0x00000560"
D G "OSC_HFINTRC_32MHZ" 1 2131 "0x00000660"
D G "OSC_HFINTRC_48MHZ" 1 2132 "0x00000760"
D G "OSC_HFINTRC_64MHZ" 1 2133 "0x00000860"
D G "OSC_EXTOSC_PLL" 1 2134 "0x00000020"
D G "OSC_SOSC" 1 2135 "0x00000040"
D G "OSC_LFINTRC" 1 2136 "0x00000050"
D G "OSC_EXTOSC" 1 2137 "0x00000070"
D G "OSC_CLK_DIV_BY_1" 1 2139 "0x00000000"
D G "OSC_CLK_DIV_BY_2" 1 2140 "0x00000001"
D G "OSC_CLK_DIV_BY_4" 1 2141 "0x00000002"
D G "OSC_CLK_DIV_BY_8" 1 2142 "0x00000003"
D G "OSC_CLK_DIV_BY_16" 1 2143 "0x00000004"
D G "OSC_CLK_DIV_BY_32" 1 2144 "0x00000005"
D G "OSC_CLK_DIV_BY_64" 1 2145 "0x00000006"
D G "OSC_CLK_DIV_BY_128" 1 2146 "0x00000007"
D G "OSC_CLK_DIV_BY_256" 1 2147 "0x00000008"
D G "OSC_CLK_DIV_BY_512" 1 2148 "0x00000009"
D G "OSC_SOSC_PWR_LOW" 1 2150 "0x00000000"
D G "OSC_SOSC_PWR_HIGH" 1 2151 "0x00400000"
D G "OSC_CLOCK_SWITCH_HOLD" 1 2153 "0x00800000"
D G "OSC_PLL_ENABLED" 1 2154 "0x01000000"
D G "OSC_ADOSC_ENABLED" 1 2155 "0x04000000"
D G "OSC_SOSC_ENABLED" 1 2156 "0x08000000"
D G "OSC_LFINTRC_ENABLED" 1 2157 "0x10000000"
D G "OSC_MFINTRC_ENABLED" 1 2158 "0x20000000"
D G "OSC_HFINTRC_ENABLED" 1 2159 "0x40000000"
D G "OSC_EXTOSC_ENABLED" 1 2160 "0x80000000"
D G "OSC_PLL_READY" 1 2164 "0x0001"
D G "OSC_ADCRC_READY" 1 2165 "0x0004"
D G "OSC_SOSC_READY" 1 2166 "0x0008"
D G "OSC_LFINTRC_READY" 1 2167 "0x0010"
D G "OSC_MFINTRC_READY" 1 2168 "0x0020"
D G "OSC_HFINTRC_READY" 1 2169 "0x0040"
D G "OSC_EXTOSC_READY" 1 2170 "0x0080"
D G "OSC_CLOCK_SWITCH_IN_PROGRESS" 1 2171 "0x0800"
D G "OSC_CLOCK_SWITCH_COMPLETE" 1 2172 "0x1000"
D G "ACT_DISABLED" 1 2175 "0"
D G "ACT_ENABLED" 1 2176 "0x80"
D G "ACT_CLOCK_LOCKED" 1 2178 "0x08" "internal oscillator is within +/-1%"
D G "ACT_OUT_OF_RANGE" 1 2179 "0x02" "oscillator frequency is outside of the OSCTUNE range"
c L "act_status" 1 1 4 "FUNCTION"
F N "setup_adc" 1 2188 ""
V L "mode" 1 2188 "int32" `695 
F B "setup_adc" 1 2188 "void(int32 mode)" `694 
F N "setup_adc" 1 2189 ""
V L "mode" 1 2189 "int32" `697 
V L "ADCRS" 1 2189 "int8" `698 
V L "ADRPT" 1 2189 "int8" `699 
F B "setup_adc" 1 2189 "void(int32 mode,int8 ADCRS,int8 ADRPT)" `696 
F N "set_adc_trigger" 1 2190 ""
V L "trigger" 1 2190 "int8" `701 
F B "set_adc_trigger" 1 2190 "void(int8 trigger)" `700 
F N "read_adc" 1 2191 ""
F B "read_adc" 1 2191 "int8()" `702 
F N "read_adc" 1 2192 ""
V L "mode" 1 2192 "int8" `704 
F B "read_adc" 1 2192 "int8(int8 mode)" `703 
F N "read_adc" 1 2193 ""
f G "read_adc" 1 2193 "int16()" `705 
F N "read_adc" 1 2194 ""
V L "mode" 1 2194 "int8" `706 
f G "read_adc" 1 2194 "int16(int8 mode)" `705 
F N "adc_done" 1 2195 ""
F B "adc_done" 1 2195 "int8(int8 mode)" `705 
F N "adc_read" 1 2196 ""
V L "which" 1 2196 "int8" `707 
F B "adc_read" 1 2196 "int8(int8 which)" `706 
F N "adc_read" 1 2197 ""
V L "which" 1 2197 "int8" `709 
f G "adc_read" 1 2197 "int16(int8 which)" `708 
F N "adc_write" 1 2198 ""
V L "which" 1 2198 "int8" `709 
V L "value" 1 2198 "int8" `710 
F B "adc_write" 1 2198 "void(int8 which,int8 value)" `708 
F N "adc_write" 1 2199 ""
V L "which" 1 2199 "int8" `712 
V L "value" 1 2199 "int16" `713 
F B "adc_write" 1 2199 "void(int8 which,int16 value)" `711 
F N "adc_status" 1 2200 ""
F B "adc_status" 1 2200 "int8()" `714  "Constants used for SETUP_ADC() first parameter are:"
D G "ADC_LEGACY_MODE" 1 2202 "0"
D G "ADC_ACCUMULATE_MODE" 1 2203 "0x00010000"
D G "ADC_AVERAGE_MODE" 1 2204 "0x00020000"
D G "ADC_BURST_AVERAGE_MODE" 1 2205 "0x00030000"
D G "ADC_LOW_PASS_FILTER_MODE" 1 2206 "0x00040000"
D G "ADC_OFF" 1 2207 "0x80000000"
D G "ADC_CLOCK_DIV_2" 1 2214 "0"
D G "ADC_CLOCK_DIV_4" 1 2215 "0x00000001"
D G "ADC_CLOCK_DIV_8" 1 2216 "0x00000003"
D G "ADC_CLOCK_DIV_16" 1 2217 "0x00000007"
D G "ADC_CLOCK_DIV_32" 1 2218 "0x0000000F"
D G "ADC_CLOCK_DIV_64" 1 2219 "0x0000001F"
D G "ADC_CLOCK_DIV_128" 1 2220 "0x0000003F"
D G "ADC_CLOCK_INTERNAL" 1 2221 "0x00000080"
D G "ADC_TAD_MUL_0" 1 2228 "0x0000FF00"
D G "ADC_TAD_MUL_2" 1 2229 "0x0000FD00"
D G "ADC_TAD_MUL_4" 1 2230 "0x0000FB00"
D G "ADC_TAD_MUL_8" 1 2231 "0x0000F700"
D G "ADC_TAD_MUL_16" 1 2232 "0x0000EF00"
D G "ADC_TAD_MUL_32" 1 2233 "0x0000DF00"
D G "ADC_TAD_MUL_64" 1 2234 "0x0000BF00"
D G "ADC_TAD_MUL_128" 1 2235 "0x00007F00"
D G "ADC_TAD_MUL_255" 1 2236 "0"
D G "ADC_ADFLTR_TO_ADPREV_AT_START" 1 2238 "0"
D G "ADC_ADRES_TO_ADPREV_AT_START" 1 2239 "0x00800000"
D G "ADC_THRESHOLD_INT_DISABLED" 1 2241 "0"
D G "ADC_THRESHOLD_INT_ADERR_LT_ADLTH" 1 2242 "0x01000000"
D G "ADC_THRESHOLD_INT_ADERR_GTE_ADLTH" 1 2243 "0x02000000"
D G "ADC_THRESHOLD_INT_ADERR_GT_ADLTH_AND_LT_ADUTH" 1 2244 "0x03000000"
D G "ADC_THRESHOLD_INT_ADERR_LT_ATLTH_OR_GT_ADUTH" 1 2245 "0x04000000"
D G "ADC_THRESHOLD_INT_ADERR_LTE_ADUTH" 1 2246 "0x05000000"
D G "ADC_THRESHOLD_INT_ADERR_GT_ADUTH" 1 2247 "0x06000000"
D G "ADC_THRESHOLD_INT_END_OF_CALCULATION" 1 2248 "0x07000000"
D G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADPREV" 1 2250 "0"
D G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADSTPT" 1 2251 "0x10000000"
D G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADFLTR" 1 2252 "0x20000000"
D G "ADC_ERR_CALC_MODE_ADPREV_MINUS_ADFLTR" 1 2253 "0x40000000"
D G "ADC_ERR_CALC_MODE_ADFLTR_MINUS_ADSTPT" 1 2254 "0x50000000"
D G "ADC_CONTINUOUS_OPERATION_ENABLED" 1 2256 "0x00000040"
D G "ADC_STOP_WHEN_THRESHOLD_CONDITIONS_MET" 1 2257 "0x08000000" "If Continuous Operation is enabled"
D G "ADC_RESULT" 1 2272 "0"
D G "ADC_PREV_RESULT" 1 2273 "1"
D G "ADC_ACCUMULATOR" 1 2274 "2"
D G "ADC_FILTER" 1 2275 "3"
D G "ADC_ERROR" 1 2276 "4"
D G "ADC_COUNT" 1 2277 "5"
D G "ADC_REPEAT" 1 2278 "6"
D G "ADC_SET_POINT" 1 2279 "7"
D G "ADC_LOWER_THRESHOLD" 1 2280 "8"
D G "ADC_UPPER_THRESHOLD" 1 2281 "9"
D G "ADC_TRIGGER_DISABLED" 1 2284 "0" "External trigger disabled, use read_adc() to start conversion"
D G "ADC_TRIGGER_ADACT_PIN" 1 2285 "0x01"
D G "ADC_TRIGGER_TIMER0" 1 2286 "0x02"
D G "ADC_TRIGGER_TIMER1" 1 2287 "0x03"
D G "ADC_TRIGGER_TIMER2" 1 2288 "0x04"
D G "ADC_TRIGGER_TIMER3" 1 2289 "0x05"
D G "ADC_TRIGGER_TIMER4" 1 2290 "0x06"
D G "ADC_TRIGGER_TIMER5" 1 2291 "0x07"
D G "ADC_TRIGGER_TIMER6" 1 2292 "0x08"
D G "ADC_TRIGGER_SMT1" 1 2293 "0x0E"
D G "ADC_TRIGGER_CCP1" 1 2294 "0x0F"
D G "ADC_TRIGGER_CCP2" 1 2295 "0x10"
D G "ADC_TRIGGER_CCP3" 1 2296 "0x11"
D G "ADC_TRIGGER_PWM1S1P1" 1 2297 "0x12"
D G "ADC_TRIGGER_PWM1S1P2" 1 2298 "0x13"
D G "ADC_TRIGGER_PWM2S1P1" 1 2299 "0x14"
D G "ADC_TRIGGER_PWM2S1P2" 1 2300 "0x15"
D G "ADC_TRIGGER_PWM3S1P1" 1 2301 "0x16"
D G "ADC_TRIGGER_PWM3S1P2" 1 2302 "0x17"
D G "ADC_TRIGGER_NCO1" 1 2303 "0x1A"
D G "ADC_TRIGGER_NCO2" 1 2304 "0x1B"
D G "ADC_TRIGGER_NCO3" 1 2305 "0x1C"
D G "ADC_TRIGGER_COMP1" 1 2306 "0x1D"
D G "ADC_TRIGGER_COMP2" 1 2307 "0x1E"
D G "ADC_TRIGGER_IOC" 1 2308 "0x1F"
D G "ADC_TRIGGER_CLC1" 1 2309 "0x20"
D G "ADC_TRIGGER_CLC2" 1 2310 "0x21"
D G "ADC_TRIGGER_CLC3" 1 2311 "0x22"
D G "ADC_TRIGGER_CLC4" 1 2312 "0x23"
D G "ADC_TRIGGER_CLC5" 1 2313 "0x24"
D G "ADC_TRIGGER_CLC6" 1 2314 "0x25"
D G "ADC_TRIGGER_CLC7" 1 2315 "0x26"
D G "ADC_TRIGGER_CLC8" 1 2316 "0x27"
D G "ADC_TRIGGER_ADERR" 1 2317 "0x3D" "Read of ADERR register"
D G "ADC_TRIGGER_ADRESH" 1 2318 "0x3E" "Read of ADRESH register"
D G "ADC_TRIGGER_ADPCH" 1 2319 "0x3F" "Read of ADPCH register"
D G "ADC_OVERFLOWED" 1 2322 "0x80"
D G "ADC_GT_UPPER_THRESHOLD" 1 2323 "0x40"
D G "ADC_LT_LOWER_THRESHOLD" 1 2324 "0x20"
D G "ADC_UPDATING" 1 2325 "0x10"
c L "adc_status" 1 1 3 "FUNCTION"
c L "adc_status" 1 1 1 "FUNCTION"
F N "setup_adc_ports" 1 2333 ""
V L "pins" 1 2333 "int32" `717 
F B "setup_adc_ports" 1 2333 "void(int32 pins)" `716 
F N "setup_adc_ports" 1 2334 ""
V L "pins" 1 2334 "int32" `719 
V L "p2_pins" 1 2334 "int32" `720 
F B "setup_adc_ports" 1 2334 "void(int32 pins,int32 p2_pins)" `718 
F N "setup_adc_ports" 1 2335 ""
V L "pins" 1 2335 "int32" `722 
V L "p2_pins" 1 2335 "int32" `723 
V L "reference" 1 2335 "int32" `724 
F B "setup_adc_ports" 1 2335 "void(int32 pins,int32 p2_pins,int32 reference)" `721 
F N "set_analog_pins" 1 2336 ""
V L "pin" 1 2336 "int8" `726 
F B "set_analog_pins" 1 2336 "void(int8 pin,*int8 _VA_LIST)" `725 
F N "setup_adc_reference" 1 2337 ""
V L "reference" 1 2337 "int32" `729 
F B "setup_adc_reference" 1 2337 "void(int32 reference)" `728 
F N "set_adc_channel" 1 2338 ""
V L "channel" 1 2338 "int8" `731 
F B "set_adc_channel" 1 2338 "void(int8 channel)" `730  "Constants used in SETUP_ADC_PORTS() are:"
D G "sAN0" 1 2342 "0x01000000" "| A0"
D G "sAN1" 1 2343 "0x02000000" "| A1"
D G "sAN2" 1 2344 "0x04000000" "| A2"
D G "sAN3" 1 2345 "0x08000000" "| A3"
D G "sAN4" 1 2346 "0x10000000" "| A4"
D G "sAN5" 1 2347 "0x20000000" "| A5"
D G "sAN6" 1 2348 "0x40000000" "| A6"
D G "sAN7" 1 2349 "0x80000000" "| A7"
D G "sAN8" 1 2350 "0x00010000" "| B0"
D G "sAN9" 1 2351 "0x00020000" "| B1"
D G "sAN10" 1 2352 "0x00040000" "| B2"
D G "sAN11" 1 2353 "0x00080000" "| B3"
D G "sAN12" 1 2354 "0x00100000" "| B4"
D G "sAN13" 1 2355 "0x00200000" "| B5"
D G "sAN14" 1 2356 "0x00400000" "| B6"
D G "sAN15" 1 2357 "0x00800000" "| B7"
D G "sAN16" 1 2358 "0x00000100" "| C0"
D G "sAN17" 1 2359 "0x00000200" "| C1"
D G "sAN18" 1 2360 "0x00000400" "| C2"
D G "sAN19" 1 2361 "0x00000800" "| C3"
D G "sAN20" 1 2362 "0x00001000" "| C4"
D G "sAN21" 1 2363 "0x00002000" "| C5"
D G "sAN22" 1 2364 "0x00004000" "| C6"
D G "sAN23" 1 2365 "0x00008000" "| C7"
D G "sAN24" 1 2366 "0x00000001" "| D0"
D G "sAN25" 1 2367 "0x00000002" "| D1"
D G "sAN26" 1 2368 "0x00000004" "| D2"
D G "sAN27" 1 2369 "0x00000008" "| D3"
D G "sAN28" 1 2370 "0x00000010" "| D4"
D G "sAN29" 1 2371 "0x00000020" "| D5"
D G "sAN30" 1 2372 "0x00000040" "| D6"
D G "sAN31" 1 2373 "0x00000080" "| D7"
D G "NO_ANALOGS" 1 2374 "0" "None"
D G "ALL_ANALOG" 1 2375 "0xFFFFFFFF" "A0 A1 A2 A3 A4 A5 A6 A7 B0 B1 B2 B3 B4 B5 B6 B7 C0 C1 C2 C3 C4 C5 C6 C7 D0 D1 D2 D3 D4 D5 D6 D7"
D G "sAN32" 1 2378 "0x00000100" "| E0"
D G "sAN33" 1 2379 "0x00000200" "| E1"
D G "sAN34" 1 2380 "0x00000400" "| E2"
D G "NO_ANALOGS_P2" 1 2381 "0" "None"
D G "ALL_ANALOG_P2" 1 2382 "0x00000700" "E0 E1 E2"
D G "VSS_VDD" 1 2385 "0x00000000" "| Range 0-Vdd"
D G "VSS_VREF" 1 2386 "0x00000002" "| Range 0-VrefH"
D G "VSS_FVR" 1 2387 "0x00000003" "| Range 0-Fixed Voltage Reference"
D G "VREF_VDD" 1 2388 "0x00000010" "| Range VrefL-Vdd"
D G "VREF_VREF" 1 2389 "0x00000012" "| Range VrefL-VrefH"
D G "VREF_FVR" 1 2390 "0x00000013" "| Range VrefL-Fixed Voltage Reference"
D G "AVSS_CHANNEL" 1 2394 "0x3B"
D G "TEMPERATURE_INDICATOR" 1 2395 "0x3C"
D G "DAC_CHANNEL" 1 2396 "0x3D"
D G "FVR1_CHANNEL" 1 2397 "0x3E"
D G "FVR2_CHANNEL" 1 2398 "0x3F"
D G "ADC_START_AND_READ" 1 2401 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 1 2402 "1"
D G "ADC_READ_ONLY" 1 2403 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
F N "abs" 1 2409 ""
V L "x" 1 2409 "sint8" `733 
F B "abs" 1 2409 "sint8(sint8 x)" `732 
F N "abs" 1 2410 ""
V L "x" 1 2410 "sint16" `735 
F B "abs" 1 2410 "sint16(sint16 x)" `734 
F N "abs" 1 2411 ""
V L "x" 1 2411 "sint32" `737 
F B "abs" 1 2411 "sint32(sint32 x)" `736 
F N "abs" 1 2412 ""
V L "x" 1 2412 "float" `739 
F B "abs" 1 2412 "float(float x)" `738 
F N "_mul" 1 2413 ""
V L "??65535" 1 2413 "int8" `741 
V L "??65535" 1 2413 "int8" `742 
F B "_mul" 1 2413 "int16(int8 ,int8 )" `740 
F N "_mul" 1 2414 ""
V L "??65535" 1 2414 "sint8" `744 
V L "??65535" 1 2414 "sint8" `745 
F B "_mul" 1 2414 "sint16(sint8 ,sint8 )" `743 
F N "_mul" 1 2415 ""
V L "??65535" 1 2415 "int16" `747 
V L "??65535" 1 2415 "int16" `748 
F B "_mul" 1 2415 "int32(int16 ,int16 )" `746 
F N "_mul" 1 2416 ""
V L "??65535" 1 2416 "sint16" `750 
V L "??65535" 1 2416 "sint16" `751 
F B "_mul" 1 2416 "sint32(sint16 ,sint16 )" `749  "Memory Manipulation Prototypes:"
F N "read_bank" 1 2419 ""
V L "bank" 1 2419 "int8" `753 
V L "offset" 1 2419 "int8" `754 
F B "read_bank" 1 2419 "int8(int8 bank,int8 offset)" `752 
F N "write_bank" 1 2420 ""
V L "bank" 1 2420 "int8" `756 
V L "offset" 1 2420 "int8" `757 
V L "value" 1 2420 "int8" `758 
F B "write_bank" 1 2420 "void(int8 bank,int8 offset,int8 value)" `755 
F N "strcpy" 1 2421 ""
V L "dest" 1 2421 "*int8" `760 
V L "src" 1 2421 "*int8" `761 
F B "strcpy" 1 2421 "void(*int8 dest,*int8 src)" `759 
F N "memset" 1 2422 ""
V L "destination" 1 2422 "*int8" `763 
V L "value" 1 2422 "int8" `764 
V L "num" 1 2422 "int16" `765 
F B "memset" 1 2422 "void(*int8 destination,int8 value,int16 num)" `762 
F N "memcpy" 1 2423 ""
V L "destination" 1 2423 "*int8" `767 
V L "source" 1 2423 "*int8" `768 
V L "num" 1 2423 "int16" `769 
F B "memcpy" 1 2423 "void(*int8 destination,*int8 source,int16 num)" `766  "String Prototypes:"
F N "toupper" 1 2426 ""
V L "cvalue" 1 2426 "int8" `771 
F B "toupper" 1 2426 "int8(int8 cvalue)" `770 
F N "tolower" 1 2427 ""
V L "cvalue" 1 2427 "int8" `773 
F B "tolower" 1 2427 "int8(int8 cvalue)" `772 
F N "sprintf" 1 2428 ""
V L "string" 1 2428 "*int8" `775 
V L "cstring" 1 2428 "*int8" `776 
F B "sprintf" 1 2428 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `774  "Data Manipulators Prototypes:"
F N "shift_left" 1 2431 ""
V L "address" 1 2431 "*int8" `779 
V L "bytes" 1 2431 "int8" `780 
V L "value" 1 2431 "int8" `781 
F B "shift_left" 1 2431 "int8(*int8 address,int8 bytes,int8 value)" `778 
F N "shift_right" 1 2432 ""
V L "address" 1 2432 "*int8" `783 
V L "bytes" 1 2432 "int8" `784 
V L "value" 1 2432 "int8" `785 
F B "shift_right" 1 2432 "int8(*int8 address,int8 bytes,int8 value)" `782 
F N "rotate_left" 1 2433 ""
V L "address" 1 2433 "*int8" `787 
V L "bytes" 1 2433 "int8" `788 
F B "rotate_left" 1 2433 "void(*int8 address,int8 bytes)" `786 
F N "rotate_right" 1 2434 ""
V L "address" 1 2434 "*int8" `790 
V L "bytes" 1 2434 "int8" `791 
F B "rotate_right" 1 2434 "void(*int8 address,int8 bytes)" `789 
F N "swap" 1 2435 ""
V L "value" 1 2435 "int8" `793 
F B "swap" 1 2435 "void(int8 value)" `792 
F N "make8" 1 2436 ""
V L "var" 1 2436 "int16" `795 
V L "offset" 1 2436 "int8" `796 
F B "make8" 1 2436 "int8(int16 var,int8 offset)" `794 
F N "make8" 1 2437 ""
V L "var" 1 2437 "int32" `798 
V L "offset" 1 2437 "int8" `799 
F B "make8" 1 2437 "int8(int32 var,int8 offset)" `797 
F N "make16" 1 2438 ""
V L "varhigh" 1 2438 "int8" `801 
V L "varlow" 1 2438 "int8" `802 
F B "make16" 1 2438 "int16(int8 varhigh,int8 varlow)" `800 
F N "make32" 1 2439 ""
V L "var1" 1 2439 "int16" `804 
F B "make32" 1 2439 "int32(int16 var1)" `803 
F N "make32" 1 2440 ""
V L "var1" 1 2440 "int16" `806 
V L "var2" 1 2440 "int16" `807 
F B "make32" 1 2440 "int32(int16 var1,int16 var2)" `805 
F N "make32" 1 2441 ""
V L "var1" 1 2441 "int16" `809 
V L "var2" 1 2441 "int8" `810 
F B "make32" 1 2441 "int32(int16 var1,int8 var2)" `808 
F N "make32" 1 2442 ""
V L "var1" 1 2442 "int16" `812 
V L "var2" 1 2442 "int8" `813 
V L "var3" 1 2442 "int8" `814 
F B "make32" 1 2442 "int32(int16 var1,int8 var2,int8 var3)" `811 
F N "make32" 1 2443 ""
V L "var1" 1 2443 "int8" `816 
F B "make32" 1 2443 "int32(int8 var1)" `815 
F N "make32" 1 2444 ""
V L "var1" 1 2444 "int8" `818 
V L "var2" 1 2444 "int8" `819 
F B "make32" 1 2444 "int32(int8 var1,int8 var2)" `817 
F N "make32" 1 2445 ""
V L "var1" 1 2445 "int8" `821 
V L "var2" 1 2445 "int8" `822 
V L "var3" 1 2445 "int8" `823 
F B "make32" 1 2445 "int32(int8 var1,int8 var2,int8 var3)" `820 
F N "make32" 1 2446 ""
V L "var1" 1 2446 "int8" `825 
V L "var2" 1 2446 "int8" `826 
V L "var3" 1 2446 "int8" `827 
V L "var4" 1 2446 "int8" `828 
F B "make32" 1 2446 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `824 
F N "make32" 1 2447 ""
V L "var1" 1 2447 "int8" `830 
V L "var2" 1 2447 "int16" `831 
F B "make32" 1 2447 "int32(int8 var1,int16 var2)" `829 
F N "make32" 1 2448 ""
V L "var1" 1 2448 "int8" `833 
V L "var2" 1 2448 "int16" `834 
V L "var3" 1 2448 "int8" `835 
F B "make32" 1 2448 "int32(int8 var1,int16 var2,int8 var3)" `832 
F N "make32" 1 2449 ""
V L "var1" 1 2449 "int8" `837 
V L "var2" 1 2449 "int8" `838 
V L "var3" 1 2449 "int16" `839 
F B "make32" 1 2449 "int32(int8 var1,int8 var2,int16 var3)" `836 
F N "bit_set" 1 2450 ""
V L "var" 1 2450 "int8" `841 
V L "bit" 1 2450 "int8" `842 
F B "bit_set" 1 2450 "void(int8 var,int8 bit)" `840 
F N "bit_set" 1 2451 ""
V L "var" 1 2451 "int16" `844 
V L "bit" 1 2451 "int8" `845 
F B "bit_set" 1 2451 "void(int16 var,int8 bit)" `843 
F N "bit_set" 1 2452 ""
V L "var" 1 2452 "int32" `847 
V L "bit" 1 2452 "int8" `848 
F B "bit_set" 1 2452 "void(int32 var,int8 bit)" `846 
F N "bit_clear" 1 2453 ""
V L "var" 1 2453 "int8" `850 
V L "bit" 1 2453 "int8" `851 
F B "bit_clear" 1 2453 "void(int8 var,int8 bit)" `849 
F N "bit_clear" 1 2454 ""
V L "var" 1 2454 "int16" `853 
V L "bit" 1 2454 "int8" `854 
F B "bit_clear" 1 2454 "void(int16 var,int8 bit)" `852 
F N "bit_clear" 1 2455 ""
V L "var" 1 2455 "int32" `856 
V L "bit" 1 2455 "int8" `857 
F B "bit_clear" 1 2455 "void(int32 var,int8 bit)" `855 
F N "bit_test" 1 2456 ""
V L "var" 1 2456 "int8" `859 
V L "bit" 1 2456 "int8" `860 
F B "bit_test" 1 2456 "int8(int8 var,int8 bit)" `858 
F N "bit_test" 1 2457 ""
V L "var" 1 2457 "int16" `862 
V L "bit" 1 2457 "int8" `863 
F B "bit_test" 1 2457 "int8(int16 var,int8 bit)" `861 
F N "bit_test" 1 2458 ""
V L "var" 1 2458 "int32" `865 
V L "bit" 1 2458 "int8" `866 
F B "bit_test" 1 2458 "int8(int32 var,int8 bit)" `864  "#use delay() Prototypes:"
F N "delay_cycles" 1 2461 ""
V L "count" 1 2461 "int8" `868 
F B "delay_cycles" 1 2461 "void(int8 count)" `867 
F N "delay_ms" 1 2462 ""
V L "time" 1 2462 "int16" `870 
F B "delay_ms" 1 2462 "void(int16 time)" `869 
F N "delay_us" 1 2463 ""
V L "time" 1 2463 "int16" `872 
F B "delay_us" 1 2463 "void(int16 time)" `871  "#use rs232() Prototypes:"
F N "putchar" 1 2466 ""
V L "cdata" 1 2466 "int8" `874 
F B "putchar" 1 2466 "void(int8 cdata)" `873 
F N "putchar" 1 2467 ""
V L "cdata" 1 2467 "int8" `876 
V L "stream" 1 2467 "int8" `877 
F B "putchar" 1 2467 "void(int8 cdata,int8 stream)" `875 
F N "puts" 1 2468 ""
V L "string" 1 2468 "*int8" `879 
F B "puts" 1 2468 "void(*int8 string)" `878 
F N "puts" 1 2469 ""
V L "string" 1 2469 "*int8" `881 
V L "stream" 1 2469 "int8" `882 
F B "puts" 1 2469 "void(*int8 string,int8 stream)" `880 
F N "getch" 1 2470 ""
F B "getch" 1 2470 "int8()" `883 
F N "getch" 1 2471 ""
V L "stream" 1 2471 "int8" `885 
F B "getch" 1 2471 "int8(int8 stream)" `884 
F N "gets" 1 2472 ""
V L "string" 1 2472 "*int8" `887 
F B "gets" 1 2472 "void(*int8 string)" `886 
F N "gets" 1 2473 ""
V L "string" 1 2473 "*int8" `889 
V L "stream" 1 2473 "int8" `890 
F B "gets" 1 2473 "void(*int8 string,int8 stream)" `888 
F N "kbhit" 1 2474 ""
F B "kbhit" 1 2474 "int8()" `891 
F N "kbhit" 1 2475 ""
V L "stream" 1 2475 "int8" `893 
F B "kbhit" 1 2475 "int8(int8 stream)" `892 
F N "printf" 1 2476 ""
V L "string" 1 2476 "*int8" `895 
F B "printf" 1 2476 "void(*int8 string,*int8 _VA_LIST)" `894 
F N "fprintf" 1 2477 ""
V L "stream" 1 2477 "int8" `898 
V L "string" 1 2477 "*int8" `899 
F B "fprintf" 1 2477 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `897 
F N "putc_send" 1 2478 ""
F B "putc_send" 1 2478 "void()" `901 
F N "fputc_send" 1 2479 ""
V L "stream" 1 2479 "int8" `903 
F B "fputc_send" 1 2479 "void(int8 stream)" `902 
F N "rcv_buffer_full" 1 2480 ""
F B "rcv_buffer_full" 1 2480 "int8()" `904 
F N "rcv_buffer_full" 1 2481 ""
V L "stream" 1 2481 "int8" `906 
F B "rcv_buffer_full" 1 2481 "int8(int8 stream)" `905 
F N "rcv_buffer_bytes" 1 2482 ""
F B "rcv_buffer_bytes" 1 2482 "int16()" `907 
F N "rcv_buffer_bytes" 1 2483 ""
V L "stream" 1 2483 "int8" `909 
F B "rcv_buffer_bytes" 1 2483 "int16(int8 stream)" `908 
F N "tx_buffer_full" 1 2484 ""
F B "tx_buffer_full" 1 2484 "int8()" `910 
F N "tx_buffer_full" 1 2485 ""
V L "stream" 1 2485 "int8" `912 
F B "tx_buffer_full" 1 2485 "int8(int8 stream)" `911 
F N "tx_buffer_bytes" 1 2486 ""
F B "tx_buffer_bytes" 1 2486 "int16()" `913 
F N "tx_buffer_bytes" 1 2487 ""
V L "stream" 1 2487 "int8" `915 
F B "tx_buffer_bytes" 1 2487 "int16(int8 stream)" `914 
F N "linbus_header" 1 2488 ""
V L "identifier" 1 2488 "int8" `917 
F B "linbus_header" 1 2488 "int8(int8 identifier)" `916 
F N "linbus_header" 1 2489 ""
V L "stream" 1 2489 "int8" `919 
V L "identifier" 1 2489 "int8" `920 
F B "linbus_header" 1 2489 "int8(int8 stream,int8 identifier)" `918 
F N "linbus_header_hit" 1 2490 ""
F B "linbus_header_hit" 1 2490 "int8()" `921 
F N "linbus_header_hit" 1 2491 ""
V L "stream" 1 2491 "int8" `923 
F B "linbus_header_hit" 1 2491 "int8(int8 stream)" `922 
F N "linbus_header_get" 1 2492 ""
F B "linbus_header_get" 1 2492 "int8()" `924 
F N "linbus_header_get" 1 2493 ""
V L "stream" 1 2493 "int8" `926 
F B "linbus_header_get" 1 2493 "int8(int8 stream)" `925 
F N "linbus_rx_response" 1 2494 ""
V L "DataPtr" 1 2494 "*int8" `928 
V L "count" 1 2494 "int8" `929 
F B "linbus_rx_response" 1 2494 "int8(*int8 DataPtr,int8 count)" `927 
F N "linbus_rx_response" 1 2495 ""
V L "stream" 1 2495 "int8" `931 
V L "DataPtr" 1 2495 "*int8" `932 
V L "count" 1 2495 "int8" `933 
F B "linbus_rx_response" 1 2495 "int8(int8 stream,*int8 DataPtr,int8 count)" `930 
F N "linbus_tx_response" 1 2496 ""
V L "DataPtr" 1 2496 "*int8" `935 
V L "count" 1 2496 "int8" `936 
F B "linbus_tx_response" 1 2496 "void(*int8 DataPtr,int8 count)" `934 
F N "linbus_tx_response" 1 2497 ""
V L "stream" 1 2497 "int8" `938 
V L "DataPtr" 1 2497 "*int8" `939 
V L "count" 1 2497 "int8" `940 
F B "linbus_tx_response" 1 2497 "void(int8 stream,*int8 DataPtr,int8 count)" `937 
F N "linbus_checksum_type" 1 2498 ""
V L "type" 1 2498 "int8" `942 
F B "linbus_checksum_type" 1 2498 "void(int8 type)" `941 
F N "linbus_checksum_type" 1 2499 ""
V L "stream" 1 2499 "int8" `944 
V L "type" 1 2499 "int8" `945 
F B "linbus_checksum_type" 1 2499 "void(int8 stream,int8 type)" `943  "#use i2c() Prototypes:"
F N "i2c_read" 1 2502 ""
F B "i2c_read" 1 2502 "int8()" `946 
F N "i2c_read" 1 2503 ""
V L "ack" 1 2503 "int8" `948 
F B "i2c_read" 1 2503 "int8(int8 ack)" `947 
F N "i2c_read" 1 2504 ""
V L "stream" 1 2504 "int8" `950 
V L "ack" 1 2504 "int8" `951 
F B "i2c_read" 1 2504 "int8(int8 stream,int8 ack)" `949 
F N "i2c_write" 1 2505 ""
V L "data" 1 2505 "int8" `953 
F B "i2c_write" 1 2505 "int8(int8 data)" `952 
F N "i2c_write" 1 2506 ""
V L "stream" 1 2506 "int8" `955 
V L "data" 1 2506 "int8" `956 
F B "i2c_write" 1 2506 "int8(int8 stream,int8 data)" `954 
F N "i2c_start" 1 2507 ""
F B "i2c_start" 1 2507 "void()" `957 
F N "i2c_start" 1 2508 ""
V L "stream" 1 2508 "int8" `959 
F B "i2c_start" 1 2508 "void(int8 stream)" `958 
F N "i2c_start" 1 2509 ""
V L "stream" 1 2509 "int8" `961 
V L "restart" 1 2509 "int8" `962 
F B "i2c_start" 1 2509 "void(int8 stream,int8 restart)" `960 
F N "i2c_stop" 1 2510 ""
F B "i2c_stop" 1 2510 "void()" `963 
F N "i2c_stop" 1 2511 ""
V L "stream" 1 2511 "int8" `965 
F B "i2c_stop" 1 2511 "void(int8 stream)" `964 
F N "i2c_isr_state" 1 2512 ""
F B "i2c_isr_state" 1 2512 "int8()" `966 
F N "i2c_slaveaddr" 1 2513 ""
V L "addr" 1 2513 "int8" `968 
F B "i2c_slaveaddr" 1 2513 "void(int8 addr)" `967 
F N "i2c_slaveaddr" 1 2514 ""
V L "stream" 1 2514 "int8" `970 
V L "addr" 1 2514 "int8" `971 
F B "i2c_slaveaddr" 1 2514 "void(int8 stream,int8 addr)" `969 
F N "i2c_poll" 1 2515 ""
F B "i2c_poll" 1 2515 "int8()" `972 
F N "i2c_poll" 1 2516 ""
V L "stream" 1 2516 "int8" `974 
F B "i2c_poll" 1 2516 "int8(int8 stream)" `973 
F N "i2c_init" 1 2517 ""
V L "baud" 1 2517 "int32" `976 
F B "i2c_init" 1 2517 "void(int32 baud)" `975 
F N "i2c_init" 1 2518 ""
V L "stream" 1 2518 "int8" `978 
V L "baud" 1 2518 "int32" `979 
F B "i2c_init" 1 2518 "void(int8 stream,int32 baud)" `977 
F N "i2c_transfer" 1 2519 ""
V L "address" 1 2519 "int8" `981 
V L "wData" 1 2519 "*int8" `982 
V L "wCount" 1 2519 "int8" `983 
F B "i2c_transfer" 1 2519 "int8(int8 address,*int8 wData,int8 wCount)" `980 
F N "i2c_transfer" 1 2520 ""
V L "address" 1 2520 "int8" `985 
V L "wData" 1 2520 "*int8" `986 
V L "wCount" 1 2520 "int8" `987 
V L "rData" 1 2520 "*int8" `988 
V L "rCount" 1 2520 "*int8" `989 
F B "i2c_transfer" 1 2520 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `984 
F N "i2c_transfer" 1 2521 ""
V L "stream" 1 2521 "int8" `991 
V L "address" 1 2521 "int8" `992 
V L "wData" 1 2521 "*int8" `993 
V L "wCount" 1 2521 "int8" `994 
F B "i2c_transfer" 1 2521 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `990 
F N "i2c_transfer" 1 2522 ""
V L "stream" 1 2522 "int8" `996 
V L "address" 1 2522 "int8" `997 
V L "wData" 1 2522 "*int8" `998 
V L "wCount" 1 2522 "int8" `999 
V L "rData" 1 2522 "*int8" `1000 
V L "rCount" 1 2522 "*int8" `1001 
F B "i2c_transfer" 1 2522 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `995 
F N "i2c_transfer_out" 1 2523 ""
V L "address" 1 2523 "int8" `1003 
V L "wData" 1 2523 "*int8" `1004 
V L "wCount" 1 2523 "int8" `1005 
F B "i2c_transfer_out" 1 2523 "int8(int8 address,*int8 wData,int8 wCount)" `1002 
F N "i2c_transfer_out" 1 2524 ""
V L "stream" 1 2524 "int8" `1007 
V L "address" 1 2524 "int8" `1008 
V L "wData" 1 2524 "*int8" `1009 
V L "wCount" 1 2524 "int8" `1010 
F B "i2c_transfer_out" 1 2524 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `1006 
F N "i2c_transfer_in" 1 2525 ""
V L "address" 1 2525 "int8" `1012 
V L "rData" 1 2525 "*int8" `1013 
V L "rCount" 1 2525 "int8" `1014 
F B "i2c_transfer_in" 1 2525 "int8(int8 address,*int8 rData,int8 rCount)" `1011 
F N "i2c_transfer_in" 1 2526 ""
V L "stream" 1 2526 "int8" `1016 
V L "address" 1 2526 "int8" `1017 
V L "rData" 1 2526 "*int8" `1018 
V L "rCount" 1 2526 "int8" `1019 
F B "i2c_transfer_in" 1 2526 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `1015  "#use spi() Prototypes:"
F N "spi_xfer" 1 2529 ""
F B "spi_xfer" 1 2529 "int8()" `1020 
F N "spi_xfer" 1 2530 ""
f G "spi_xfer" 1 2530 "int16()" `1021 
F N "spi_xfer" 1 2531 ""
f G "spi_xfer" 1 2531 "int32()" `1021 
F N "spi_xfer" 1 2532 ""
V L "data" 1 2532 "int8" `1022 
F B "spi_xfer" 1 2532 "int8(int8 data)" `1021 
F N "spi_xfer" 1 2533 ""
V L "data" 1 2533 "int16" `1024 
F B "spi_xfer" 1 2533 "int16(int16 data)" `1023 
F N "spi_xfer" 1 2534 ""
V L "data" 1 2534 "int32" `1026 
F B "spi_xfer" 1 2534 "int32(int32 data)" `1025 
F N "spi_xfer" 1 2535 ""
V L "stream" 1 2535 "int8" `1028 
V L "data" 1 2535 "int8" `1029 
F B "spi_xfer" 1 2535 "int8(int8 stream,int8 data)" `1027 
F N "spi_xfer" 1 2536 ""
V L "stream" 1 2536 "int8" `1031 
V L "data" 1 2536 "int16" `1032 
F B "spi_xfer" 1 2536 "int16(int8 stream,int16 data)" `1030 
F N "spi_xfer" 1 2537 ""
V L "stream" 1 2537 "int8" `1034 
V L "data" 1 2537 "int32" `1035 
F B "spi_xfer" 1 2537 "int32(int8 stream,int32 data)" `1033 
F N "spi_xfer" 1 2538 ""
V L "stream" 1 2538 "int8" `1037 
V L "data" 1 2538 "int8" `1038 
V L "bits" 1 2538 "int8" `1039 
F B "spi_xfer" 1 2538 "int8(int8 stream,int8 data,int8 bits)" `1036 
F N "spi_xfer" 1 2539 ""
V L "stream" 1 2539 "int8" `1041 
V L "data" 1 2539 "int16" `1042 
V L "bits" 1 2539 "int8" `1043 
F B "spi_xfer" 1 2539 "int16(int8 stream,int16 data,int8 bits)" `1040 
F N "spi_xfer" 1 2540 ""
V L "stream" 1 2540 "int8" `1045 
V L "data" 1 2540 "int32" `1046 
V L "bits" 1 2540 "int8" `1047 
F B "spi_xfer" 1 2540 "int32(int8 stream,int32 data,int8 bits)" `1044 
F N "spi_init" 1 2541 ""
V L "baud" 1 2541 "int32" `1049 
F B "spi_init" 1 2541 "void(int32 baud)" `1048 
F N "spi_init" 1 2542 ""
V L "stream" 1 2542 "int8" `1051 
V L "baud" 1 2542 "int32" `1052 
F B "spi_init" 1 2542 "void(int8 stream,int32 baud)" `1050 
F N "spi_speed" 1 2543 ""
V L "baud" 1 2543 "int32" `1054 
F B "spi_speed" 1 2543 "void(int32 baud)" `1053 
F N "spi_speed" 1 2544 ""
V L "stream" 1 2544 "int8" `1056 
V L "baud" 1 2544 "int32" `1057 
F B "spi_speed" 1 2544 "void(int8 stream,int32 baud)" `1055 
F N "spi_speed" 1 2545 ""
V L "stream" 1 2545 "int8" `1059 
V L "baud" 1 2545 "int32" `1060 
V L "clock" 1 2545 "int32" `1061 
F B "spi_speed" 1 2545 "void(int8 stream,int32 baud,int32 clock)" `1058 
F N "spi_prewrite" 1 2546 ""
V L "data" 1 2546 "int8" `1063 
F B "spi_prewrite" 1 2546 "void(int8 data)" `1062 
F N "spi_prewrite" 1 2547 ""
V L "data" 1 2547 "int16" `1065 
F B "spi_prewrite" 1 2547 "void(int16 data)" `1064 
F N "spi_prewrite" 1 2548 ""
V L "data" 1 2548 "int32" `1067 
F B "spi_prewrite" 1 2548 "void(int32 data)" `1066 
F N "spi_prewrite" 1 2549 ""
V L "??65535" 1 2549 "int8" `1069 
V L "data" 1 2549 "int8" `1070 
F B "spi_prewrite" 1 2549 "void(int8 ,int8 data)" `1068 
F N "spi_prewrite" 1 2550 ""
V L "??65535" 1 2550 "int8" `1072 
V L "data" 1 2550 "int16" `1073 
F B "spi_prewrite" 1 2550 "void(int8 ,int16 data)" `1071 
F N "spi_prewrite" 1 2551 ""
V L "??65535" 1 2551 "int8" `1075 
V L "data" 1 2551 "int32" `1076 
F B "spi_prewrite" 1 2551 "void(int8 ,int32 data)" `1074 
F N "spi_xfer_in" 1 2552 ""
F B "spi_xfer_in" 1 2552 "int8()" `1077 
F N "spi_xfer_in" 1 2553 ""
f G "spi_xfer_in" 1 2553 "int16()" `1078 
F N "spi_xfer_in" 1 2554 ""
f G "spi_xfer_in" 1 2554 "int32()" `1078 
F N "spi_xfer_in" 1 2555 ""
V L "bits" 1 2555 "int8" `1079 
F B "spi_xfer_in" 1 2555 "int8(int8 bits)" `1078 
F N "spi_xfer_in" 1 2556 ""
V L "bits" 1 2556 "int8" `1081 
f G "spi_xfer_in" 1 2556 "int16(int8 bits)" `1080 
F N "spi_xfer_in" 1 2557 ""
V L "bits" 1 2557 "int8" `1081 
f G "spi_xfer_in" 1 2557 "int32(int8 bits)" `1080 
F N "spi_xfer_in" 1 2558 ""
V L "stream" 1 2558 "int8" `1081 
V L "bits" 1 2558 "int8" `1082 
F B "spi_xfer_in" 1 2558 "int8(int8 stream,int8 bits)" `1080 
F N "spi_xfer_in" 1 2559 ""
V L "stream" 1 2559 "int8" `1081 
V L "bits" 1 2559 "int8" `1085 
f G "spi_xfer_in" 1 2559 "int16(int8 stream,int8 bits)" `1083 
F N "spi_xfer_in" 1 2560 ""
V L "stream" 1 2560 "int8" `1081 
V L "bits" 1 2560 "int8" `1085 
f G "spi_xfer_in" 1 2560 "int32(int8 stream,int8 bits)" `1083 
F N "spi_transfer" 1 2561 ""
V L "wData" 1 2561 "*int8" `1084 
V L "rData" 1 2561 "*int8" `1085 
V L "count" 1 2561 "int16" `1086 
F B "spi_transfer" 1 2561 "void(*int8 wData,*int8 rData,int16 count)" `1083 
F N "spi_transfer" 1 2562 ""
V L "stream" 1 2562 "int8" `1088 
V L "wData" 1 2562 "*int8" `1089 
V L "rData" 1 2562 "*int8" `1090 
V L "count" 1 2562 "int16" `1091 
F B "spi_transfer" 1 2562 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `1087 
F N "spi_transfer_write" 1 2563 ""
V L "wData" 1 2563 "*int8" `1093 
V L "count" 1 2563 "int16" `1094 
F B "spi_transfer_write" 1 2563 "void(*int8 wData,int16 count)" `1092 
F N "spi_transfer_write" 1 2564 ""
V L "stream" 1 2564 "int8" `1096 
V L "wData" 1 2564 "*int8" `1097 
V L "count" 1 2564 "int16" `1098 
F B "spi_transfer_write" 1 2564 "void(int8 stream,*int8 wData,int16 count)" `1095 
F N "spi_transfer_read" 1 2565 ""
V L "rData" 1 2565 "*int8" `1100 
V L "count" 1 2565 "int16" `1101 
F B "spi_transfer_read" 1 2565 "void(*int8 rData,int16 count)" `1099 
F N "spi_transfer_read" 1 2566 ""
V L "stream" 1 2566 "int8" `1103 
V L "rData" 1 2566 "*int8" `1104 
V L "count" 1 2566 "int16" `1105 
F B "spi_transfer_read" 1 2566 "void(int8 stream,*int8 rData,int16 count)" `1102 
F N "spi_transfer_done" 1 2567 ""
F B "spi_transfer_done" 1 2567 "int8()" `1106 
F N "spi_transfer_done" 1 2568 ""
V L "stream" 1 2568 "int8" `1108 
F B "spi_transfer_done" 1 2568 "int8(int8 stream)" `1107 
F N "spi_transfer_clear" 1 2569 ""
F B "spi_transfer_clear" 1 2569 "void()" `1109 
F N "spi_transfer_clear" 1 2570 ""
V L "stream" 1 2570 "int8" `1111 
F B "spi_transfer_clear" 1 2570 "void(int8 stream)" `1110  "#use rtos() Prototypes:"
F N "rtos_run" 1 2573 ""
F B "rtos_run" 1 2573 "void()" `1112 
F N "rtos_yield" 1 2574 ""
F B "rtos_yield" 1 2574 "void()" `1113 
F N "rtos_enable" 1 2575 ""
V L "task" 1 2575 "int8" `1115 
F B "rtos_enable" 1 2575 "void(int8 task)" `1114 
F N "rtos_disable" 1 2576 ""
V L "task" 1 2576 "int8" `1117 
F B "rtos_disable" 1 2576 "void(int8 task)" `1116 
F N "rtos_terminate" 1 2577 ""
F B "rtos_terminate" 1 2577 "void()" `1118 
F N "rtos_await" 1 2578 ""
V L "flag" 1 2578 "int8" `1120 
F B "rtos_await" 1 2578 "void(int8 flag)" `1119 
F N "rtos_wait" 1 2579 ""
V L "sem" 1 2579 "int8" `1122 
F B "rtos_wait" 1 2579 "void(int8 sem)" `1121 
F N "rtos_signal" 1 2580 ""
V L "sem" 1 2580 "int8" `1124 
F B "rtos_signal" 1 2580 "void(int8 sem)" `1123 
F N "rtos_msg_send" 1 2581 ""
V L "task" 1 2581 "int8" `1126 
V L "msg" 1 2581 "int8" `1127 
F B "rtos_msg_send" 1 2581 "void(int8 task,int8 msg)" `1125 
F N "rtos_msg_read" 1 2582 ""
F B "rtos_msg_read" 1 2582 "int8()" `1128 
F N "rtos_msg_poll" 1 2583 ""
F B "rtos_msg_poll" 1 2583 "int8()" `1129 
F N "rtos_overrun" 1 2584 ""
V L "task" 1 2584 "int8" `1131 
F B "rtos_overrun" 1 2584 "int8(int8 task)" `1130 
F N "rtos_stats" 1 2585 ""
V L "task" 1 2585 "int8" `1133 
V L "stat" 1 2585 "*int8" `1134 
F B "rtos_stats" 1 2585 "void(int8 task,*int8 stat)" `1132  "#use timer() Prototypes:"
F N "get_ticks" 1 2588 ""
F B "get_ticks" 1 2588 "int8()" `1135 
F N "get_ticks" 1 2589 ""
f G "get_ticks" 1 2589 "int16()" `1136 
F N "get_ticks" 1 2590 ""
f G "get_ticks" 1 2590 "int32()" `1136 
F N "get_ticks" 1 2591 ""
V L "stream" 1 2591 "int8" `1137 
F B "get_ticks" 1 2591 "int8(int8 stream)" `1136 
F N "get_ticks" 1 2592 ""
V L "stream" 1 2592 "int8" `1139 
f G "get_ticks" 1 2592 "int16(int8 stream)" `1138 
F N "get_ticks" 1 2593 ""
V L "stream" 1 2593 "int8" `1139 
f G "get_ticks" 1 2593 "int32(int8 stream)" `1138 
F N "set_ticks" 1 2594 ""
V L "value" 1 2594 "int8" `1139 
F B "set_ticks" 1 2594 "void(int8 value)" `1138 
F N "set_ticks" 1 2595 ""
V L "value" 1 2595 "int16" `1141 
F B "set_ticks" 1 2595 "void(int16 value)" `1140 
F N "set_ticks" 1 2596 ""
V L "value" 1 2596 "int32" `1143 
F B "set_ticks" 1 2596 "void(int32 value)" `1142 
F N "set_ticks" 1 2597 ""
V L "stream" 1 2597 "int8" `1145 
V L "value" 1 2597 "int8" `1146 
F B "set_ticks" 1 2597 "void(int8 stream,int8 value)" `1144 
F N "set_ticks" 1 2598 ""
V L "stream" 1 2598 "int8" `1148 
V L "value" 1 2598 "int16" `1149 
F B "set_ticks" 1 2598 "void(int8 stream,int16 value)" `1147 
F N "set_ticks" 1 2599 ""
V L "stream" 1 2599 "int8" `1151 
V L "value" 1 2599 "int32" `1152 
F B "set_ticks" 1 2599 "void(int8 stream,int32 value)" `1150  "#use pwm() Prototypes:"
F N "pwm_on" 1 2602 ""
F B "pwm_on" 1 2602 "void()" `1153 
F N "pwm_on" 1 2603 ""
V L "stream" 1 2603 "int8" `1155 
F B "pwm_on" 1 2603 "void(int8 stream)" `1154 
F N "pwm_off" 1 2604 ""
F B "pwm_off" 1 2604 "void()" `1156 
F N "pwm_off" 1 2605 ""
V L "stream" 1 2605 "int8" `1158 
F B "pwm_off" 1 2605 "void(int8 stream)" `1157 
F N "pwm_set_duty" 1 2606 ""
V L "duty" 1 2606 "int16" `1160 
F B "pwm_set_duty" 1 2606 "void(int16 duty)" `1159 
F N "pwm_set_duty" 1 2607 ""
V L "stream" 1 2607 "int8" `1162 
V L "duty" 1 2607 "int16" `1163 
F B "pwm_set_duty" 1 2607 "void(int8 stream,int16 duty)" `1161 
F N "pwm_set_duty_percent" 1 2608 ""
V L "percent" 1 2608 "int16" `1165 
F B "pwm_set_duty_percent" 1 2608 "void(int16 percent)" `1164 
F N "pwm_set_duty_percent" 1 2609 ""
V L "stream" 1 2609 "int8" `1167 
V L "percent" 1 2609 "int16" `1168 
F B "pwm_set_duty_percent" 1 2609 "void(int8 stream,int16 percent)" `1166 
F N "pwm_set_frequency" 1 2610 ""
V L "frequency" 1 2610 "int32" `1170 
F B "pwm_set_frequency" 1 2610 "void(int32 frequency)" `1169 
F N "pwm_set_frequency" 1 2611 ""
V L "stream" 1 2611 "int8" `1172 
V L "frequency" 1 2611 "int32" `1173 
F B "pwm_set_frequency" 1 2611 "void(int8 stream,int32 frequency)" `1171 
F N "pwm_get_duty_period" 1 2612 ""
F B "pwm_get_duty_period" 1 2612 "int16()" `1174 
F N "pwm_get_duty_period" 1 2613 ""
V L "stream" 1 2613 "int8" `1176 
F B "pwm_get_duty_period" 1 2613 "int16(int8 stream)" `1175  "#use capture() Prototypes:"
F N "get_capture_time" 1 2616 ""
F B "get_capture_time" 1 2616 "int16()" `1177 
F N "get_capture_time" 1 2617 ""
V L "stream" 1 2617 "int8" `1179 
F B "get_capture_time" 1 2617 "int16(int8 stream)" `1178 
F N "get_capture_event" 1 2618 ""
F B "get_capture_event" 1 2618 "int8()" `1180 
F N "get_capture_event" 1 2619 ""
V L "stream" 1 2619 "int8" `1182 
F B "get_capture_event" 1 2619 "int8(int8 stream)" `1181  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
F N "goto_address" 1 2632 ""
V L "address" 1 2632 "int16" `1184 
F B "goto_address" 1 2632 "void(int16 address)" `1183 
F N "label_address" 1 2633 ""
V L "label" 1 2633 "int16" `1186 
F B "label_address" 1 2633 "int16(int16 label)" `1185  "Program Memory Read Prototypes:"
F N "read_program_memory" 1 2636 ""
V L "address" 1 2636 "int16" `1188 
V L "DataPtr" 1 2636 "*int8" `1189 
V L "count" 1 2636 "int16" `1190 
F B "read_program_memory" 1 2636 "void(int16 address,*int8 DataPtr,int16 count)" `1187 
F N "read_program_eeprom" 1 2637 ""
V L "address" 1 2637 "int16" `1192 
F B "read_program_eeprom" 1 2637 "int16(int16 address)" `1191 
F N "read_device_info" 1 2638 ""
V L "DataPtr" 1 2638 "*int8" `1194 
V L "count" 1 2638 "int8" `1195 
F B "read_device_info" 1 2638 "void(*int8 DataPtr,int8 count)" `1193 
F N "read_device_info" 1 2639 ""
V L "offset" 1 2639 "int8" `1197 
V L "DataPtr" 1 2639 "*int8" `1198 
V L "count" 1 2639 "int8" `1199 
F B "read_device_info" 1 2639 "void(int8 offset,*int8 DataPtr,int8 count)" `1196 
F N "read_config_info" 1 2640 ""
V L "DataPtr" 1 2640 "*int8" `1201 
V L "count" 1 2640 "int8" `1202 
F B "read_config_info" 1 2640 "void(*int8 DataPtr,int8 count)" `1200 
F N "read_config_info" 1 2641 ""
V L "offset" 1 2641 "int8" `1204 
V L "DataPtr" 1 2641 "*int8" `1205 
V L "count" 1 2641 "int8" `1206 
F B "read_config_info" 1 2641 "void(int8 offset,*int8 DataPtr,int8 count)" `1203  "Constants used in read_device_info() offset parameter:"
D G "DINFO_MUI" 1 2643 "0"
D G "DINFO_EUI" 1 2644 "20"
D G "DINFO_TI_LOW_GAIN" 1 2645 "36"
D G "DINFO_TI_LOW_90C" 1 2646 "38"
D G "DINFO_TI_LOW_OFFSET" 1 2647 "40"
D G "DINFO_TI_HIGH_GAIN" 1 2648 "42"
D G "DINFO_TI_HIGH_90C" 1 2649 "44"
D G "DINFO_TI_HIGH_OFFSET" 1 2650 "46"
D G "DINFO_FVR1_1X" 1 2651 "48"
D G "DINFO_FVR1_2X" 1 2652 "50"
D G "DINFO_FVR1_4X" 1 2653 "52"
D G "DINFO_FVR2_1X" 1 2654 "54"
D G "DINFO_FVR2_2X" 1 2655 "56"
D G "DINFO_FVR2_4X" 1 2656 "58"
D G "DINFO_MUI_BYTES" 1 2658 "18"
D G "DINFO_EUI_BYTES" 1 2659 "16"
D G "DINFO_T1_LOW_GAIN_BYTES" 1 2660 "2"
D G "DINFO_T1_LOW_90C_BYTES" 1 2661 "2"
D G "DINFO_T1_LOW_OFFSET_BYTES" 1 2662 "2"
D G "DINFO_T1_HIGH_GAIN_BYTES" 1 2663 "2"
D G "DINFO_TI_HIGH_90C_BYTES" 1 2664 "2"
D G "DINFO_T1_HIGH_OFFSET_BYTES" 1 2665 "2"
D G "DINFO_FVR1_1X_BYTES" 1 2666 "2"
D G "DINFO_FVR1_2X_BYTES" 1 2667 "2"
D G "DINFO_FVR1_4X_BYTES" 1 2668 "2"
D G "DINFO_FVR2_1X_BYTES" 1 2669 "2"
D G "DINFO_FVR2_2X_BYTES" 1 2670 "2"
D G "DINFO_FVR2_4X_BYTES" 1 2671 "2"
D G "CINFO_ERASE_ROW_SIZE" 1 2674 "0"
D G "CINFO_WRITE_LATCHES" 1 2675 "2"
D G "CINFO_ROWS" 1 2676 "4"
D G "CINFO_EEPROM_SIZE" 1 2677 "6"
D G "CINFO_PIN_COUNT" 1 2678 "8"
D G "CINFO_ERASE_ROW_SIZE_BYTES" 1 2680 "2"
D G "CINFO_WRITE_LATCHES_BYTES" 1 2681 "2"
D G "CINFO_ROWS_BYTES" 1 2682 "2"
D G "CINFO_EEPROM_SIZE_BYTES" 1 2683 "2"
D G "CINFO_PIN_COUNT_BYTES" 1 2684 "2"
c L "read_config_info" 1 1 1 "FUNCTION"
F N "write_program_memory" 1 2687 ""
V L "address" 1 2687 "int16" `1208 
V L "DataPtr" 1 2687 "*int8" `1209 
V L "count" 1 2687 "int16" `1210 
F B "write_program_memory" 1 2687 "void(int16 address,*int8 DataPtr,int16 count)" `1207 
F N "write_program_eeprom" 1 2688 ""
V L "address" 1 2688 "int16" `1212 
V L "data" 1 2688 "int16" `1213 
F B "write_program_eeprom" 1 2688 "void(int16 address,int16 data)" `1211  "EEPROM Prototypes:"
D G "__EEADDRESS__" 1 2693 "unsigned int16"
F N "read_eeprom" 1 2698 ""
V L "address" 1 2698 "int16" `1215 
F B "read_eeprom" 1 2698 "int8(int16 address)" `1214 
F N "write_eeprom" 1 2699 ""
V L "address" 1 2699 "int16" `1217 
V L "value" 1 2699 "int8" `1218 
F B "write_eeprom" 1 2699 "void(int16 address,int8 value)" `1216  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
F N "enable_interrupts" 1 2706 ""
V L "interrupt" 1 2706 "int32" `1220 
F B "enable_interrupts" 1 2706 "void(int32 interrupt)" `1219 
F N "disable_interrupts" 1 2707 ""
V L "interrupt" 1 2707 "int32" `1222 
F B "disable_interrupts" 1 2707 "void(int32 interrupt)" `1221 
F N "clear_interrupt" 1 2708 ""
V L "interrupt" 1 2708 "int32" `1224 
F B "clear_interrupt" 1 2708 "void(int32 interrupt)" `1223 
F N "interrupt_active" 1 2709 ""
V L "interrupt" 1 2709 "int32" `1226 
F B "interrupt_active" 1 2709 "int8(int32 interrupt)" `1225 
F N "interrupt_enabled" 1 2710 ""
V L "interrupt" 1 2710 "int32" `1228 
F B "interrupt_enabled" 1 2710 "int8(int32 interrupt)" `1227 
F N "ext_int_edge" 1 2711 ""
V L "source" 1 2711 "int8" `1230 
V L "edge" 1 2711 "int8" `1231 
F B "ext_int_edge" 1 2711 "void(int8 source,int8 edge)" `1229 
F N "jump_to_isr" 1 2712 ""
V L "address" 1 2712 "int16" `1233 
F B "jump_to_isr" 1 2712 "void(int16 address)" `1232  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 1 2714 "0x40"
D G "H_TO_L" 1 2715 "0"
D G "GLOBAL" 1 2717 "0xF2C0"
D G "PERIPH" 1 2718 "0xF240"
D G "INT_IOC_A0" 1 2719 "0x30010080"
D G "INT_IOC_A0_L2H" 1 2720 "0x10010080"
D G "INT_IOC_A0_H2L" 1 2721 "0x20010080"
D G "INT_IOC_A1" 1 2722 "0x30020080"
D G "INT_IOC_A1_L2H" 1 2723 "0x10020080"
D G "INT_IOC_A1_H2L" 1 2724 "0x20020080"
D G "INT_IOC_A2" 1 2725 "0x30040080"
D G "INT_IOC_A2_L2H" 1 2726 "0x10040080"
D G "INT_IOC_A2_H2L" 1 2727 "0x20040080"
D G "INT_IOC_A3" 1 2728 "0x30080080"
D G "INT_IOC_A3_L2H" 1 2729 "0x10080080"
D G "INT_IOC_A3_H2L" 1 2730 "0x20080080"
D G "INT_IOC_A4" 1 2731 "0x30100080"
D G "INT_IOC_A4_L2H" 1 2732 "0x10100080"
D G "INT_IOC_A4_H2L" 1 2733 "0x20100080"
D G "INT_IOC_A5" 1 2734 "0x30200080"
D G "INT_IOC_A5_L2H" 1 2735 "0x10200080"
D G "INT_IOC_A5_H2L" 1 2736 "0x20200080"
D G "INT_IOC_A6" 1 2737 "0x30400080"
D G "INT_IOC_A6_L2H" 1 2738 "0x10400080"
D G "INT_IOC_A6_H2L" 1 2739 "0x20400080"
D G "INT_IOC_A7" 1 2740 "0x30800080"
D G "INT_IOC_A7_L2H" 1 2741 "0x10800080"
D G "INT_IOC_A7_H2L" 1 2742 "0x20800080"
D G "INT_IOC_B0" 1 2743 "0x31010080"
D G "INT_IOC_B0_L2H" 1 2744 "0x11010080"
D G "INT_IOC_B0_H2L" 1 2745 "0x21010080"
D G "INT_IOC_B1" 1 2746 "0x31020080"
D G "INT_IOC_B1_L2H" 1 2747 "0x11020080"
D G "INT_IOC_B1_H2L" 1 2748 "0x21020080"
D G "INT_IOC_B2" 1 2749 "0x31040080"
D G "INT_IOC_B2_L2H" 1 2750 "0x11040080"
D G "INT_IOC_B2_H2L" 1 2751 "0x21040080"
D G "INT_IOC_B3" 1 2752 "0x31080080"
D G "INT_IOC_B3_L2H" 1 2753 "0x11080080"
D G "INT_IOC_B3_H2L" 1 2754 "0x21080080"
D G "INT_IOC_B4" 1 2755 "0x31100080"
D G "INT_IOC_B4_L2H" 1 2756 "0x11100080"
D G "INT_IOC_B4_H2L" 1 2757 "0x21100080"
D G "INT_IOC_B5" 1 2758 "0x31200080"
D G "INT_IOC_B5_L2H" 1 2759 "0x11200080"
D G "INT_IOC_B5_H2L" 1 2760 "0x21200080"
D G "INT_IOC_B6" 1 2761 "0x31400080"
D G "INT_IOC_B6_L2H" 1 2762 "0x11400080"
D G "INT_IOC_B6_H2L" 1 2763 "0x21400080"
D G "INT_IOC_B7" 1 2764 "0x31800080"
D G "INT_IOC_B7_L2H" 1 2765 "0x11800080"
D G "INT_IOC_B7_H2L" 1 2766 "0x21800080"
D G "INT_IOC_C0" 1 2767 "0x32010080"
D G "INT_IOC_C0_L2H" 1 2768 "0x12010080"
D G "INT_IOC_C0_H2L" 1 2769 "0x22010080"
D G "INT_IOC_C1" 1 2770 "0x32020080"
D G "INT_IOC_C1_L2H" 1 2771 "0x12020080"
D G "INT_IOC_C1_H2L" 1 2772 "0x22020080"
D G "INT_IOC_C2" 1 2773 "0x32040080"
D G "INT_IOC_C2_L2H" 1 2774 "0x12040080"
D G "INT_IOC_C2_H2L" 1 2775 "0x22040080"
D G "INT_IOC_C3" 1 2776 "0x32080080"
D G "INT_IOC_C3_L2H" 1 2777 "0x12080080"
D G "INT_IOC_C3_H2L" 1 2778 "0x22080080"
D G "INT_IOC_C4" 1 2779 "0x32100080"
D G "INT_IOC_C4_L2H" 1 2780 "0x12100080"
D G "INT_IOC_C4_H2L" 1 2781 "0x22100080"
D G "INT_IOC_C5" 1 2782 "0x32200080"
D G "INT_IOC_C5_L2H" 1 2783 "0x12200080"
D G "INT_IOC_C5_H2L" 1 2784 "0x22200080"
D G "INT_IOC_C6" 1 2785 "0x32400080"
D G "INT_IOC_C6_L2H" 1 2786 "0x12400080"
D G "INT_IOC_C6_H2L" 1 2787 "0x22400080"
D G "INT_IOC_C7" 1 2788 "0x32800080"
D G "INT_IOC_C7_L2H" 1 2789 "0x12800080"
D G "INT_IOC_C7_H2L" 1 2790 "0x22800080"
D G "INT_IOC_E3" 1 2791 "0x34080080"
D G "INT_IOC_E3_L2H" 1 2792 "0x14080080"
D G "INT_IOC_E3_H2L" 1 2793 "0x24080080"
D G "INT_SOFTWARE" 1 2794 "0x000001"
D G "INT_HLVD" 1 2795 "0x000002"
D G "INT_OSF" 1 2796 "0x000004"
D G "INT_CSW" 1 2797 "0x000008"
D G "INT_IOC" 1 2798 "0x0FFF0080"
D G "INT_EXT_L2H" 1 2799 "0x50000101"
D G "INT_EXT_H2L" 1 2800 "0x60000101"
D G "INT_EXT" 1 2801 "0x000101"
D G "INT_ZCD" 1 2802 "0x000102"
D G "INT_ADC" 1 2803 "0x000104"
D G "INT_COMP1" 1 2804 "0x000110"
D G "INT_SMT1" 1 2805 "0x000120"
D G "INT_SMT1PRA" 1 2806 "0x000140"
D G "INT_SMT1PWA" 1 2807 "0x000180"
D G "INT_TIMER0" 1 2808 "0x000380"
D G "INT_CLC1" 1 2809 "0x000020"
D G "INT_ACT" 1 2810 "0x000108"
D G "INT_ADT" 1 2811 "0x000201"
D G "INT_DMA1SCNT" 1 2812 "0x000210"
D G "INT_DMA1DCNT" 1 2813 "0x000220"
D G "INT_DMA1OR" 1 2814 "0x000240"
D G "INT_DMA1A" 1 2815 "0x000280"
D G "INT_SPI1RX" 1 2816 "0x000301"
D G "INT_SPI1TX" 1 2817 "0x000302"
D G "INT_SPI1" 1 2818 "0x000304"
D G "INT_TIMER2" 1 2819 "0x000308"
D G "INT_TIMER1" 1 2820 "0x000310"
D G "INT_TIMER1G" 1 2821 "0x000320"
D G "INT_CCP1" 1 2822 "0x000340"
D G "INT_RDA" 1 2823 "0x000401"
D G "INT_TBE" 1 2824 "0x000402"
D G "INT_U1E" 1 2825 "0x000404"
D G "INT_U1" 1 2826 "0x000408"
D G "INT_PWM1RINT" 1 2827 "0x000440"
D G "INT_PWM1GINT" 1 2828 "0x000480"
D G "INT_SPI2RX" 1 2829 "0x000501"
D G "INT_SPI2TX" 1 2830 "0x000502"
D G "INT_SPI2" 1 2831 "0x000504"
D G "INT_TIMER3" 1 2832 "0x000510"
D G "INT_TIMER3G" 1 2833 "0x000520"
D G "INT_PWM2RINT" 1 2834 "0x000540"
D G "INT_PWM2GINT" 1 2835 "0x000580"
D G "INT_EXT1_L2H" 1 2836 "0x50010601"
D G "INT_EXT1_H2L" 1 2837 "0x60010601"
D G "INT_EXT1" 1 2838 "0x000601"
D G "INT_CLC2" 1 2839 "0x000602"
D G "INT_CWG1" 1 2840 "0x000604"
D G "INT_NCO" 1 2841 "0x000608"
D G "INT_DMA2SCNT" 1 2842 "0x000610"
D G "INT_DMA2DCNT" 1 2843 "0x000620"
D G "INT_DMA2OR" 1 2844 "0x000640"
D G "INT_DMA2A" 1 2845 "0x000680"
D G "INT_I2C1RX" 1 2846 "0x000701"
D G "INT_I2C1TX" 1 2847 "0x000702"
D G "INT_I2C1" 1 2848 "0x000704"
D G "INT_I2C1E" 1 2849 "0x000708"
D G "INT_CLC3" 1 2850 "0x000720"
D G "INT_PWM3RINT" 1 2851 "0x000740"
D G "INT_PWM3GINT" 1 2852 "0x000780"
D G "INT_RDA2" 1 2853 "0x000801"
D G "INT_TBE2" 1 2854 "0x000802"
D G "INT_U2E" 1 2855 "0x000804"
D G "INT_U2" 1 2856 "0x000808"
D G "INT_TIMER5" 1 2857 "0x000810"
D G "INT_TIMER5G" 1 2858 "0x000820"
D G "INT_CCP2" 1 2859 "0x000840"
D G "INT_SCAN" 1 2860 "0x000880"
D G "INT_RDA3" 1 2861 "0x000901"
D G "INT_TBE3" 1 2862 "0x000902"
D G "INT_U3E" 1 2863 "0x000904"
D G "INT_U3" 1 2864 "0x000908"
D G "INT_CLC4" 1 2865 "0x000920"
D G "INT_EXT2_L2H" 1 2866 "0x50020A01"
D G "INT_EXT2_H2L" 1 2867 "0x60020A01"
D G "INT_EXT2" 1 2868 "0x000A01"
D G "INT_CLC5" 1 2869 "0x000A02"
D G "INT_CWG2" 1 2870 "0x000A04"
D G "INT_NCO2" 1 2871 "0x000A08"
D G "INT_DMA3SCNT" 1 2872 "0x000A10"
D G "INT_DMA3DCNT" 1 2873 "0x000A20"
D G "INT_DMA3OR" 1 2874 "0x000A40"
D G "INT_DMA3A" 1 2875 "0x000A80"
D G "INT_CCP3" 1 2876 "0x000B01"
D G "INT_CLC6" 1 2877 "0x000B02"
D G "INT_CWG3" 1 2878 "0x000B04"
D G "INT_TIMER4" 1 2879 "0x000B08"
D G "INT_DMA4SCNT" 1 2880 "0x000B10"
D G "INT_DMA4DCNT" 1 2881 "0x000B20"
D G "INT_DMA4OR" 1 2882 "0x000B40"
D G "INT_DMA4A" 1 2883 "0x000B80"
D G "INT_RDA4" 1 2884 "0x000C01"
D G "INT_TBE4" 1 2885 "0x000C02"
D G "INT_U4E" 1 2886 "0x000C04"
D G "INT_U4" 1 2887 "0x000C08"
D G "INT_DMA5SCNT" 1 2888 "0x000C10"
D G "INT_DMA5DCNT" 1 2889 "0x000C20"
D G "INT_DMA5OR" 1 2890 "0x000C40"
D G "INT_DMA5A" 1 2891 "0x000C80"
D G "INT_RDA5" 1 2892 "0x000D01"
D G "INT_TBE5" 1 2893 "0x000D02"
D G "INT_U5E" 1 2894 "0x000D04"
D G "INT_U5" 1 2895 "0x000D08"
D G "INT_DMA6SCNT" 1 2896 "0x000D10"
D G "INT_DMA6DCNT" 1 2897 "0x000D20"
D G "INT_DMA6OR" 1 2898 "0x000D40"
D G "INT_DMA6A" 1 2899 "0x000D80"
D G "INT_CLC7" 1 2900 "0x000E02"
D G "INT_COMP2" 1 2901 "0x000E04"
D G "INT_NCO3" 1 2902 "0x000E08"
D G "INT_NVM" 1 2903 "0x000F01"
D G "INT_CLC8" 1 2904 "0x000F02"
D G "INT_CRC" 1 2905 "0x000F04"
D G "INT_TIMER6" 1 2906 "0x000F08"
C L "jump_to_isr" 2 1 1 "*"
C L "jump_to_isr" 2 1 1 "*"
C L "jump_to_isr" 2 1 1 "*"
C L "jump_to_isr" 2 1 1 "*"
C L "jump_to_isr" 2 1 1 "*"
D G "__PIN_DEF_H" 2 13 ""
D G "UARTRX" 2 16 "PIN_A5"
D G "UARTTX" 2 17 "PIN_C0"
D G "CONSTANT_POWER" 2 21 "PIN_A0" "Power reading for comparison                     Pin #19 del micro."
D G "PWR_BUS_RX" 2 22 "PIN_A1" "Power Bus reception                              Pin #20 del micro."
D G "PWR_BUS_Tx" 2 23 "PIN_A2" "Power Bus transmission                           Pin #21 del micro."
D G "LIGHT_SENSOR" 2 24 "PIN_A6" "Light sensor simulator                           Pin #31 del micro."
D G "Q12_ERROR_ENABLE" 2 25 "PIN_B5" "Q12 transistor error simulation                  Pin #15 del micro."
D G "BAT_DISC" 2 26 "PIN_C7" "Battery disconnection                            Pin #1 del micro."
D G "COM_TRANSMIT_SWITCH" 2 27 "PIN_D4" "Transmision channel change                       Pin #2 del micro."
D G "SWITCH_CONTROL" 2 28 "PIN_D5" "Control of the switch                            Pin #3 del micro."
D G "POWER_DISCONNECTION" 2 29 "PIN_D6" "Desconexion de la tension de LX                  Pin #4 del micro."
D G "COM_RECIEVE_SWITCH" 2 30 "PIN_D7" "Reception channel change                         Pin #5 del micro."
D G "TEST_BUTTON" 2 31 "PIN_E0" "Push button activation                           Pin #25 del micro."
D G "GREEN_LED" 2 32 "PIN_E1" "Green LED                                        Pin #26 del micro."
D G "RED_LED" 2 33 "PIN_E2" "Red LED                                          Pin #27 del micro."
D G "uWAVE_SENSOR" 2 39 "7" "Canal de escritura del sensor uwave.                        Pin #30 del micro."
D G "T_AMB" 2 40 "PIN_C1" "Canal de escritura de la temp ambiente                      Pin #35 del micro."
D G "T_HEATER" 2 41 "PIN_C2" "Canal de escritura de la temp del HTR                       Pin #36 del micro."
D G "CANAL_V_PS" 2 43 "8" "canal de lectura del tension de la PS                       Pin #8 del micro."
D G "CANAL_V_DC_BUS" 2 44 "9" "canal de lectura de la tension del DLBus                    Pin #9 del micro."
D G "CANAL_V_ILED" 2 45 "19" "canal de lectura de la V para calc la I de los LEDs         Pin #37 del micro."
D G "CANAL_V_IHTR" 2 46 "20" "canal de lectura de la V para calc la I del HTR             Pin #42 del micro."
D G "CANAL_V_BAT" 2 47 "21" "canal de lectura de la tension de la bateria                Pin #43 del micro."
D G "CANAL_V_LEDS" 2 48 "24" "canal de lectura de la tension de los LEDs                  Pin #38 del micro."
D G "CANAL_V_DESCARGA_BAT" 2 49 "25" "canal de lectura de la V para calc la I de desc de Bat      Pin #39 del micro."
D G "CANAL_V_CARGA_BAT" 2 50 "26" "canal de lectura de la V para calc la I de carg de Bat      Pin #40 del micro."
D G "CANAL_V_HEATER" 2 51 "27" "canal de lectura de la V del calentador                     Pin #41 del micro."
C L "jump_to_isr" 2 1 2 "FUNCTION"
C L "jump_to_isr" 3 1 1 "*"
C L "jump_to_isr" 3 1 1 "*"
D G "MAIN_H" 3 9 ""
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "i" 3 12 "int8" `1238 
D G "Baud1" 3 13 "9600"
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "TestNumber" 3 15 "int8" `1239  "numero de Test elegido (segun protocolo)"
V G "gTestElegido" 3 16 "int8" `1240 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gTestFinalizado" 3 17 "int8" `1241 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gInfoRecieved" 3 18 "int8" `1242 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gReceptionError" 3 19 "int8" `1243 
C L "jump_to_isr" 3 1 2 "FUNCTION"
V G "ErrorLog" 3 22 "int8" `1244 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gLUM_OFF" 3 25 "int8" `1245 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gBAT_DISCHARGED" 3 26 "int8" `1246 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gBAT_FULLCHARGE" 3 27 "int8" `1247 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gLEDs_FULLPWR" 3 28 "int8" `1248 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gLEDs_20PerPWR" 3 29 "int8" `1249 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gLEDs_OFF" 3 30 "int8" `1250 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gDischargePowerOK" 3 31 "int8" `1251 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gCharge_OK" 3 32 "int8" `1252 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gVbatOK" 3 33 "int8" `1253 
V G "GreenLED" 3 34 "int8" `1254 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "RedLED" 3 35 "int8" `1255 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "ILD" 3 36 "float" `1256 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "I_carg" 3 37 "float" `1257 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "I_desc" 3 38 "float" `1258 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "I_HTR" 3 39 "float" `1259 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "VLD" 3 40 "float" `1260 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "VBat" 3 41 "float" `1261 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "VPS" 3 42 "float" `1262 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "VDCBus" 3 43 "float" `1263 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "VHTR" 3 44 "float" `1264 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "BATTERY_POWER" 3 45 "float" `1265  "Discharge Power Of the Battery"
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "I_CARGA_LOW" 3 51 "int8" `1266 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "I_CARGA_HIGH" 3 52 "int8" `1267 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "I_LED_563_HIGH" 3 53 "int8" `1268 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "I_LED_563_LOW" 3 54 "int8" `1269 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "I_LED_103_HIGH" 3 55 "int8" `1270 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "I_LED_103_LOW" 3 56 "int8" `1271 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "W_DESCBAT_LOW" 3 57 "float" `1272 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "W_DESCBAT_HIGH" 3 58 "float" `1273 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "TIEMPO_DESCARGA1_HIGH" 3 59 "int8" `1274 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "TIEMPO_DESCARGA1_LOW" 3 60 "int8" `1275 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "TIEMPO_DESCARGA2_HIGH" 3 61 "int8" `1276 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "TIEMPO_DESCARGA2_LOW" 3 62 "int8" `1277 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "V_BATERIA_LOW" 3 63 "float" `1278 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "V_BATERIA_HIGH" 3 64 "float" `1279 
C L "jump_to_isr" 3 1 2 "FUNCTION"
V G "gRampUp_OK" 3 68 "int8" `1280 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gRampDown_OK" 3 69 "int8" `1281 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gRedFlick_OK" 3 70 "int8" `1282 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gGreenFlick_OK" 3 71 "int8" `1283 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gIntermitentChargeOK" 3 73 "int8" `1284  "Flag indicating intermittent charge is going OK"
V G "TimepoDescarga1" 3 74 "int8" `1285 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "TiempoDescarga2" 3 75 "int8" `1286 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "V_BAT_24h" 3 77 "float[150]" `1287  "ERROR CODES VECTOR*"
V G "ErrorCodes" 3 80 "int16[100]" `1288  "Vector to hold all the error codes (must be transmitted to PC)"
V G "ErrorCont" 3 81 "int8" `1289 
C L "jump_to_isr" 3 1 2 "FUNCTION"
V G "gPreviousTest_OK" 3 83 "int8" `1290 
C L "jump_to_isr" 3 1 1 "FUNCTION"
V G "gPreviousTest_ERROR" 3 84 "int8" `1291 
C L "jump_to_isr" 3 1 2 "FUNCTION"
F N "InitializeMicro" 3 88 ""
f G "InitializeMicro" 3 88 "void()" `1292 
F N "Get_Estado_LUM" 3 89 ""
V L "Carga_Desc" 3 89 "int8" `1294 
f G "Get_Estado_LUM" 3 89 "void(int8 Carga_Desc)" `1293 
F N "TestChoose" 3 90 ""
f G "TestChoose" 3 90 "void()" `1295  "Selection of the test to perform"
F N "Read_V_PS" 3 91 ""
f G "Read_V_PS" 3 91 "float()" `1296  "Power Sourve Voltage reading"
F N "Read_V_DCBus" 3 92 ""
f G "Read_V_DCBus" 3 92 "float()" `1297  "Reading, filtering and conversion of V_DCBus"
F N "Read_I_LED" 3 93 ""
f G "Read_I_LED" 3 93 "float()" `1298  "Reading, filtering and conversion of I_LEDS"
F N "Read_I_HTR" 3 94 ""
f G "Read_I_HTR" 3 94 "float()" `1299  "Reading, filtering and conversion of I_HTR"
F N "Read_I_BatDesc" 3 95 ""
f G "Read_I_BatDesc" 3 95 "float()" `1300  "Reading, filtering and conversion of I_BatDesc"
F N "Read_I_BatCarg" 3 96 ""
f G "Read_I_BatCarg" 3 96 "float()" `1301  "Reading, filtering and conversion of I_BatCarg"
F N "Read_V_Bat" 3 97 ""
f G "Read_V_Bat" 3 97 "float()" `1302  "Reading, filtering and conversion of V_Bat"
F N "Read_V_LD" 3 98 ""
f G "Read_V_LD" 3 98 "float()" `1303  "Reading, filtering and conversion of V_LD"
F N "Read_V_HTR" 3 99 ""
f G "Read_V_HTR" 3 99 "float()" `1304  "Reading, filtering and conversion of V_HTR"
F N "LEDrampCheck" 3 100 ""
V L "up_down" 3 100 "int8" `1306 
V L "ILD" 3 100 "float" `1307 
f G "LEDrampCheck" 3 100 "void(int8 up_down,float ILD)" `1305 
F N "LEDFlickCheck" 3 101 ""
V L "LEDChoose" 3 101 "int8" `1309 
f G "LEDFlickCheck" 3 101 "void(int8 LEDChoose)" `1308 
F N "BatteryDischargePower" 3 102 ""
f G "BatteryDischargePower" 3 102 "void()" `1310 
F N "delay_min" 3 103 ""
V L "minutos" 3 103 "int8" `1312 
f G "delay_min" 3 103 "void(int8 minutos)" `1311 
F N "IntermitentCharge" 3 104 ""
f G "IntermitentCharge" 3 104 "void()" `1313  "Test Functions*"
C L "IntermitentCharge" 3 1 1 "FUNCTION"
F N "PwrUpTest1" 3 107 ""
f G "PwrUpTest1" 3 107 "void()" `1314 
F N "PwrUpTest2" 3 108 ""
f G "PwrUpTest2" 3 108 "void()" `1315 
F N "PwrUpTest3" 3 109 ""
f G "PwrUpTest3" 3 109 "void()" `1316 
F N "PwrUpTest4" 3 110 ""
f G "PwrUpTest4" 3 110 "void()" `1317 
F N "PwrUpTest5" 3 111 ""
f G "PwrUpTest5" 3 111 "void()" `1318  "Test Push Button*"
F N "TstPshBtn1" 3 113 ""
f G "TstPshBtn1" 3 113 "void()" `1319 
F N "TstPshBtn2" 3 114 ""
f G "TstPshBtn2" 3 114 "void()" `1320 
F N "TstPshBtn3" 3 115 ""
f G "TstPshBtn3" 3 115 "void()" `1321 
F N "TstPshBtn4" 3 116 ""
f G "TstPshBtn4" 3 116 "void()" `1322 
F N "TstPshBtn5" 3 117 ""
f G "TstPshBtn5" 3 117 "void()" `1323  "Battery disconection with test push button*"
F N "BtryDiscTstPshBtn1" 3 119 ""
f G "BtryDiscTstPshBtn1" 3 119 "void()" `1324 
F N "BtryDiscTstPshBtn2" 3 120 ""
f G "BtryDiscTstPshBtn2" 3 120 "void()" `1325 
F N "BtryDiscTstPshBtn3" 3 121 ""
f G "BtryDiscTstPshBtn3" 3 121 "void()" `1326 
F N "BtryDiscTstPshBtn4" 3 122 ""
f G "BtryDiscTstPshBtn4" 3 122 "void()" `1327 
F N "BtryDiscTstPshBtn5" 3 123 ""
f G "BtryDiscTstPshBtn5" 3 123 "void()" `1328 
F N "BtryDiscTstPshBtn6" 3 124 ""
f G "BtryDiscTstPshBtn6" 3 124 "void()" `1329  "Continous charge -> intemitent charge -> Autonomy*"
F N "ContChargeInterChargeAutonomy" 3 126 ""
f G "ContChargeInterChargeAutonomy" 3 126 "void()" `1330  "Deep Discharge Battery: Continous charge -> intemitent charge -> Autonomy*"
F N "DeepChargeBattery" 3 128 ""
f G "DeepChargeBattery" 3 128 "void()" `1331  "Autonomy auto-test*"
F N "AutonomyAutoTest" 3 130 ""
f G "AutonomyAutoTest" 3 130 "void()" `1332  "Red LED testing using test button*"
F N "RedLEDResetWithPshBtn" 3 132 ""
f G "RedLEDResetWithPshBtn" 3 132 "void()" `1333  "Battery Disconection using power switch*"
F N "BattDiscPwrSwitch1" 3 134 ""
f G "BattDiscPwrSwitch1" 3 134 "void()" `1334 
F N "BattDiscPwrSwitch2" 3 135 ""
f G "BattDiscPwrSwitch2" 3 135 "void()" `1335 
F N "BattDiscPwrSwitch3" 3 136 ""
f G "BattDiscPwrSwitch3" 3 136 "void()" `1336  "Temperature Derating*"
F N "TemperatureDerating" 3 138 ""
f G "TemperatureDerating" 3 138 "void()" `1337  "Heater Testing*"
F N "HTRTesting" 3 140 ""
f G "HTRTesting" 3 140 "void()" `1338  "Motion And Light Sensor*"
F N "MotionLightSensor" 3 142 ""
f G "MotionLightSensor" 3 142 "void()" `1339  "Error in HTR power*"
F N "HTRPowErr" 3 144 ""
f G "HTRPowErr" 3 144 "void()" `1340  "Communications Test*"
F N "CommTest1" 3 146 ""
f G "CommTest1" 3 146 "void()" `1341  "void CommTest2();"
C L "CommTest1" 3 1 1 "FUNCTION"
C L "CommTest1" 4 1 1 "*"
C L "CommTest1" 4 1 1 "*"
C L "CommTest1" 4 1 1 "*"
C L "CommTest1" 3 1 1 "*"
C L "CommTest1" 3 1 1 "*"
D G "TESTS_H" 4 11 ""
C L "CommTest1" 4 12 1 "FUNCTION"
C L "CommTest1" 4 13 1 "*"
C L "CommTest1" 4 13 1 "*"
C L "CommTest1" 4 13 1 "*"
C L "CommTest1" 4 13 1 "*"
F N "PwrUpTest1" 4 20 ""
F G "PwrUpTest1" 4 21 "void()" `1314  "variables locales*"
V L "Test_OK" 4 23 "int8" `1342 
V L "Error" 4 24 "int8" `1343 
V L "ErrorCode" 4 25 "int8" `1344 
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 2 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest1" 4 13 1 "FUNCTION"
C L "PwrUpTest2" 4 90 1 "*"
C L "PwrUpTest2" 4 90 1 "*"
C L "PwrUpTest2" 4 90 1 "*"
C L "PwrUpTest2" 4 90 1 "*"
F N "PwrUpTest2" 4 96 ""
F G "PwrUpTest2" 4 97 "void()" `1315  "variables locales*"
V L "Test_OK" 4 99 "int8" `1348 
V L "Error" 4 100 "int8" `1349 
V L "ErrorCode" 4 101 "int8" `1350 
C L "PwrUpTest2" 4 90 1 "FUNCTION"
C L "PwrUpTest2" 4 90 1 "FUNCTION"
C L "PwrUpTest2" 4 90 1 "FUNCTION"
C L "PwrUpTest2" 4 90 1 "FUNCTION"
C L "PwrUpTest2" 4 90 1 "FUNCTION"
C L "PwrUpTest2" 4 90 1 "FUNCTION"
C L "PwrUpTest2" 4 90 1 "FUNCTION"
C L "PwrUpTest2" 4 90 1 "FUNCTION"
C L "PwrUpTest2" 4 90 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "*"
C L "PwrUpTest3" 4 151 1 "*"
C L "PwrUpTest3" 4 151 1 "*"
C L "PwrUpTest3" 4 151 1 "*"
F N "PwrUpTest3" 4 157 ""
F G "PwrUpTest3" 4 158 "void()" `1316  "variables locales*"
V L "Test_OK" 4 160 "int8" `1351 
V L "Error" 4 161 "int8" `1352 
V L "ErrorCode" 4 162 "int8" `1353 
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest3" 4 151 1 "FUNCTION"
C L "PwrUpTest4" 4 238 1 "*"
C L "PwrUpTest4" 4 238 1 "*"
C L "PwrUpTest4" 4 238 1 "*"
C L "PwrUpTest4" 4 238 1 "*"
F N "PwrUpTest4" 4 244 ""
F G "PwrUpTest4" 4 245 "void()" `1317  "Variables Locales*"
V L "Test_OK" 4 247 "int8" `1354 
V L "Error" 4 248 "int8" `1355 
V L "ErrorCode" 4 249 "int8" `1356 
C L "PwrUpTest4" 4 238 1 "FUNCTION"
C L "PwrUpTest4" 4 238 1 "FUNCTION"
C L "PwrUpTest4" 4 238 1 "FUNCTION"
C L "PwrUpTest4" 4 238 1 "FUNCTION"
C L "PwrUpTest4" 4 238 1 "FUNCTION"
C L "PwrUpTest4" 4 238 1 "FUNCTION"
C L "PwrUpTest4" 4 238 1 "FUNCTION"
C L "PwrUpTest5" 4 288 1 "*"
C L "PwrUpTest5" 4 288 1 "*"
C L "PwrUpTest5" 4 288 1 "*"
C L "PwrUpTest5" 4 288 1 "*"
F N "PwrUpTest5" 4 294 ""
F G "PwrUpTest5" 4 295 "void()" `1318  "Variables Locales*"
V L "Test_OK" 4 297 "int8" `1357 
V L "Error" 4 298 "int8" `1358 
V L "ErrorCode" 4 299 "int8" `1359 
C L "PwrUpTest5" 4 288 1 "FUNCTION"
C L "PwrUpTest5" 4 288 1 "FUNCTION"
C L "PwrUpTest5" 4 288 1 "FUNCTION"
C L "PwrUpTest5" 4 288 1 "FUNCTION"
C L "PwrUpTest5" 4 288 1 "FUNCTION"
C L "PwrUpTest5" 4 288 1 "FUNCTION"
C L "PwrUpTest5" 4 288 1 "FUNCTION"
C L "TstPshBtn1" 4 288 1 "FUNCTION"
C L "TstPshBtn1" 4 339 1 "*"
C L "TstPshBtn1" 4 339 1 "*"
C L "TstPshBtn1" 4 339 1 "*"
C L "TstPshBtn1" 4 339 1 "*"
F N "TstPshBtn1" 4 345 ""
F G "TstPshBtn1" 4 346 "void()" `1319  "Variables Locales*"
V L "Test_OK" 4 348 "int8" `1360 
V L "Error" 4 349 "int8" `1361 
V L "ErrorCode" 4 350 "int8" `1362 
C L "TstPshBtn1" 4 339 1 "FUNCTION"
C L "TstPshBtn1" 4 339 1 "FUNCTION"
C L "TstPshBtn1" 4 339 1 "FUNCTION"
C L "TstPshBtn1" 4 339 1 "FUNCTION"
C L "TstPshBtn1" 4 339 1 "FUNCTION"
C L "TstPshBtn2" 4 392 1 "*"
C L "TstPshBtn2" 4 392 1 "*"
C L "TstPshBtn2" 4 392 1 "*"
C L "TstPshBtn2" 4 392 1 "*"
F N "TstPshBtn2" 4 398 ""
F G "TstPshBtn2" 4 399 "void()" `1320  "Variables Locales*"
V L "Test_OK" 4 401 "int8" `1363 
V L "Error" 4 402 "int8" `1364 
V L "ErrorCode" 4 403 "int8" `1365 
C L "TstPshBtn2" 4 392 1 "FUNCTION"
C L "TstPshBtn2" 4 392 1 "FUNCTION"
C L "TstPshBtn2" 4 392 1 "FUNCTION"
C L "TstPshBtn2" 4 392 1 "FUNCTION"
C L "TstPshBtn2" 4 392 1 "FUNCTION"
C L "TstPshBtn3" 4 445 1 "*"
C L "TstPshBtn3" 4 445 1 "*"
C L "TstPshBtn3" 4 445 1 "*"
C L "TstPshBtn3" 4 445 1 "*"
F N "TstPshBtn3" 4 451 ""
F G "TstPshBtn3" 4 452 "void()" `1321  "Variables Locales*"
V L "Test_OK" 4 454 "int8" `1366 
V L "Error" 4 455 "int8" `1367 
V L "ErrorCode" 4 456 "int8" `1368 
C L "TstPshBtn3" 4 445 1 "FUNCTION"
C L "TstPshBtn3" 4 445 1 "FUNCTION"
C L "TstPshBtn3" 4 445 1 "FUNCTION"
C L "TstPshBtn3" 4 445 1 "FUNCTION"
C L "TstPshBtn3" 4 445 1 "FUNCTION"
C L "TstPshBtn4" 4 535 1 "*"
C L "TstPshBtn4" 4 535 1 "*"
C L "TstPshBtn4" 4 535 1 "*"
C L "TstPshBtn4" 4 535 1 "*"
F N "TstPshBtn4" 4 541 ""
F G "TstPshBtn4" 4 542 "void()" `1322  "* @brief      Test push button 5."
C L "TstPshBtn5" 4 546 1 "*"
C L "TstPshBtn5" 4 546 1 "*"
C L "TstPshBtn5" 4 546 1 "*"
F N "TstPshBtn5" 4 552 ""
F G "TstPshBtn5" 4 553 "void()" `1323  "----------------------------------------------------------------Battery disconection with test push button---------------------------------------------------------------*"
C L "BtryDiscTstPshBtn1" 4 558 1 "*"
C L "BtryDiscTstPshBtn1" 4 558 1 "*"
C L "BtryDiscTstPshBtn1" 4 558 1 "*"
C L "BtryDiscTstPshBtn1" 4 558 1 "*"
F N "BtryDiscTstPshBtn1" 4 564 ""
F G "BtryDiscTstPshBtn1" 4 565 "void()" `1324  "Variables Locales*"
V L "Error" 4 567 "int8" `1371 
V L "Test_OK" 4 568 "int8" `1372 
V L "ErrorCode" 4 569 "int16" `1373 
C L "BtryDiscTstPshBtn1" 4 558 1 "FUNCTION"
C L "BtryDiscTstPshBtn1" 4 558 1 "FUNCTION"
C L "BtryDiscTstPshBtn1" 4 558 1 "FUNCTION"
C L "BtryDiscTstPshBtn1" 4 558 1 "FUNCTION"
C L "BtryDiscTstPshBtn1" 4 558 1 "FUNCTION"
C L "BtryDiscTstPshBtn1" 4 558 1 "FUNCTION"
C L "BtryDiscTstPshBtn1" 4 558 1 "FUNCTION"
C L "BtryDiscTstPshBtn2" 4 597 1 "*"
C L "BtryDiscTstPshBtn2" 4 597 1 "*"
C L "BtryDiscTstPshBtn2" 4 597 1 "*"
C L "BtryDiscTstPshBtn2" 4 597 1 "*"
F N "BtryDiscTstPshBtn2" 4 603 ""
F G "BtryDiscTstPshBtn2" 4 604 "void()" `1325  "Variables Locales*"
V L "Error" 4 606 "int8" `1374 
V L "Test_OK" 4 607 "int8" `1375 
V L "ErrorCode" 4 608 "int8" `1376 
C L "BtryDiscTstPshBtn2" 4 597 1 "FUNCTION"
C L "BtryDiscTstPshBtn2" 4 597 1 "FUNCTION"
C L "BtryDiscTstPshBtn2" 4 597 1 "FUNCTION"
C L "BtryDiscTstPshBtn2" 4 597 1 "FUNCTION"
C L "BtryDiscTstPshBtn2" 4 597 1 "FUNCTION"
C L "BtryDiscTstPshBtn3" 4 636 1 "*"
C L "BtryDiscTstPshBtn3" 4 636 1 "*"
C L "BtryDiscTstPshBtn3" 4 636 1 "*"
C L "BtryDiscTstPshBtn3" 4 636 1 "*"
F N "BtryDiscTstPshBtn3" 4 642 ""
F G "BtryDiscTstPshBtn3" 4 643 "void()" `1326  "Variables Locales*"
V L "Error" 4 645 "int8" `1377 
V L "Test_OK" 4 646 "int8" `1378 
V L "ErrorCode" 4 647 "int8" `1379 
V L "i" 4 648 "int8" `1380  "Funcionalidad*"
C L "BtryDiscTstPshBtn3" 4 636 1 "FUNCTION"
C L "BtryDiscTstPshBtn3" 4 636 1 "FUNCTION"
C L "BtryDiscTstPshBtn3" 4 636 1 "FUNCTION"
C L "BtryDiscTstPshBtn3" 4 636 1 "FUNCTION"
C L "BtryDiscTstPshBtn3" 4 636 1 "FUNCTION"
C L "BtryDiscTstPshBtn3" 4 636 1 "FUNCTION"
C L "BtryDiscTstPshBtn4" 4 679 1 "*"
C L "BtryDiscTstPshBtn4" 4 679 1 "*"
C L "BtryDiscTstPshBtn4" 4 679 1 "*"
C L "BtryDiscTstPshBtn4" 4 679 1 "*"
F N "BtryDiscTstPshBtn4" 4 685 ""
F G "BtryDiscTstPshBtn4" 4 686 "void()" `1327  "Variables Locales*"
V L "Error" 4 688 "int8" `1381 
V L "Test_OK" 4 689 "int8" `1382 
V L "ErrorCode" 4 690 "int8" `1383 
V L "i" 4 691 "int8" `1384  "Funcionalidad*"
C L "BtryDiscTstPshBtn4" 4 679 1 "FUNCTION"
C L "BtryDiscTstPshBtn4" 4 679 1 "FUNCTION"
C L "BtryDiscTstPshBtn4" 4 679 1 "FUNCTION"
C L "BtryDiscTstPshBtn4" 4 679 1 "FUNCTION"
C L "BtryDiscTstPshBtn5" 4 723 1 "*"
C L "BtryDiscTstPshBtn5" 4 723 1 "*"
C L "BtryDiscTstPshBtn5" 4 723 1 "*"
C L "BtryDiscTstPshBtn5" 4 723 1 "*"
F N "BtryDiscTstPshBtn5" 4 729 ""
F G "BtryDiscTstPshBtn5" 4 730 "void()" `1328  "Variables Locales*"
V L "Error" 4 732 "int8" `1385 
V L "Test_OK" 4 733 "int8" `1386 
V L "ErrorCode" 4 734 "int8" `1387 
V L "Contador" 4 735 "int8" `1388 
C L "BtryDiscTstPshBtn5" 4 723 1 "FUNCTION"
C L "BtryDiscTstPshBtn5" 4 723 1 "FUNCTION"
C L "BtryDiscTstPshBtn5" 4 723 1 "FUNCTION"
C L "BtryDiscTstPshBtn5" 4 723 1 "FUNCTION"
C L "BtryDiscTstPshBtn5" 4 723 1 "FUNCTION"
C L "BtryDiscTstPshBtn6" 4 768 1 "*"
C L "BtryDiscTstPshBtn6" 4 768 1 "*"
C L "BtryDiscTstPshBtn6" 4 768 1 "*"
C L "BtryDiscTstPshBtn6" 4 768 1 "*"
F N "BtryDiscTstPshBtn6" 4 774 ""
F G "BtryDiscTstPshBtn6" 4 775 "void()" `1329  "Variables Locales*"
V L "Error" 4 777 "int8" `1394 
V L "Test_OK" 4 778 "int8" `1395 
V L "ErrorCode" 4 779 "int8" `1396 
V L "Contador" 4 780 "int8" `1397 
C L "BtryDiscTstPshBtn6" 4 768 1 "FUNCTION"
C L "BtryDiscTstPshBtn6" 4 768 1 "FUNCTION"
C L "BtryDiscTstPshBtn6" 4 768 1 "FUNCTION"
C L "BtryDiscTstPshBtn6" 4 768 1 "FUNCTION"
C L "BtryDiscTstPshBtn6" 4 768 1 "FUNCTION"
C L "BattDiscPwrSwitch1" 4 768 1 "FUNCTION"
C L "BattDiscPwrSwitch1" 4 824 1 "*"
C L "BattDiscPwrSwitch1" 4 824 1 "*"
C L "BattDiscPwrSwitch1" 4 824 1 "*"
C L "BattDiscPwrSwitch1" 4 824 1 "*"
F N "BattDiscPwrSwitch1" 4 830 ""
F G "BattDiscPwrSwitch1" 4 831 "void()" `1334  "Variables Locales*"
V L "Error" 4 833 "int8" `1398 
V L "Test_OK" 4 834 "int8" `1399 
V L "ErrorCode" 4 835 "int16" `1400 
V L "i" 4 836 "int8" `1401  "funcionalidad*"
C L "BattDiscPwrSwitch1" 4 824 1 "FUNCTION"
C L "BattDiscPwrSwitch1" 4 824 1 "FUNCTION"
C L "BattDiscPwrSwitch1" 4 824 1 "FUNCTION"
C L "BattDiscPwrSwitch1" 4 824 1 "FUNCTION"
C L "BattDiscPwrSwitch1" 4 824 1 "FUNCTION"
C L "BattDiscPwrSwitch1" 4 824 1 "FUNCTION"
C L "BattDiscPwrSwitch2" 4 893 1 "*"
C L "BattDiscPwrSwitch2" 4 893 1 "*"
C L "BattDiscPwrSwitch2" 4 893 1 "*"
C L "BattDiscPwrSwitch2" 4 893 1 "*"
F N "BattDiscPwrSwitch2" 4 899 ""
F G "BattDiscPwrSwitch2" 4 900 "void()" `1335  "Variables Locales*"
V L "Error" 4 902 "int8" `1402 
V L "Test_OK" 4 903 "int8" `1403 
V L "ErrorCode" 4 904 "int16" `1404 
V L "i" 4 905 "int8" `1405  "funcionalidad*"
C L "BattDiscPwrSwitch2" 4 893 1 "FUNCTION"
C L "BattDiscPwrSwitch2" 4 893 1 "FUNCTION"
C L "BattDiscPwrSwitch2" 4 893 1 "FUNCTION"
C L "BattDiscPwrSwitch2" 4 893 1 "FUNCTION"
C L "BattDiscPwrSwitch2" 4 893 1 "FUNCTION"
C L "BattDiscPwrSwitch2" 4 893 1 "FUNCTION"
C L "BattDiscPwrSwitch3" 4 964 1 "*"
C L "BattDiscPwrSwitch3" 4 964 1 "*"
C L "BattDiscPwrSwitch3" 4 964 1 "*"
C L "BattDiscPwrSwitch3" 4 964 1 "*"
F N "BattDiscPwrSwitch3" 4 970 ""
F G "BattDiscPwrSwitch3" 4 971 "void()" `1336  "Variables Locales*"
V L "Error" 4 973 "int8" `1406 
V L "Test_OK" 4 974 "int8" `1407 
V L "ErrorCode" 4 975 "int16" `1408 
V L "i" 4 976 "int8" `1409  "funcionalidad*"
C L "BattDiscPwrSwitch3" 4 964 1 "FUNCTION"
C L "BattDiscPwrSwitch3" 4 964 1 "FUNCTION"
C L "BattDiscPwrSwitch3" 4 964 1 "FUNCTION"
C L "BattDiscPwrSwitch3" 4 964 1 "FUNCTION"
C L "BattDiscPwrSwitch3" 4 964 1 "FUNCTION"
C L "BattDiscPwrSwitch3" 4 964 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 964 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "*"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "*"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "*"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "*"
F N "ContChargeInterChargeAutonomy" 4 1039 ""
F G "ContChargeInterChargeAutonomy" 4 1040 "void()" `1330  "Variables Locales*"
V L "i" 4 1042 "int8" `1410 
V L "Test_OK" 4 1043 "int8" `1411 
V L "Error" 4 1044 "int8" `1412 
V L "ErrorCode" 4 1045 "int16" `1413 
V L "Cuenta" 4 1046 "int8" `1414 
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "ContChargeInterChargeAutonomy" 4 1033 1 "FUNCTION"
C L "DeepChargeBattery" 4 1033 1 "FUNCTION"
C L "DeepChargeBattery" 4 1147 1 "*"
C L "DeepChargeBattery" 4 1147 1 "*"
C L "DeepChargeBattery" 4 1147 1 "*"
C L "DeepChargeBattery" 4 1147 1 "*"
F N "DeepChargeBattery" 4 1153 ""
F G "DeepChargeBattery" 4 1154 "void()" `1331  "-------------------------------------------------------------------------Autonomy auto-test------------------------------------------------------------------------------*"
C L "AutonomyAutoTest" 4 1159 1 "*"
C L "AutonomyAutoTest" 4 1159 1 "*"
C L "AutonomyAutoTest" 4 1159 1 "*"
C L "AutonomyAutoTest" 4 1159 1 "*"
F N "AutonomyAutoTest" 4 1165 ""
F G "AutonomyAutoTest" 4 1166 "void()" `1332  "------------------------------------------------------------------Red LED testing using test button----------------------------------------------------------------------*"
C L "RedLEDResetWithPshBtn" 4 1171 1 "*"
C L "RedLEDResetWithPshBtn" 4 1171 1 "*"
C L "RedLEDResetWithPshBtn" 4 1171 1 "*"
C L "RedLEDResetWithPshBtn" 4 1171 1 "*"
F N "RedLEDResetWithPshBtn" 4 1177 ""
F G "RedLEDResetWithPshBtn" 4 1178 "void()" `1333  "-----------------------------------------------------------------------Temperature Derating------------------------------------------------------------------------------*"
C L "TemperatureDerating" 4 1183 1 "*"
C L "TemperatureDerating" 4 1183 1 "*"
C L "TemperatureDerating" 4 1183 1 "*"
C L "TemperatureDerating" 4 1183 1 "*"
F N "TemperatureDerating" 4 1189 ""
F G "TemperatureDerating" 4 1190 "void()" `1337  "-------------------------------------------------------------------------Heater Testing------------------------------------------------------------------------------------*"
C L "HTRTesting" 4 1194 1 "*"
C L "HTRTesting" 4 1194 1 "*"
C L "HTRTesting" 4 1194 1 "*"
C L "HTRTesting" 4 1194 1 "*"
F N "HTRTesting" 4 1200 ""
F G "HTRTesting" 4 1201 "void()" `1338  "------------------------------------------------------------------Motion And Light Sensor----------------------------------------------------------------------------------*"
C L "MotionLightSensor" 4 1206 1 "*"
C L "MotionLightSensor" 4 1206 1 "*"
C L "MotionLightSensor" 4 1206 1 "*"
C L "MotionLightSensor" 4 1206 1 "*"
F N "MotionLightSensor" 4 1212 ""
F G "MotionLightSensor" 4 1213 "void()" `1339  "----------------------------------------------------------------------Error in HTR power-------------------------------------------------------------------------------------*"
C L "HTRPowErr" 4 1218 1 "*"
C L "HTRPowErr" 4 1218 1 "*"
C L "HTRPowErr" 4 1218 1 "*"
C L "HTRPowErr" 4 1218 1 "*"
F N "HTRPowErr" 4 1224 ""
F G "HTRPowErr" 4 1225 "void()" `1340  "---------------------------------------------------------------------Communications Test-------------------------------------------------------------------------------------*"
C L "CommTest1" 4 1230 1 "*"
C L "CommTest1" 4 1230 1 "*"
C L "CommTest1" 4 1230 1 "*"
C L "CommTest1" 4 1230 1 "*"
F N "CommTest1" 4 1236 ""
F G "CommTest1" 4 1237 "void()" `1341  "TESTS_H *"
C L "MAIN" 0 18 1 "FUNCTION"
F N "MAIN" 0 32 ""
V L "argc" 0 32 "int8" `1427 
V L "argv" 0 32 "??0 *" `1428 
F G "MAIN" 0 32 "void(int8 argc,??0 * argv)" `1426  "Main Function"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
F N "InitializeMicro" 0 45 ""
F G "InitializeMicro" 0 46 "void()" `1292  "Temporizadores"
C L "InitializeMicro" 0 18 1 "FUNCTION"
C L "InitializeMicro" 0 18 2 "FUNCTION"
C L "InitializeMicro" 0 18 1 "FUNCTION"
C L "InitializeMicro" 0 18 1 "FUNCTION"
C L "InitializeMicro" 0 18 1 "FUNCTION"
C L "InitializeMicro" 0 18 1 "FUNCTION"
C L "rda_isr" 0 63 1 "*"
C L "rda_isr" 0 63 1 "*"
C L "rda_isr" 0 63 1 "*"
C L "rda_isr" 0 63 1 "*"
F N "rda_isr" 0 70 ""
F G "rda_isr" 0 70 "void()" `1432 
C L "rda_isr" 0 63 1 "FUNCTION"
C L "rda_isr" 0 63 1 "FUNCTION"
C L "rda_isr" 0 63 1 "FUNCTION"
C L "rda_isr" 0 63 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "*"
C L "Get_Estado_LUM" 0 83 1 "*"
C L "Get_Estado_LUM" 0 83 1 "*"
C L "Get_Estado_LUM" 0 83 1 "*"
F N "Get_Estado_LUM" 0 89 ""
V L "Carga_Desc" 0 89 "int8" `1434 
F G "Get_Estado_LUM" 0 89 "void(int8 Carga_Desc)" `1293  "Carga_Desc 2 si esta descargando, 1 si esta cargando, 0 no importa"
C L "Get_Estado_LUM" 0 83 3 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 1 "FUNCTION"
C L "Get_Estado_LUM" 0 83 6 "FUNCTION"
C L "TestChoose" 0 151 1 "*"
C L "TestChoose" 0 151 1 "*"
C L "TestChoose" 0 151 1 "*"
C L "TestChoose" 0 151 1 "*"
F N "TestChoose" 0 157 ""
C L "TestChoose" 0 151 1 "FUNCTION"
F G "TestChoose" 0 158 "void()" `1295 
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 2 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "TestChoose" 0 151 1 "FUNCTION"
C L "Read_V_PS" 0 151 1 "FUNCTION"
F N "Read_V_PS" 0 360 ""
F G "Read_V_PS" 0 360 "float()" `1296 
V L "V_PS" 0 361 "float" `1433 
C L "Read_V_PS" 0 151 1 "FUNCTION"
C L "Read_V_DCBus" 0 151 2 "FUNCTION"
F N "Read_V_DCBus" 0 371 ""
F G "Read_V_DCBus" 0 371 "float()" `1297 
V L "V_DCBus" 0 372 "float" `1437 
C L "Read_V_DCBus" 0 151 1 "FUNCTION"
C L "Read_I_LED" 0 151 1 "FUNCTION"
F N "Read_I_LED" 0 382 ""
F G "Read_I_LED" 0 382 "float()" `1298 
V L "V_ILD" 0 383 "float" `1438 
C L "Read_I_HTR" 0 151 1 "FUNCTION"
F N "Read_I_HTR" 0 392 ""
F G "Read_I_HTR" 0 392 "float()" `1299 
V L "V_IHTR" 0 393 "float" `1439 
C L "Read_I_BatDesc" 0 151 1 "FUNCTION"
F N "Read_I_BatDesc" 0 402 ""
F G "Read_I_BatDesc" 0 402 "float()" `1300 
V L "V_Desc" 0 403 "float" `1440 
C L "Read_I_BatCarg" 0 151 1 "FUNCTION"
F N "Read_I_BatCarg" 0 412 ""
F G "Read_I_BatCarg" 0 412 "float()" `1301 
V L "V_Carg" 0 413 "float" `1441 
C L "Read_V_Bat" 0 151 1 "FUNCTION"
F N "Read_V_Bat" 0 422 ""
F G "Read_V_Bat" 0 422 "float()" `1302 
V L "V_Bat" 0 423 "float" `1442 
C L "Read_V_LD" 0 151 1 "FUNCTION"
F N "Read_V_LD" 0 433 ""
F G "Read_V_LD" 0 433 "float()" `1303 
V L "V_LD" 0 434 "float" `1443 
C L "Read_V_HTR" 0 151 1 "FUNCTION"
F N "Read_V_HTR" 0 443 ""
F G "Read_V_HTR" 0 443 "float()" `1304 
V L "V_HTR" 0 444 "float" `1447 
C L "LEDrampCheck" 0 453 1 "*"
C L "LEDrampCheck" 0 453 1 "*"
C L "LEDrampCheck" 0 453 1 "*"
C L "LEDrampCheck" 0 453 1 "*"
F N "LEDrampCheck" 0 459 ""
V L "up_down" 0 459 "int8" `1306 
V L "ILD" 0 459 "float" `1450 
F G "LEDrampCheck" 0 459 "void(int8 up_down,float ILD)" `1305  "0 for up, 1 for Down"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
V L "I_LDramp" 0 461 "float[100]" `1448 
V L "ILD_inic" 0 462 "float" `1449 
V L "ILD_fin" 0 463 "float" `1450 
V L "i" 0 464 "int8" `1451 
V L "j" 0 465 "int8" `1452 
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
V L "j" 0 480 "int8" `1453 
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
V L "j" 0 500 "int8" `1454 
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDrampCheck" 0 453 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "*"
C L "LEDFlickCheck" 0 512 1 "*"
C L "LEDFlickCheck" 0 512 1 "*"
C L "LEDFlickCheck" 0 512 1 "*"
F N "LEDFlickCheck" 0 518 ""
V L "LEDChoose" 0 518 "int8" `1456 
F G "LEDFlickCheck" 0 518 "void(int8 LEDChoose)" `1308  "0 for Red, 1 for Green"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
V L "PreState" 0 520 "int8" `1455 
V L "CurrentState" 0 521 "int8" `1456 
V L "ContCambios" 0 522 "int8" `1457 
V L "cont" 0 523 "int8" `1458 
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "LEDFlickCheck" 0 512 1 "FUNCTION"
C L "BatteryDischargePower" 0 574 1 "*"
C L "BatteryDischargePower" 0 574 1 "*"
C L "BatteryDischargePower" 0 574 1 "*"
C L "BatteryDischargePower" 0 574 1 "*"
F N "BatteryDischargePower" 0 580 ""
C L "BatteryDischargePower" 0 574 1 "FUNCTION"
F G "BatteryDischargePower" 0 581 "void()" `1310  "Variables Locales*"
V L "Current" 0 583 "float" `1459 
V L "Voltage" 0 584 "float" `1460 
V L "Power" 0 585 "float" `1461  "funcionalidad*"
C L "delay_min" 0 593 1 "*"
C L "delay_min" 0 593 1 "*"
C L "delay_min" 0 593 1 "*"
C L "delay_min" 0 593 1 "*"
F N "delay_min" 0 599 ""
V L "minutos" 0 599 "int8" `1463 
F G "delay_min" 0 599 "void(int8 minutos)" `1311 
V L "i" 0 600 "int8" `1462 
C L "IntermitentCharge" 0 606 1 "*"
C L "IntermitentCharge" 0 606 1 "*"
C L "IntermitentCharge" 0 606 1 "*"
C L "IntermitentCharge" 0 606 1 "*"
F N "IntermitentCharge" 0 612 ""
F G "IntermitentCharge" 0 612 "void()" `1313 
V L "I_carg" 0 613 "float" `1463 
V L "gOK" 0 614 "int8" `1464 
V L "i" 0 615 "int8" `1465 
C L "IntermitentCharge" 0 606 1 "FUNCTION"
C L "IntermitentCharge" 0 606 1 "FUNCTION"
C L "IntermitentCharge" 0 606 1 "FUNCTION"
C L "IntermitentCharge" 0 606 1 "FUNCTION"
C L "IntermitentCharge" 0 606 1 "FUNCTION"
C L "IntermitentCharge" 0 606 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "read_device_info" 2 3
F B "read_config_info" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_d" 1 0
F B "set_slow_slew_e" 1 0
F B "set_input_level_a" 1 0
F B "set_input_level_b" 1 0
F B "set_input_level_c" 1 0
F B "set_input_level_d" 1 0
F B "set_input_level_e" 1 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_open_drain_c" 1 0
F B "set_open_drain_d" 1 0
F B "set_open_drain_e" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "pin_select" 2 4
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "get_wdt" 0 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 3
F B "get_adc_ports" 0 0
F B "setup_adc" 1 3
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_adc_trigger" 1 0
F B "adc_write" 2 0
F B "adc_read" 1 0
F B "adc_status" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 3
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 4
F B "setup_pwm1" 1 3
F B "setup_pwm1_slice" 2 0
F B "set_pwm1_period" 1 2
F B "enable_pwm1_interrupt" 1 0
F B "disable_pwm1_interrupt" 1 0
F B "clear_pwm1_interrupt" 1 0
F B "pwm1_interrupt_active" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 4
F B "setup_pwm2" 1 3
F B "setup_pwm2_slice" 2 0
F B "set_pwm2_period" 1 2
F B "enable_pwm2_interrupt" 1 0
F B "disable_pwm2_interrupt" 1 0
F B "clear_pwm2_interrupt" 1 0
F B "pwm2_interrupt_active" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 4
F B "setup_pwm3" 1 3
F B "setup_pwm3_slice" 2 0
F B "set_pwm3_period" 1 2
F B "enable_pwm3_interrupt" 1 0
F B "disable_pwm3_interrupt" 1 0
F B "clear_pwm3_interrupt" 1 0
F B "pwm3_interrupt_active" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_act" 1 0
F B "act_status" 0 0
F B "pll_locked" 0 0
F B "setup_spi" 1 3
F B "spi_set_txcnt" 1 0
F B "spi_enable_interrupts" 1 0
F B "spi_disable_interrupts" 1 0
F B "spi_clear_interrupts" 1 0
F B "spi_interrupt_active" 0 1
F B "spi_interrupt_enabled" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 3
F B "spi_set_txcnt2" 1 0
F B "spi_enable_interrupts2" 1 0
F B "spi_disable_interrupts2" 1 0
F B "spi_clear_interrupts2" 1 0
F B "spi_interrupt_active2" 0 1
F B "spi_interrupt_enabled2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_cwg" 4 0
F B "cwg_status" 0 0
F B "cwg_restart" 0 0
F B "setup_nco" 2 0
F B "set_nco_accumulator" 1 0
F B "get_nco_accumulator" 0 0
F B "set_nco_inc_value" 1 0
F B "get_nco_inc_value" 0 0
F B "setup_nco2" 2 0
F B "set_nco2_accumulator" 1 0
F B "get_nco2_accumulator" 0 0
F B "set_nco2_inc_value" 1 0
F B "get_nco2_inc_value" 0 0
F B "setup_nco3" 2 0
F B "set_nco3_accumulator" 1 0
F B "get_nco3_accumulator" 0 0
F B "set_nco3_inc_value" 1 0
F B "get_nco3_inc_value" 0 0
F B "setup_clc1" 1 0
F B "clc1_setup_gate" 2 0
F B "clc1_setup_input" 2 0
F B "setup_clc2" 1 0
F B "clc2_setup_gate" 2 0
F B "clc2_setup_input" 2 0
F B "setup_clc3" 1 0
F B "clc3_setup_gate" 2 0
F B "clc3_setup_input" 2 0
F B "setup_clc4" 1 0
F B "clc4_setup_gate" 2 0
F B "clc4_setup_input" 2 0
F B "setup_clc5" 1 0
F B "clc5_setup_gate" 2 0
F B "clc5_setup_input" 2 0
F B "setup_clc6" 1 0
F B "clc6_setup_gate" 2 0
F B "clc6_setup_input" 2 0
F B "setup_clc7" 1 0
F B "clc7_setup_gate" 2 0
F B "clc7_setup_input" 2 0
F B "setup_clc8" 1 0
F B "clc8_setup_gate" 2 0
F B "clc8_setup_input" 2 0
F B "setup_dsm" 1 3
F B "setup_zcd" 1 0
F B "zcd_status" 0 0
F B "setup_smt1" 1 2
F B "smt1_status" 0 0
F B "smt1_start" 0 0
F B "smt1_stop" 0 0
F B "smt1_update" 1 0
F B "smt1_reset_timer" 0 0
F B "smt1_read" 1 0
F B "smt1_write" 2 0
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc8" 1 3
F B "crc_calc" 1 3
F B "crc_calc16" 1 3
F B "crc_write" 1 2
F B "crc_read" 0 0
F B "setup_dma" 3 0
F B "dma_start" 6 0
F B "dma_status" 1 0
F B "dma_go" 1 0
F B "dma_staop" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
